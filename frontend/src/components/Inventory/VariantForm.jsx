// src/components/Inventory/VariantForm.jsx
import React from 'react';
import { X, Upload, Loader2, Info, ChevronDown, ChevronUp } from 'lucide-react';

const VariantForm = ({
    variant,
    index,
    handleVariantInputChange,
    removeVariant,
    handleVariantImageFileChange,
    variantImageUploading,
    formErrors,
    isNewProduct,
    calculatedVariantProfitPercentage,
    calculatedVariantPricePlaceholder,
    formatPrice,
    availableCurrencies, // La prop que puede venir vacía
    unitOfMeasureOptions,
    uploadImageToCloud,
}) => {

    // ¡EL PLAN B PARA LAS MONEDAS DE LA VARIANTE!
    // Si la lista de monedas de la API no llega, usamos este respaldo.
    const currencies = availableCurrencies && availableCurrencies.length > 0
        ? availableCurrencies
        : ['USD', 'VES', 'EUR'];

    const [showAdvanced, setShowAdvanced] = React.useState(false);

    return (
        <div className="bg-neutral-gray-800 p-4 rounded-lg mb-4 border border-neutral-gray-700 relative transition-all duration-300">
            <div className="flex justify-between items-center mb-4">
                <h5 className="text-lg font-bold text-neutral-light">Variante #{index + 1}: <span className="text-action-blue">{variant.name || 'Nueva Variante'}</span></h5>
                <button
                    type="button"
                    onClick={() => removeVariant(index)}
                    className="text-red-400 hover:text-red-300 transition-colors"
                    aria-label={`Eliminar variante ${index + 1}`}
                >
                    <X size={24} />
                </button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {/* Nombre de la Variante */}
                <div>
                    <label htmlFor={`variant-name-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Nombre Variante:</label>
                    <input
                        type="text"
                        id={`variant-name-${index}`}
                        name="name"
                        value={variant.name}
                        placeholder="Ej. Rojo, Talla M"
                        onChange={(e) => handleVariantInputChange(index, e)}
                        className={`w-full p-2 rounded-md bg-dark-charcoal border ${formErrors[`variant-${index}-name`] ? 'border-red-500' : 'border-neutral-gray-700'} focus:ring-action-blue focus:border-action-blue text-gray-900`}
                        required
                    />
                    {formErrors[`variant-${index}-name`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-name`]}</p>}
                </div>

                {/* SKU de la Variante */}
                <div>
                    <label htmlFor={`variant-sku-${index}`} className="block text-neutral-light text-sm font-bold mb-2">SKU Variante:</label>
                    <input
                        type="text"
                        id={`variant-sku-${index}`}
                        name="sku"
                        value={variant.sku}
                        placeholder={variant.autoGeneratedVariantSku || "Auto-generado"}
                        onChange={(e) => handleVariantInputChange(index, e)}
                        className={`w-full p-2 rounded-md bg-dark-charcoal border ${formErrors[`variant-${index}-sku`] ? 'border-red-500' : 'border-neutral-gray-700'} focus:ring-action-blue focus:border-action-blue text-gray-900`}
                    />
                    {formErrors[`variant-${index}-sku`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-sku`]}</p>}
                </div>

                {/* Costo Unitario */}
                <div className="flex items-end gap-2">
                    <div className="flex-grow">
                        <label htmlFor={`variant-costPrice-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Costo Unitario:</label>
                        <input
                            type="number"
                            id={`variant-costPrice-${index}`}
                            name="costPrice"
                            value={variant.costPrice}
                            placeholder="Costo"
                            onChange={(e) => handleVariantInputChange(index, e)}
                            className={`w-full p-2 rounded-md bg-dark-charcoal border ${formErrors[`variant-${index}-costPrice`] ? 'border-red-500' : 'border-neutral-gray-700'} focus:ring-action-blue focus:border-action-blue text-gray-900`}
                            required
                        />
                        {formErrors[`variant-${index}-costPrice`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-costPrice`]}</p>}
                    </div>
                    <div className="w-24 flex-shrink-0">
                        <label htmlFor={`variant-costCurrency-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Moneda:</label>
                        <select
                            id={`variant-costCurrency-${index}`}
                            name="costCurrency"
                            value={variant.costCurrency}
                            onChange={(e) => handleVariantInputChange(index, e)}
                            className={`w-full p-2 rounded-md bg-dark-charcoal border ${formErrors[`variant-${index}-costCurrency`] ? 'border-red-500' : 'border-neutral-gray-700'} focus:ring-action-blue focus:border-action-blue text-gray-900 cursor-pointer`}
                            required
                        >
                            {currencies.map(currency => (
                                <option key={currency} value={currency}>{currency}</option>
                            ))}
                        </select>
                    </div>
                </div>

                {/* Stock */}
                <div>
                    <label htmlFor={`variant-stock-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Stock:</label>
                    <input
                        type="number"
                        id={`variant-stock-${index}`}
                        name="stock"
                        value={variant.stock}
                        placeholder="Stock"
                        onChange={(e) => handleVariantInputChange(index, e)}
                        className={`w-full p-2 rounded-md bg-dark-charcoal border ${formErrors[`variant-${index}-stock`] ? 'border-red-500' : 'border-neutral-gray-700'} focus:ring-action-blue focus:border-action-blue text-gray-900`}
                        required
                    />
                    {formErrors[`variant-${index}-stock`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-stock`]}</p>}
                </div>

                {/* Precio de Venta y % Ganancia */}
                <div className="flex items-end gap-2 md:col-span-2 lg:col-span-1">
                    <div className="flex-grow">
                        <label htmlFor={`variant-price-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Precio Venta:</label>
                        <input
                            type="number"
                            id={`variant-price-${index}`}
                            name="price"
                            value={calculatedVariantPricePlaceholder !== null ? parseFloat(calculatedVariantPricePlaceholder).toFixed(2) : ''}
                            onChange={() => {}} // Es de solo lectura
                            placeholder={formatPrice(calculatedVariantPricePlaceholder, variant.saleCurrency || 'USD')}
                            className={`w-full p-2 rounded-md bg-dark-charcoal border ${formErrors[`variant-${index}-price`] ? 'border-red-500' : 'border-neutral-gray-700'} focus:ring-action-blue focus:border-action-blue text-gray-900`}
                            readOnly
                        />
                        {formErrors[`variant-${index}-price`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-price`]}</p>}
                    </div>
                    <div className="w-24 flex-shrink-0">
                        <label htmlFor={`variant-saleCurrency-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Moneda:</label>
                        <select
                            id={`variant-saleCurrency-${index}`}
                            name="saleCurrency"
                            value={variant.saleCurrency}
                            onChange={(e) => handleVariantInputChange(index, e)}
                            className={`w-full p-2 rounded-md bg-dark-charcoal border ${formErrors[`variant-${index}-saleCurrency`] ? 'border-red-500' : 'border-neutral-gray-700'} focus:ring-action-blue focus:border-action-blue text-gray-900 cursor-pointer`}
                            required
                        >
                            {currencies.map(currency => (
                                <option key={currency} value={currency}>{currency}</option>
                            ))}
                        </select>
                    </div>
                    <div className="w-24 flex-shrink-0">
                        <label htmlFor={`variant-profitPercentage-${index}`} className="block text-neutral-light text-sm font-bold mb-2">% Ganancia:</label>
                        <input
                            type="number"
                            id={`variant-profitPercentage-${index}`}
                            name="profitPercentage"
                            value={variant.profitPercentage}
                            placeholder="%"
                            onChange={(e) => handleVariantInputChange(index, e)}
                            className={`w-full p-2 rounded-md bg-dark-charcoal border ${formErrors[`variant-${index}-profitPercentage`] ? 'border-red-500' : 'border-neutral-gray-700'} focus:ring-action-blue focus:border-action-blue text-gray-900`}
                        />
                    </div>
                </div>
            </div>

            {/* Opciones Avanzadas para la Variante */}
            <div className="mt-4">
                <button
                    type="button"
                    onClick={() => setShowAdvanced(!showAdvanced)}
                    className="w-full bg-neutral-gray-700 hover:bg-neutral-gray-600 text-neutral-light font-bold py-2 px-4 rounded-lg flex items-center justify-between transition duration-200 focus:outline-none focus:ring-2 focus:ring-neutral-gray-500 text-sm"
                >
                    <span>Opciones Avanzadas de la Variante</span>
                    {showAdvanced ? <ChevronUp size={20} /> : <ChevronDown size={20} />}
                </button>
                {showAdvanced && (
                    <div className="mt-4 border border-neutral-gray-700 rounded-lg p-4 bg-dark-charcoal animate-fade-in-down">
                        {/* Atributos de la variante */}
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                             <div>
                                <label htmlFor={`variant-color-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Color:</label>
                                <input
                                    type="text"
                                    id={`variant-color-${index}`}
                                    name="color"
                                    value={variant.color || ''}
                                    onChange={(e) => handleVariantInputChange(index, e)}
                                    className={`w-full p-2 rounded-md bg-dark-charcoal border ${formErrors[`variant-${index}-color`] ? 'border-red-500' : 'border-neutral-gray-700'} focus:ring-action-blue focus:border-action-blue text-gray-900`}
                                    placeholder="Ej. Rojo"
                                />
                            </div>
                            <div>
                                <label htmlFor={`variant-size-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Talla/Tamaño:</label>
                                <input
                                    type="text"
                                    id={`variant-size-${index}`}
                                    name="size"
                                    value={variant.size || ''}
                                    onChange={(e) => handleVariantInputChange(index, e)}
                                    className={`w-full p-2 rounded-md bg-dark-charcoal border ${formErrors[`variant-${index}-size`] ? 'border-red-500' : 'border-neutral-gray-700'} focus:ring-action-blue focus:border-action-blue text-gray-900`}
                                    placeholder="Ej. M, 42"
                                />
                            </div>
                            <div>
                                <label htmlFor={`variant-material-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Material:</label>
                                <input
                                    type="text"
                                    id={`variant-material-${index}`}
                                    name="material"
                                    value={variant.material || ''}
                                    onChange={(e) => handleVariantInputChange(index, e)}
                                    className={`w-full p-2 rounded-md bg-dark-charcoal border ${formErrors[`variant-${index}-material`] ? 'border-red-500' : 'border-neutral-gray-700'} focus:ring-action-blue focus:border-action-blue text-gray-900`}
                                    placeholder="Ej. Algodón"
                                />
                            </div>
                        </div>

                        {/* Gestión de stock avanzada de la variante */}
                        <div className="mb-6 border-t border-neutral-gray-700 pt-6 mt-6">
                            <h4 className="text-lg font-semibold text-neutral-light mb-3">Gestión de Stock (Variante):</h4>
                            <div className="flex items-center mb-4">
                                <input
                                    type="checkbox"
                                    id={`variant-isPerishable-${index}`}
                                    name="isPerishable"
                                    checked={variant.isPerishable}
                                    onChange={(e) => handleVariantInputChange(index, e)}
                                    className="mr-2 h-5 w-5 text-action-blue rounded focus:ring-action-blue border-neutral-gray-600 bg-neutral-gray-700"
                                />
                                <label htmlFor={`variant-isPerishable-${index}`} className="text-neutral-light font-bold">¿Es Perecedero?</label>
                            </div>
                            <div>
                                <label htmlFor={`variant-reorderThreshold-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Umbral de Reaprovisionamiento:</label>
                                <input
                                    type="number"
                                    id={`variant-reorderThreshold-${index}`}
                                    name="reorderThreshold"
                                    value={variant.reorderThreshold}
                                    onChange={(e) => handleVariantInputChange(index, e)}
                                    className={`w-full p-2 rounded-md bg-dark-charcoal border ${formErrors[`variant-${index}-reorderThreshold`] ? 'border-red-500' : 'border-neutral-gray-700'} focus:ring-action-blue focus:border-action-blue text-gray-900`}
                                    placeholder="Ej. 5"
                                />
                            </div>
                            {variant.isPerishable && (
                                <>
                                    <div className="mt-4">
                                        <label htmlFor={`variant-optimalMaxStock-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Stock Óptimo Máximo:</label>
                                        <input
                                            type="number"
                                            id={`variant-optimalMaxStock-${index}`}
                                            name="optimalMaxStock"
                                            value={variant.optimalMaxStock}
                                            onChange={(e) => handleVariantInputChange(index, e)}
                                            className={`w-full p-2 rounded-md bg-dark-charcoal border ${formErrors[`variant-${index}-optimalMaxStock`] ? 'border-red-500' : 'border-neutral-gray-700'} focus:ring-action-blue focus:border-action-blue text-gray-900`}
                                            placeholder="Ej. 20"
                                            required={variant.isPerishable}
                                        />
                                    </div>
                                    <div className="mt-4">
                                        <label htmlFor={`variant-shelfLifeDays-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Vida Útil (días):</label>
                                        <input
                                            type="number"
                                            id={`variant-shelfLifeDays-${index}`}
                                            name="shelfLifeDays"
                                            value={variant.shelfLifeDays}
                                            onChange={(e) => handleVariantInputChange(index, e)}
                                            className={`w-full p-2 rounded-md bg-dark-charcoal border ${formErrors[`variant-${index}-shelfLifeDays`] ? 'border-red-500' : 'border-neutral-gray-700'} focus:ring-action-blue focus:border-action-blue text-gray-900`}
                                            placeholder="Ej. 15"
                                            required={variant.isPerishable}
                                        />
                                    </div>
                                </>
                            )}
                        </div>

                        {/* Carga de imagen de la variante */}
                        <div className="mb-6">
                            <h4 className="text-lg font-semibold text-neutral-light mb-3">Imagen de la Variante:</h4>
                            <div className="flex flex-col gap-4">
                                <label htmlFor={`variant-imageFile-${index}`} className="block text-neutral-light text-sm font-bold mb-2 cursor-pointer bg-neutral-gray-600 hover:bg-neutral-gray-700 py-2 px-4 rounded-lg text-center flex items-center justify-center transition duration-200">
                                    {variantImageUploading[index] ? <Loader2 size={20} className="mr-2 animate-spin" /> : <Upload size={20} className="mr-2"/>} Cargar Imagen
                                </label>
                                <input
                                    type="file"
                                    id={`variant-imageFile-${index}`}
                                    name="imageFile"
                                    accept="image/*"
                                    onChange={(e) => handleVariantImageFileChange(index, e)}
                                    className="hidden"
                                />
                                {variant.imageUrl && (
                                    <div className="mt-2 border border-neutral-gray-600 rounded-lg p-2 text-center bg-neutral-gray-800">
                                        <p className="text-neutral-gray-400 text-sm mb-2">Previsualización:</p>
                                        <img
                                            src={variant.imageUrl}
                                            alt={`Previsualización de ${variant.name}`}
                                            className="max-w-full h-auto max-h-32 object-contain mx-auto rounded-md"
                                            onError={(e) => {
                                                e.target.onerror = null;
                                                e.target.src = 'https://placehold.co/400x300/2D3748/F8F8F2?text=Error+Img';
                                            }}
                                        />
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
};

export default VariantForm;
