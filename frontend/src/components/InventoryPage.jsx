// C:\Proyectos\Label\frontend\src\components\InventoryPage.jsx
import React, { useState, useEffect, useCallback, useRef } from 'react';
import axiosInstance from '../api/axiosInstance'; // Importa la instancia de Axios
import ProductModal from './ProductModal'; // Importa el componente ProductModal
import { PlusSquare, Edit, Trash2, XCircle, Save, Search, ChevronLeft, ChevronRight, Loader2, Info, Upload, ChevronDown, ChevronUp, Plus, X } from 'lucide-react'; // Íconos de Lucide React

const InventoryPage = () => {
    // Estados principales para la gestión de productos y la interfaz de usuario
    const [products, setProducts] = useState([]); // Lista de productos obtenidos
    const [loading, setLoading] = useState(true); // Estado de carga de la página
    const [error, setError] = useState(''); // Mensajes de error para el usuario
    const [successMessage, setSuccessMessage] = useState(''); // Mensajes de éxito para el usuario
    const [showAddModal, setShowAddModal] = useState(false); // Control de visibilidad del modal para añadir producto
    const [showEditModal, setShowEditModal] = useState(false); // Control de visibilidad del modal para editar producto
    const [editingProduct, setEditingProduct] = useState(null); // Producto seleccionado para edición
    const [showConfirmModal, setShowConfirmModal] = useState(false); // Control de visibilidad del modal de confirmación de eliminación
    const [productToDelete, setProductToDelete] = useState(null); // ID del producto seleccionado para eliminar
    
    // Estado para controlar si el SKU principal fue editado manualmente por el usuario
    const [isMainSkuManuallyEdited, setIsMainSkuManuallyEdited] = useState(false);
    
    // Estado para controlar qué productos tienen sus variantes expandidas
    const [expandedProducts, setExpandedProducts] = useState(new Set());

    // Estados para filtros y paginación
    const [searchTerm, setSearchTerm] = useState(''); // Término de búsqueda en la tabla
    const [selectedCategory, setSelectedCategory] = useState('Todas las Categorías'); // Categoría seleccionada para filtrar
    const [currentPage, setCurrentPage] = useState(1); // Página actual de la paginación
    const [totalPages, setTotalPages] = useState(1); // Número total de páginas
    const [limit] = useState(10); // Límite fijo de productos por página

    // Estados para opciones de filtro dinámicas (obtenidas de los productos existentes)
    const [availableCategories, setAvailableCategories] = useState([]); // Opciones de categoría para el filtro
    const [availableBrands, setAvailableBrands] = useState(['Todas las Marcas']); // Opciones de marca para el filtro
    const [selectedBrand, setSelectedBrand] = useState('Todas las Marcas'); // Marca seleccionada
    const [availableSuppliers, setAvailableSuppliers] = useState(['Todos los Proveedores']); // Opciones de proveedor para el filtro
    const [selectedSupplier, setSelectedSupplier] = useState('Todos los Proveedores'); // Proveedor seleccionado
    const [availableVariantColors, setAvailableVariantColors] = useState(['Todos los Colores']); // Colores de variante para el filtro
    const [selectedVariantColor, setSelectedVariantColor] = useState('Todos los Colores'); // Color de variante seleccionado
    const [availableVariantSizes, setAvailableVariantSizes] = useState(['Todas las Tallas']); // Tallas de variante para el filtro
    const [selectedVariantSize, setSelectedVariantSize] = useState('Todas las Tallas'); // Talla de variante seleccionada

    // Estados para el reporte de inventario por variante
    const [variantReport, setVariantReport] = useState([]);
    const [showVariantReport, setShowVariantReport] = useState(false); // Para controlar la visibilidad del reporte

    // Estados para ordenamiento
    const [sortBy, setSortBy] = useState('createdAt'); // 'name', 'price', 'stock', 'category', 'brand', 'createdAt'
    // sortBy`: Guardará el campo por el que se ordenará (ej. `'name'`, `'price'`, `'stock'`). `createdAt` descendente será nuestro valor por defecto, ya que es el orden que tenías antes.
    const [sortOrder, setSortOrder] = useState('desc'); // 'asc' o 'desc'
    // sortOrder`: Guardará la dirección (`'asc'` para ascendente o `'desc'` para descendente).

    // Estados para sugerencias de productos globales (para autocompletado al añadir)
    const [globalProductSuggestions, setGlobalProductSuggestions] = useState([]); // Sugerencias de productos desde el catálogo global
    const [showGlobalSuggestions, setShowGlobalSuggestions] = useState(false); // Visibilidad de la lista de sugerencias
    const [noGlobalSuggestionsFound, setNoGlobalSuggestionsFound] = useState(false); // Indica si no se encontraron sugerencias
    const debounceTimeoutRef = useRef(null); // Referencia para el temporizador de debounce en la búsqueda de sugerencias

    // Estado para el SKU autogenerado del producto principal (si el usuario no lo introduce)
    const [autoGeneratedSku, setAutoGeneratedSku] = useState('');

    // Estados para la carga y previsualización de imágenes
    const [imageFile, setImageFile] = useState(null); // Archivo de imagen local para el producto principal
    const [imagePreviewUrl, setImagePreviewUrl] = useState(''); // URL de previsualización de la imagen principal
    const [isUploadingMainImage, setIsUploadingMainImage] = useState(false); // Estado de carga para la imagen principal
    const [variantImageUploading, setVariantImageUploading] = useState({}); // Estados de carga para imágenes de variantes por índice

    // Estado para controlar la visibilidad de las opciones avanzadas en los modales de añadir/editar
    const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);

    // Estado para errores de validación de campos individuales del formulario
    const [formErrors, setFormErrors] = useState({});

    // Estados para los datos del producto nuevo y el producto que se está editando
    const [newProduct, setNewProduct] = useState({
        name: '', description: '', category: '', price: '', stock: '',
        costPrice: '', sku: '', unitOfMeasure: 'unidad', brand: '', supplier: '', imageUrl: '',
        color: '', size: '', material: '', variants: [],
        // --- NUEVOS CAMPOS DE STOCK/PERECEDEROS PARA PRODUCTO PRINCIPAL ---
        isPerishable: false,        // Indica si el producto es perecedero (true/false)
        reorderThreshold: 0,        // Umbral de stock para alerta de stock bajo (número)
        optimalMaxStock: 0,         // Stock óptimo máximo para alerta de stock alto (número, para perecederos)
        shelfLifeDays: 0,           // Días de vida útil (número, para perecederos)
        // --- FIN NUEVOS CAMPOS ---
    
    

    });

    // Opciones predefinidas para la unidad de medida
    const unitOfMeasureOptions = ['unidad', 'kg', 'litro', 'metro', 'paquete', 'caja', 'docena', 'otro'];

    // --- NUEVOS ESTADOS PARA ALERTAS DE STOCK ---
    const [lowStockAlerts, setLowStockAlerts] = useState([]); // Lista de productos/variantes con stock bajo
    const [highStockAlerts, setHighStockAlerts] = useState([]); // Lista de productos/variantes con stock alto (perecederos)

    // Función auxiliar para mostrar mensajes de éxito o error al usuario
    const displayMessage = (msg, type) => {
        if (type === 'success') {
            setSuccessMessage(msg);
            setError('');
        } else {
            setError(msg);
            setSuccessMessage('');
        }
        // Los mensajes se borran automáticamente después de 5 segundos
        setTimeout(() => {
            setSuccessMessage('');
            setError('');
        }, 5000);
    };

    // Función para generar un SKU único a partir de un nombre, limpiando y añadiendo un hash
    const generateSkuFromName = useCallback((name) => {
        if (!name || name.trim() === '') {
            return '';
        }
        const cleanedName = name
            .normalize("NFD").replace(/[\u0300-\u036f]/g, "") // Elimina acentos (ej. "ñ" -> "n")
            .replace(/[^a-zA-Z0-9\s]/g, '') // Elimina caracteres especiales
            .trim()
            .toUpperCase()
            .split(/\s+/)
            .slice(0, 4) // Toma las primeras 4 palabras
            .join('-'); // Une las palabras con guiones
        const hash = Math.random().toString(36).substring(2, 6).toUpperCase(); // Genera un hash aleatorio
        return `${cleanedName.substring(0, 15)}-${hash}`; // Combina nombre limpiado y hash
    }, []);

    // Función para alternar la visibilidad de las variantes de un producto
    const toggleProductExpansion = (productId) => {
        setExpandedProducts(prev => {
            const newSet = new Set(prev);
            if (newSet.has(productId)) {
                newSet.delete(productId); // Si ya está expandido, lo colapsa
            } else {
                newSet.add(productId); // Si no está expandido, lo expande
            }
            return newSet;
        });
    };


    // Función para validar campos individuales del formulario y establecer mensajes de error
    const validateField = (name, value, currentProductState, index = null) => {
        let message = '';
        const isVariantField = index !== null; // Determina si el campo pertenece a una variante

        if (isVariantField) {
            // Validaciones específicas para campos de variantes
            if (name === 'name' && value.trim() === '') message = 'El nombre de la variante es obligatorio.';
            // Si el SKU de la variante está vacío y no se auto-generó, mostrar error
            if (name === 'sku' && value.trim() === '' && !currentProductState.variants[index]?.autoGeneratedVariantSku) message = 'El SKU de la variante es obligatorio o se debe generar automáticamente.';
            // Validaciones para campos numéricos de variante
            if ((name === 'price' || name === 'costPrice' || name === 'stock') && (value === '' || value === null || value === undefined)) message = 'Campo obligatorio.';
            else if ((name === 'price' || name === 'costPrice' || name === 'stock') && isNaN(Number(value))) message = 'Debe ser un número válido.';
            else if (name === 'price' && Number(value) <= 0) message = 'El precio debe ser positivo.';
            else if ((name === 'costPrice' || name === 'stock') && Number(value) < 0) message = 'Debe ser un número no negativo.';
            if (name === 'unitOfMeasure' && value.trim() === '') message = 'La unidad de medida es obligatoria.';

            // --- VALIDACIONES PARA NUEVOS CAMPOS DE STOCK/PERECEDEROS DE VARIANTE ---
            if (name === 'reorderThreshold' && (isNaN(Number(value)) || Number(value) < 0)) message = 'El umbral de reaprovisionamiento debe ser un número no negativo.';
            // optimalMaxStock y shelfLifeDays solo se validan si la variante es perecedera
            if (currentProductState.variants[index]?.isPerishable) {
                if (name === 'optimalMaxStock' && (isNaN(Number(value)) || Number(value) < 0)) message = 'El stock óptimo máximo debe ser un número no negativo.';
                if (name === 'shelfLifeDays' && (isNaN(Number(value)) || Number(value) < 0)) message = 'Los días de vida útil deben ser un número no negativo.';
            }
            // --- FIN VALIDACIONES ---
        } else {
            // Validaciones específicas para campos del producto principal
            if (name === 'name' && value.trim() === '') message = 'El nombre es obligatorio.';
            if (name === 'category' && value.trim() === '') message = 'La categoría es obligatoria.';
            // Si el SKU del producto principal está vacío y no se auto-generó, mostrar error
            if (name === 'sku' && value.trim() === '' && !autoGeneratedSku && currentProductState.variants.length === 0) message = 'El SKU es obligatorio si no hay variantes y no se genera automáticamente.';

            // Validar price, stock, costPrice, unitOfMeasure solo si no existen variantes
            if (currentProductState.variants.length === 0) {
                if ((name === 'price' || name === 'costPrice' || name === 'stock') && (value === '' || value === null || value === undefined)) message = 'Campo obligatorio.';
                else if ((name === 'price' || name === 'costPrice' || name === 'stock') && isNaN(Number(value))) message = 'Debe ser un número válido.';
                else if (name === 'price' && Number(value) <= 0) message = 'El precio debe ser positivo.';
                else if ((name === 'costPrice' || name === 'stock') && Number(value) < 0) message = 'Debe ser un número no negativo.';
                if (name === 'unitOfMeasure' && value.trim() === '') message = 'La unidad de medida es obligatoria.';
            }

            // --- VALIDACIONES PARA NUEVOS CAMPOS DE STOCK/PERECEDEROS DE PRODUCTO PRINCIPAL ---
            if (name === 'reorderThreshold' && (isNaN(Number(value)) || Number(value) < 0)) message = 'El umbral de reaprovisionamiento debe ser un número no negativo.';
            // optimalMaxStock y shelfLifeDays solo se validan si el producto principal es perecedero
            if (currentProductState.isPerishable) {
                if (name === 'optimalMaxStock' && (isNaN(Number(value)) || Number(value) < 0)) message = 'El stock óptimo máximo debe ser un número no negativo.';
                if (name === 'shelfLifeDays' && (isNaN(Number(value)) || Number(value) < 0)) message = 'Los días de vida útil deben ser un número no negativo.';
            }
            // --- FIN VALIDACIONES ---
        }
        return message;
    };

    // Maneja los cambios en los campos de entrada del producto principal
    const handleInputChange = (e) => {
        const { name, value, type, checked } = e.target; // Desestructura 'type' y 'checked' para manejar checkboxes
        // Ajusta el valor para el checkbox (booleano) o para otros tipos de input (valor directo)
        const inputValue = type === 'checkbox' ? checked : value;

        // Determina qué estado de producto (nuevo o en edición) se va a actualizar
        const targetStateSetter = showAddModal ? setNewProduct : setEditingProduct;
        // Obtiene el estado actual del producto antes de la actualización
        const targetProductState = showAddModal ? newProduct : editingProduct;

        // Actualiza el estado del producto con el nuevo valor
        targetStateSetter(prev => ({ ...prev, [name]: inputValue }));

        // Valida el campo modificado y actualiza los errores del formulario
        // Se pasa una copia del estado con el valor actual de `inputValue` para una validación precisa
        setFormErrors(prev => ({ ...prev, [name]: validateField(name, inputValue, { ...targetProductState, [name]: inputValue }) }));

        // Lógica para auto-generación de SKU y sugerencias de productos globales (solo para el campo 'name' en el modal de añadir)
        if (name === 'name' && showAddModal) {
            if (inputValue.trim().length >= 2) {
                // Solo intenta auto-generar SKU si el usuario NO lo ha editado manualmente
                if (!isMainSkuManuallyEdited) { // <-- CAMBIO CLAVE AQUÍ
                    setAutoGeneratedSku(generateSkuFromName(inputValue));
                }
                // Implementa debounce para las sugerencias de productos globales para evitar llamadas excesivas a la API
                if (debounceTimeoutRef.current) clearTimeout(debounceTimeoutRef.current);
                debounceTimeoutRef.current = setTimeout(() => {
                    fetchGlobalProductSuggestions(inputValue);
                }, 300);
            } else {
                // Limpia las sugerencias y el SKU auto-generado si el nombre es demasiado corto
                setAutoGeneratedSku('');
                setGlobalProductSuggestions([]);
                setShowGlobalSuggestions(false);
                setNoGlobalSuggestionsFound(false);
            }
        }

        // Lógica para auto-generar/limpiar SKU si el campo SKU se vacía o se edita manualmente
        if (name === 'sku') { // <-- LÓGICA REESTRUCTURADA PARA SKU
            if (inputValue.trim() === '') {
                // Si el campo SKU se vacía, permitir que el auto-generador actúe si el nombre lo permite
                setIsMainSkuManuallyEdited(false); // <-- Resetear a falso
                setAutoGeneratedSku(''); // Limpiar cualquier SKU auto-generado previo al borrar
                const currentProductName = (showAddModal ? newProduct : editingProduct).name;
                    // Auto-generar el SKU si el nombre del producto es lo suficientemente largo
                    if (currentProductName.trim().length >= 2) { // <-- CAMBIO CLAVE AQUÍ: Eliminado && !globalProductSuggestions.length
                        setAutoGeneratedSku(generateSkuFromName(currentProductName));
                    }
            } else {
                // Si el usuario escribe algo en el campo SKU, consideramos que lo ha editado manualmente
                setIsMainSkuManuallyEdited(true); // <-- Establecer a true
                setAutoGeneratedSku(''); // Limpiar el SKU auto-generado si el usuario escribe manualmente
            }
        }

        // Si el campo de URL de imagen es editado, limpia cualquier selección de archivo local
        if (name === 'imageUrl') {
            setImageFile(null); // Limpia cualquier archivo local seleccionado
            setImagePreviewUrl(inputValue); // Actualiza la previsualización de la imagen con la URL introducida
        }

        // Limpia los mensajes generales de éxito o error al cambiar cualquier input
        setError('');
        setSuccessMessage('');
    };

    // Maneja los cambios en los campos de entrada de las variantes del producto
    const handleVariantInputChange = (index, e) => {
        const { name, value, type, checked } = e.target; // Desestructura 'type' y 'checked' para checkboxes
        const inputValue = type === 'checkbox' ? checked : value; // Ajusta el valor para el checkbox

        const targetProductState = showAddModal ? newProduct : editingProduct; // Producto actual (nuevo o editando)
        const setTargetProductState = showAddModal ? setNewProduct : setEditingProduct; // Setter del estado del producto

        const updatedVariants = [...targetProductState.variants]; // Copia de las variantes
        let updatedVariant = { ...updatedVariants[index], [name]: inputValue }; // Actualiza la variante específica

        // Lógica de generación de SKU para variantes
        if (name === 'name') {
            if (!updatedVariant.sku || updatedVariant.sku.trim() === '') {
                updatedVariant.autoGeneratedVariantSku = generateSkuFromName(inputValue);
            } else {
                updatedVariant.autoGeneratedVariantSku = ''; // Limpia el SKU auto-generado si el usuario escribe manualmente
            }
        } else if (name === 'sku') {
            if (inputValue.trim() !== '') {
                updatedVariant.autoGeneratedVariantSku = ''; // Limpia el SKU auto-generado si el usuario escribe manualmente
            } else {
                if (updatedVariant.name && updatedVariant.name.trim() !== '') {
                    updatedVariant.autoGeneratedVariantSku = generateSkuFromName(updatedVariant.name);
                } else {
                    updatedVariant.autoGeneratedVariantSku = '';
                }
            }
        }

        updatedVariants[index] = updatedVariant; // Asigna la variante actualizada de nuevo al array
        setTargetProductState(prev => ({ ...prev, variants: updatedVariants })); // Actualiza el estado principal del producto

        // Valida el campo de la variante y actualiza los errores del formulario
        setFormErrors(prev => {
            const tempProductState = { ...targetProductState, variants: updatedVariants }; // Estado temporal con variantes actualizadas
            return {
                ...prev,
                [`variant-${index}-${name}`]: validateField(name, inputValue, tempProductState, index)
            };
        });

        // Limpia los mensajes generales de éxito o error
        setError('');
        setSuccessMessage('');
    };

    // Maneja los cambios cuando se selecciona un archivo de imagen local para el producto principal
    const handleImageFileChange = (e) => {
        const file = e.target.files[0]; // Obtiene el archivo seleccionado
        const targetStateSetter = showAddModal ? setNewProduct : setEditingProduct; // Determina qué estado actualizar

        if (file) {
            setImageFile(file); // Almacena el archivo
            setImagePreviewUrl(URL.createObjectURL(file)); // Crea una URL temporal para previsualización local
            targetStateSetter(prev => ({ ...prev, imageUrl: '' })); // Limpia el campo de texto de URL si se selecciona un archivo
            setError(''); // Limpia cualquier error de imagen anterior
            setFormErrors(prev => ({ ...prev, imageUrl: '' })); // Limpia el error específico para imageUrl
        } else {
            setImageFile(null); // No hay archivo seleccionado
            // Si se borra la entrada de archivo, y hay una URL existente en el estado del producto, la establece de nuevo como previsualización.
            // De lo contrario, limpia la previsualización.
            const currentProduct = showAddModal ? newProduct : editingProduct;
            setImagePreviewUrl(currentProduct?.imageUrl || ''); // Mantiene la URL existente si no hay archivo nuevo
            targetStateSetter(prev => ({ ...prev, imageUrl: currentProduct?.imageUrl || '' })); // Mantiene la URL existente en el estado
        }
    };

    // Maneja los cambios cuando se selecciona un archivo de imagen local para una variante
    const handleVariantImageFileChange = async (index, e) => {
        const file = e.target.files[0];
        if (file) {
            setVariantImageUploading(prev => ({ ...prev, [index]: true })); // Activa el estado de carga para esta variante
            const result = await uploadImageToCloud(file, true, index); // Llama a la función general de subida de imagen
            setVariantImageUploading(prev => ({ ...prev, [index]: false })); // Desactiva el estado de carga
            if (!result.success) {
                setFormErrors(prev => ({
                    ...prev,
                    [`variant-${index}-imageUrl`]: 'Error al subir imagen de variante.' // Muestra error si falla la subida
                }));
            }
        }
    };

    // Función principal para subir archivos de imagen o procesar URLs a Cloudinary
    const uploadImageToCloud = async (fileOrUrl, isVariant = false, variantIndex = null) => {
        const formData = new FormData();
        if (fileOrUrl instanceof File) {
            formData.append('image', fileOrUrl); // 'image' es el nombre del campo que Multer espera en el backend
        } else if (typeof fileOrUrl === 'string' && fileOrUrl.trim() !== '') {
            // Si la URL ya es de Cloudinary, no es necesario resubirla, simplemente la devuelve
            if (fileOrUrl.includes('res.cloudinary.com')) {
                displayMessage('La imagen ya está alojada.', 'success');
                return { success: true, url: fileOrUrl };
            }
            formData.append('imageUrl', fileOrUrl); // Si es una nueva URL, la envía al backend para procesamiento
        } else {
            return { success: true, url: '' }; // No hay archivo o URL válida para subir, o se intenta limpiar la imagen
        }

        try {
            if (!isVariant) setIsUploadingMainImage(true); // Activa el estado de carga para la imagen principal
            const response = await axiosInstance.post('/upload', formData, {
                headers: {
                    'Content-Type': 'multipart/form-data' // Encabezado importante para enviar archivos
                }
            });
            displayMessage('Imagen procesada y alojada exitosamente.', 'success');
            const uploadedUrl = response.data.imageUrl;

            // Actualiza la URL de la imagen en el estado correspondiente (producto principal o variante específica)
            if (isVariant && variantIndex !== null) {
                const targetStateSetter = showAddModal ? setNewProduct : setEditingProduct;
                targetStateSetter(prev => {
                    const updatedVariants = [...prev.variants];
                    if (updatedVariants[variantIndex]) {
                        updatedVariants[variantIndex] = { ...updatedVariants[variantIndex], imageUrl: uploadedUrl };
                    }
                    return { ...prev, variants: updatedVariants };
                });
                setFormErrors(prev => ({ ...prev, [`variant-${variantIndex}-imageUrl`]: '' })); // Limpia el error de imagen de variante
            } else { // Es la imagen del producto principal
                const targetStateSetter = showAddModal ? setNewProduct : setEditingProduct;
                targetStateSetter(prev => ({ ...prev, imageUrl: uploadedUrl }));
                setImagePreviewUrl(uploadedUrl); // Actualiza la URL de previsualización principal
                setImageFile(null); // Limpia el archivo local después de una subida exitosa
                setFormErrors(prev => ({ ...prev, imageUrl: '' })); // Limpia el error de imagen principal
            }
            return { success: true, url: uploadedUrl }; // Devuelve la URL de Cloudinary
        } catch (err) {
            const errorMessage = err.response?.data?.message || 'Error al procesar la imagen. Por favor, inténtalo de nuevo.';
            displayMessage(errorMessage, 'error');
            if (isVariant && variantIndex !== null) {
                setFormErrors(prev => ({ ...prev, [`variant-${variantIndex}-imageUrl`]: 'Error al subir imagen.' }));
                const targetStateSetter = showAddModal ? setNewProduct : setEditingProduct;
                targetStateSetter(prev => {
                    const updatedVariants = [...prev.variants];
                    if (updatedVariants[variantIndex]) {
                        updatedVariants[variantIndex] = { ...updatedVariants[variantIndex], imageUrl: '' }; // Limpia la URL si la subida falla
                    }
                    return { ...prev, variants: updatedVariants };
                });
            } else {
                setFormErrors(prev => ({ ...prev, imageUrl: 'Error al subir imagen.' }));
                const targetStateSetter = showAddModal ? setNewProduct : setEditingProduct;
                targetStateSetter(prev => ({ ...prev, imageUrl: '' })); // Limpia la URL si la subida falla
                setImagePreviewUrl(''); // Limpia la previsualización principal si la subida falla
                setImageFile(null); // Limpia el archivo local si falla
            }
            return { success: false, error: errorMessage };
        } finally {
            if (!isVariant) setIsUploadingMainImage(false); // Desactiva el estado de carga para la imagen principal
        }
    };

    // Función auxiliar para subir imágenes de variantes a Cloudinary, utilizada para mayor claridad.
    const uploadVariantImageToCloud = async (fileOrUrl, variantIndex) => {
        setVariantImageUploading(prev => ({ ...prev, [variantIndex]: true })); // Activa el estado de carga de la variante
        const result = await uploadImageToCloud(fileOrUrl, true, variantIndex); // Llama a la función principal de subida
        setVariantImageUploading(prev => ({ ...prev, [variantIndex]: false })); // Desactiva el estado de carga
        return result;
    };

    // Obtiene productos del backend basados en los filtros y paginación actuales.
    const fetchProducts = useCallback(async () => {
        try {
            setLoading(true); // Activa el estado de carga
            setError('');
            setSuccessMessage('');

            const queryParams = new URLSearchParams(); // Construye los parámetros de la consulta
            if (searchTerm) queryParams.append('searchTerm', searchTerm);
            if (selectedCategory && selectedCategory !== 'Todas las Categorías') queryParams.append('category', selectedCategory);
            if (selectedBrand && selectedBrand !== 'Todas las Marcas') queryParams.append('brand', selectedBrand);
            if (selectedSupplier && selectedSupplier !== 'Todos los Proveedores') queryParams.append('supplier', selectedSupplier);
            if (selectedVariantColor && selectedVariantColor !== 'Todos los Colores') queryParams.append('variantColor', selectedVariantColor);
            if (selectedVariantSize && selectedVariantSize !== 'Todas las Tallas') queryParams.append('variantSize', selectedVariantSize);

            queryParams.append('page', currentPage);
            queryParams.append('limit', limit);

            // NUEVO: Añadir parámetros de ordenamiento
            if (sortBy) queryParams.append('sortBy', sortBy);
            if (sortOrder) queryParams.append('sortOrder', sortOrder);


            const response = await axiosInstance.get(`/products?${queryParams.toString()}`); // Realiza la petición GET

            setProducts(response.data.products); // Actualiza la lista de productos
            setTotalPages(response.data.pagination.totalPages); // Actualiza el total de páginas
        } catch (err) {
            const errorMessage = err.response?.data?.message || 'Error al cargar productos. Por favor, inténtalo de nuevo.';
            displayMessage(errorMessage, 'error'); // Muestra mensaje de error
            setProducts([]); // Vacía la lista de productos
            setTotalPages(1); // Restablece el total de páginas
        } finally {
            setLoading(false); // Desactiva el estado de carga
        }
        // NUEVO: Añadir sortBy y sortOrder a las dependencias del useCallback
        }, [searchTerm, selectedCategory, selectedBrand, selectedSupplier, selectedVariantColor, selectedVariantSize, currentPage, limit, sortBy, sortOrder]);

    // Obtiene todas las categorías, marcas, proveedores, colores y tallas disponibles para los filtros.
    const fetchFilterOptions = useCallback(async () => {
        try {
            // Obtener todos los productos para extraer opciones de filtro únicas (estableciendo un límite muy alto para asegurar todos los datos)
            const response = await axiosInstance.get('/products?limit=9999');
            const allProducts = response.data.products;

            // Recolectar categorías únicas y ordenarlas
            const categories = [...new Set(allProducts.map(p => p.category).filter(Boolean))].sort();
            setAvailableCategories(['Todas las Categorías', ...categories]);

            // Recolectar marcas únicas y ordenarlas
            const brands = [...new Set(allProducts.map(p => p.brand).filter(Boolean))].sort();
            setAvailableBrands(['Todas las Marcas', ...brands]);

            // Recolectar proveedores únicos y ordenarlos
            const suppliers = [...new Set(allProducts.map(p => p.supplier).filter(Boolean))].sort();
            setAvailableSuppliers(['Todos los Proveedores', ...suppliers]);

            const colors = new Set();
            const sizes = new Set();
            allProducts.forEach(p => {
                // Recolectar colores y tallas de las variantes primero
                if (p.variants && p.variants.length > 0) {
                    p.variants.forEach(v => {
                        if (v.color) colors.add(v.color);
                        if (v.size) sizes.add(v.size);
                    });
                } else {
                    // Si no hay variantes, recolectar de los atributos del producto principal
                    if (p.color) colors.add(p.color);
                    if (p.size) sizes.add(p.size);
                }
            });
            setAvailableVariantColors(['Todos los Colores', ...Array.from(colors).sort()]); // Convierte el Set a Array y ordena
            setAvailableVariantSizes(['Todas las Tallas', ...Array.from(sizes).sort()]); // Convierte el Set a Array y ordena

        } catch (err) {
            displayMessage('Error al cargar las opciones de filtro. Algunos filtros pueden no estar disponibles.', 'error');
        }
    }, []);

    // Efecto para obtener productos y opciones de filtro al montar el componente y cuando las dependencias cambian.
    useEffect(() => {
        fetchProducts();
        fetchFilterOptions();
        // Cargar alertas de stock al inicio del componente
        fetchLowStockAlerts();
        fetchHighStockAlerts();
    }, [fetchProducts, fetchFilterOptions]); // Añadir las nuevas funciones de fetch al array de dependencias para que se ejecuten

    // --- NUEVAS FUNCIONES PARA OBTENER ALERTAS DE STOCK DESDE EL BACKEND ---

    // Obtiene productos con stock bajo del backend.
    const fetchLowStockAlerts = useCallback(async () => {
        try {
            const response = await axiosInstance.get('/products/alerts/low-stock');
            setLowStockAlerts(response.data); // Actualiza el estado con los productos en alerta de stock bajo
        } catch (err) {
            console.error('Error al cargar alertas de stock bajo:', err.response?.data?.message || err.message);
            // Solo se muestra el error en la consola para estas alertas, no en la UI principal
        }
    }, []);

    // Obtiene productos con stock alto (perecederos) del backend.
    const fetchHighStockAlerts = useCallback(async () => {
        try {
            const response = await axiosInstance.get('/products/alerts/high-stock');
            setHighStockAlerts(response.data); // Actualiza el estado con los productos en alerta de stock alto
        } catch (err) {
            console.error('Error al cargar alertas de stock alto:', err.response?.data?.message || err.message);
            // Solo se muestra el error en la consola para estas alertas
        }
    }, []);

    // Obtiene el reporte de inventario por variante del backend
    const fetchVariantInventoryReport = useCallback(async () => {
        setLoading(true); // Activa el loader
        setError('');
        try {
            const response = await axiosInstance.get('/products/reports/variants');
            setVariantReport(response.data); // Actualiza el estado con los datos del reporte
            setShowVariantReport(true); // Muestra la sección del reporte
        } catch (err) {
            console.error('Error al cargar el reporte de variantes:', err.response?.data?.message || err.message);
            displayMessage('Error al cargar el reporte de variantes. Por favor, inténtalo de nuevo.', 'error');
            setVariantReport([]); // Limpia el reporte en caso de error
            setShowVariantReport(false); // Asegura que el reporte no se muestre si hay error
        } finally {
            setLoading(false); // Desactiva el loader
        }
    }, [displayMessage]); // displayMessage es una dependencia si la usas dentro de useCallback

    // Maneja la selección de un producto desde las sugerencias del catálogo global.
    const handleSelectGlobalProduct = (suggestedProduct) => {
        setNewProduct({
            ...newProduct,
            name: suggestedProduct.name,
            description: suggestedProduct.description || '',
            category: suggestedProduct.category || '',
            sku: suggestedProduct.sku || '',
            unitOfMeasure: suggestedProduct.unitOfMeasure || 'unidad',
            brand: suggestedProduct.brand || '',
            supplier: suggestedProduct.supplier || '',
            imageUrl: suggestedProduct.imageUrl || '', // Trae la URL de imagen principal de la sugerencia
            color: suggestedProduct.color || '',    // Aplica color de producto principal
            size: suggestedProduct.size || '',      // Aplica talla/tamaño de producto principal
            material: suggestedProduct.material || '', // Aplica material de producto principal
            // --- NUEVOS CAMPOS DE STOCK/PERECEDEROS PARA PRODUCTO PRINCIPAL (desde la sugerencia global) ---
            isPerishable: suggestedProduct.isPerishable || false,
            reorderThreshold: suggestedProduct.reorderThreshold || 0,
            optimalMaxStock: suggestedProduct.optimalMaxStock || 0,
            shelfLifeDays: suggestedProduct.shelfLifeDays || 0,
            // --- FIN NUEVOS CAMPOS ---
            variants: suggestedProduct.variants ? suggestedProduct.variants.map(v => ({ // Trae las variantes si el producto global las tiene
                ...v,
                // Regenera el SKU de variante si está vacío, de lo contrario mantiene el original
                autoGeneratedVariantSku: v.sku && v.sku.trim() !== '' ? '' : generateSkuFromName(v.name || ''),
                // --- NUEVOS CAMPOS DE STOCK/PERECEDEROS PARA VARIANTE (desde la sugerencia global) ---
                isPerishable: v.isPerishable || false,
                reorderThreshold: v.reorderThreshold || 0,
                optimalMaxStock: v.optimalMaxStock || 0,
                shelfLifeDays: v.shelfLifeDays || 0,
                // --- FIN NUEVOS CAMPOS ---
            })) : [],
        });
        setImageFile(null); // Limpia cualquier archivo seleccionado localmente después de la selección
        setImagePreviewUrl(suggestedProduct.imageUrl || ''); // Establece la previsualización a la URL de la sugerencia principal
        setGlobalProductSuggestions([]); // Oculta las sugerencias
        setShowGlobalSuggestions(false);
        setNoGlobalSuggestionsFound(false);
        setAutoGeneratedSku(''); // Limpia el SKU principal auto-generado
        setFormErrors({}); // Limpia cualquier error de formulario anterior en la selección
    };

    // Abre el modal para añadir un nuevo producto.
    const openAddModal = () => {
        setNewProduct({ // Reinicia el estado del nuevo producto a sus valores por defecto
            name: '', description: '', category: '', price: '', stock: '',
            costPrice: '', sku: '', unitOfMeasure: 'unidad', brand: '', supplier: '', imageUrl: '',
            color: '', size: '', material: '', variants: [],
            // --- NUEVOS CAMPOS DE STOCK/PERECEDEROS AL ABRIR MODAL DE AÑADIR ---
            isPerishable: false,
            reorderThreshold: 0,
            optimalMaxStock: 0,
            shelfLifeDays: 0,
            // --- FIN NUEVOS CAMPOS ---
        });
        setImageFile(null); // Reinicia el archivo de imagen
        setImagePreviewUrl(''); // Reinicia la previsualización de imagen
        setAutoGeneratedSku(''); // Reinicia el SKU auto-generado
        setFormErrors({}); // Limpia errores de formulario
        setError(''); // Limpia mensajes de error
        setSuccessMessage(''); // Limpia mensajes de éxito
        setShowAddModal(true); // Muestra el modal de añadir
        setShowAdvancedOptions(false); // Colapsa las opciones avanzadas por defecto
        setIsMainSkuManuallyEdited(false); // <-- NUEVO: Reinicia el indicador de edición manual del SKU
    };

    // Cierra cualquier modal abierto y reinicia los estados relacionados.
    const closeModal = () => {
        setShowAddModal(false); // Oculta el modal de añadir
        setShowEditModal(false); // Oculta el modal de edición
        setShowConfirmModal(false); // Oculta el modal de confirmación
        setProductToDelete(null); // Limpia el producto a eliminar
        setError(''); // Limpia mensajes de error
        setSuccessMessage(''); // Limpia mensajes de éxito
        setFormErrors({}); // Limpia errores de formulario
        setShowAdvancedOptions(false); // Colapsa las opciones avanzadas
        setImageFile(null); // Reinicia el archivo de imagen principal
        setImagePreviewUrl(''); // Reinicia la URL de previsualización de imagen principal
        setAutoGeneratedSku(''); // Reinicia el SKU autogenerado
        setGlobalProductSuggestions([]); // Limpia sugerencias globales
        setShowGlobalSuggestions(false);
        setNoGlobalSuggestionsFound(false);
        setIsMainSkuManuallyEdited(false); // <-- NUEVO: Reinicia el indicador de edición manual del SKU
    };

    // Añade una nueva variante al producto actual (nuevo o en edición).
    const addVariant = () => {
        const newVariant = {
            name: '', sku: '', price: '', costPrice: '', stock: '',
            unitOfMeasure: 'unidad', imageUrl: '', color: '', size: '', material: '',
            autoGeneratedVariantSku: '', // Inicializa el SKU auto-generado para la nueva variante
            // --- NUEVOS CAMPOS DE STOCK/PERECEDEROS PARA NUEVA VARIANTE ---
            isPerishable: false,
            reorderThreshold: 0,
            optimalMaxStock: 0,
            shelfLifeDays: 0,
            // --- FIN NUEVOS CAMPOS ---
        };
        if (showAddModal) {
            setNewProduct(prev => ({ ...prev, variants: [...prev.variants, newVariant] }));
        } else if (showEditModal) {
            setEditingProduct(prev => ({ ...prev, variants: [...prev.variants, newVariant] }));
        }
    };

    // Función para eliminar una variante por su índice.
    const removeVariant = (indexToRemove) => {
        // Limpia cualquier error de formulario específico relacionado con la variante eliminada
        setFormErrors(prevErrors => {
            const newErrors = { ...prevErrors };
            Object.keys(newErrors).forEach(key => {
                if (key.startsWith(`variant-${indexToRemove}-`)) {
                    delete newErrors[key]; // Elimina errores de la variante que se va a quitar
                }
            });
            // Ajusta los índices para los errores de variantes subsiguientes para mantener la corrección
            const adjustedErrors = {};
            for (const key in newErrors) {
                const parts = key.split('-');
                if (parts[0] === 'variant' && parseInt(parts[1]) > indexToRemove) {
                    const newIndex = parseInt(parts[1]) - 1; // Decrementa el índice del error
                    adjustedErrors[`variant-${newIndex}-${parts[2]}`] = newErrors[key];
                } else {
                    adjustedErrors[key] = newErrors[key];
                }
            }
            return adjustedErrors;
        });

        if (showAddModal) {
            setNewProduct(prev => ({
                ...prev,
                variants: prev.variants.filter((_, index) => index !== indexToRemove) // Filtra la variante
            }));
        } else if (showEditModal) {
            setEditingProduct(prev => ({
                ...prev,
                variants: prev.variants.filter((_, index) => index !== indexToRemove) // Filtra la variante
            }));
        }
    };

    // Función para validar todo el formulario de producto (producto principal y todas las variantes) antes del envío.
    const validateForm = (productState, isNewProduct = true) => {
        let errors = {};
        let isValid = true; // Indicador general de validez del formulario

        // Determina el SKU final para el producto principal basado en la entrada del usuario o auto-generación
        const finalMainSku = isNewProduct ?
            (productState.sku.trim() === '' ? autoGeneratedSku : productState.sku) :
            productState.sku;

        // Validaciones del producto principal
        if (productState.name.trim() === '') { errors.name = 'El nombre es obligatorio.'; isValid = false; }
        if (productState.category.trim() === '') { errors.category = 'La categoría es obligatoria.'; isValid = false; }

        if (productState.variants.length === 0) {
            // Solo valida campos del producto principal si no existen variantes
            if (finalMainSku.trim() === '') { errors.sku = 'El SKU es obligatorio si no hay variantes.'; isValid = false; }
            if (productState.price === '' || productState.price === null || productState.price === undefined) { errors.price = 'El precio de venta es obligatorio.'; isValid = false; }
            else if (isNaN(Number(productState.price)) || Number(productState.price) <= 0) { errors.price = 'El precio debe ser un número positivo.'; isValid = false; }

            if (productState.costPrice === '' || productState.costPrice === null || productState.costPrice === undefined) { errors.costPrice = 'El costo unitario es obligatorio.'; isValid = false; }
            else if (isNaN(Number(productState.costPrice)) || Number(productState.costPrice) < 0) { errors.costPrice = 'El costo debe ser un número no negativo.'; isValid = false; }

            if (productState.stock === '' || productState.stock === null || productState.stock === undefined) { errors.stock = 'El stock es obligatorio.'; isValid = false; }
            else if (isNaN(Number(productState.stock)) || Number(productState.stock) < 0) { errors.stock = 'El stock debe ser un número no negativo.'; isValid = false; }

            if (productState.unitOfMeasure.trim() === '') { errors.unitOfMeasure = 'La unidad de medida es obligatoria.'; isValid = false; }

            // Validaciones de nuevos campos para producto principal (sin variantes)
            if (isNaN(Number(productState.reorderThreshold)) || Number(productState.reorderThreshold) < 0) { errors.reorderThreshold = 'El umbral de reaprovisionamiento debe ser un número no negativo.'; isValid = false; }
            if (productState.isPerishable) { // Solo valida si el producto es perecedero
                if (isNaN(Number(productState.optimalMaxStock)) || Number(productState.optimalMaxStock) < 0) { errors.optimalMaxStock = 'El stock óptimo máximo debe ser un número no negativo.'; isValid = false; }
                if (isNaN(Number(productState.shelfLifeDays)) || Number(productState.shelfLifeDays) < 0) { errors.shelfLifeDays = 'Los días de vida útil deben ser un número no negativo.'; isValid = false; }
            }
        }

        // Validaciones de variantes
        productState.variants.forEach((variant, index) => {
            const variantPrefix = `variant-${index}-`; // Prefijo para errores de variante
            const finalVariantSku = variant.sku.trim() === '' ? variant.autoGeneratedVariantSku : variant.sku;

            if (variant.name.trim() === '') { errors[`${variantPrefix}name`] = 'El nombre de la variante es obligatorio.'; isValid = false; }
            if (finalVariantSku.trim() === '') { errors[`${variantPrefix}sku`] = 'El SKU de la variante es obligatorio o se debe generar automáticamente.'; isValid = false; }

            if (variant.price === '' || variant.price === null || variant.price === undefined) { errors[`${variantPrefix}price`] = 'El precio es obligatorio.'; isValid = false; }
            else if (isNaN(Number(variant.price)) || Number(variant.price) <= 0) { errors[`${variantPrefix}price`] = 'El precio debe ser positivo.'; isValid = false; }

            if (variant.costPrice === '' || variant.costPrice === null || variant.costPrice === undefined) { errors[`${variantPrefix}costPrice`] = 'El costo es obligatorio.'; isValid = false; }
            else if (isNaN(Number(variant.costPrice)) || Number(variant.costPrice) < 0) { errors[`${variantPrefix}costPrice`] = 'El costo debe ser no negativo.'; isValid = false; }

            if (variant.stock === '' || variant.stock === null || variant.stock === undefined) { errors[`${variantPrefix}stock`] = 'El stock es obligatorio.'; isValid = false; }
            else if (isNaN(Number(variant.stock)) || Number(variant.stock) < 0) { errors[`${variantPrefix}stock`] = 'El stock debe ser no negativo.'; isValid = false; }

            if (variant.unitOfMeasure.trim() === '') { errors[`${variantPrefix}unitOfMeasure`] = 'La unidad de medida es obligatoria.'; isValid = false; }

            // Validaciones de nuevos campos para variantes
            if (isNaN(Number(variant.reorderThreshold)) || Number(variant.reorderThreshold) < 0) { errors[`${variantPrefix}reorderThreshold`] = 'El umbral de reaprovisionamiento debe ser un número no negativo.'; isValid = false; }
            if (variant.isPerishable) { // Solo valida si la variante es perecedera
                if (isNaN(Number(variant.optimalMaxStock)) || Number(variant.optimalMaxStock) < 0) { errors[`${variantPrefix}optimalMaxStock`] = 'El stock óptimo máximo debe ser un número no negativo.'; isValid = false; }
                if (isNaN(Number(variant.shelfLifeDays)) || Number(variant.shelfLifeDays) < 0) { errors[`${variantPrefix}shelfLifeDays`] = 'Los días de vida útil deben ser un número no negativo.'; isValid = false; }
            }
        });

        setFormErrors(errors); // Actualiza el estado de errores del formulario
        return isValid; // Devuelve la validez general del formulario
    };

    // Maneja el envío del formulario para añadir un nuevo producto.
    const handleAddProduct = async (e) => {
        e.preventDefault(); // Previene el comportamiento por defecto del formulario
        setError(''); // Limpia mensajes de error previos
        setSuccessMessage(''); // Limpia mensajes de éxito previos

        // Valida el formulario completo antes de proceder con el envío
        const isValid = validateForm(newProduct, true);
        if (!isValid) {
            displayMessage('Por favor, corrige los errores en el formulario.', 'error');
            return; // Detiene la ejecución si hay errores de validación
        }

        setLoading(true); // Activa el estado de carga general

        let uploadedMainImageUrl = '';
        // Si hay un archivo de imagen principal seleccionado O una URL introducida en el formulario, intentar subirlo/procesarlo.
        if (imageFile || (newProduct.imageUrl && newProduct.imageUrl.trim() !== '')) {
            const uploadResult = await uploadImageToCloud(imageFile || newProduct.imageUrl);
            if (!uploadResult.success) {
                setLoading(false); // Desactiva la carga si la subida de imagen falla
                return; // Detiene el proceso si la subida de imagen falla
            }
            uploadedMainImageUrl = uploadResult.url;
        }

        // Determina el SKU final para el producto principal (entrada del usuario o auto-generado)
        // Asegura que SKU sea siempre un string (incluso si está vacío o undefined)
        const finalMainSku = newProduct.sku.trim() === '' ? (autoGeneratedSku || '') : newProduct.sku;

        // Construye el objeto de producto para enviar al backend.
        // Si existen variantes, los campos de precio, stock, etc. del producto principal se establecen a 0 o cadena vacía.
        // Esto es necesario para que Mongoose no marque estos campos como "required" si el producto tiene variantes
        // y estos valores se gestionan a nivel de variante.
        const productToSend = {
            ...newProduct,
            sku: finalMainSku, // SKU final del producto principal
            imageUrl: uploadedMainImageUrl, // URL de la imagen principal final
            // --- CORRECCIÓN CRÍTICA: Si existen variantes, los campos `required` del producto principal deben ser 0 o '' ---
            price: newProduct.variants.length > 0 ? 0 : (newProduct.price === '' ? 0 : Number(newProduct.price)),
            stock: newProduct.variants.length > 0 ? 0 : (newProduct.stock === '' ? 0 : Number(newProduct.stock)),
            costPrice: newProduct.variants.length > 0 ? 0 : (newProduct.costPrice === '' ? 0 : Number(newProduct.costPrice)),
            unitOfMeasure: newProduct.variants.length > 0 ? 'unidad' : (newProduct.unitOfMeasure || 'unidad'),
            color: newProduct.variants.length > 0 ? '' : (newProduct.color || ''),
            size: newProduct.variants.length > 0 ? '' : (newProduct.size || ''),
            material: newProduct.variants.length > 0 ? '' : (newProduct.material || ''),
            // --- FIN CORRECCIÓN ---
            // Nuevos campos de stock/perecederos para producto principal
            isPerishable: Boolean(newProduct.isPerishable), // Convierte a booleano
            reorderThreshold: Number(newProduct.reorderThreshold) || 0, // Asegura que sea número, por defecto 0
            optimalMaxStock: Number(newProduct.optimalMaxStock) || 0, // Asegura que sea número, por defecto 0
            shelfLifeDays: Number(newProduct.shelfLifeDays) || 0, // Asegura que sea número, por defecto 0
        };

        // Mapea las variantes para asegurar tipos de datos correctos y SKU final para cada variante.
        productToSend.variants = newProduct.variants.map(variant => ({
            name: variant.name,
            sku: (variant.sku.trim() === '' ? variant.autoGeneratedVariantSku : variant.sku) || '', // SKU final de la variante
            price: Number(variant.price),
            costPrice: Number(variant.costPrice),
            stock: Number(variant.stock),
            unitOfMeasure: variant.unitOfMeasure,
            imageUrl: variant.imageUrl || '',
            color: variant.color || '',
            size: variant.size || '',
            material: variant.material || '',
            // Nuevos campos para variantes
            isPerishable: Boolean(variant.isPerishable),
            reorderThreshold: Number(variant.reorderThreshold) || 0,
            optimalMaxStock: Number(variant.optimalMaxStock) || 0,
            shelfLifeDays: Number(variant.shelfLifeDays) || 0,
        }));

        try {
            const response = await axiosInstance.post('/products', productToSend); // Petición POST para añadir producto

            displayMessage('Producto añadido exitosamente.', 'success'); // Muestra mensaje de éxito
            setProducts(prev => [response.data, ...prev]); // Añade el nuevo producto al principio de la lista
            // Reinicia todos los estados del formulario para limpiar el modal para el siguiente uso
            setNewProduct({
                name: '', description: '', category: '', price: '', stock: '',
                costPrice: '', sku: '', unitOfMeasure: 'unidad', brand: '', supplier: '', imageUrl: '',
                color: '', size: '', material: '', variants: [],
                isPerishable: false, reorderThreshold: 0, optimalMaxStock: 0, shelfLifeDays: 0 // Reinicia nuevos campos
            });
            setImageFile(null); // Reinicia el archivo de imagen principal
            setImagePreviewUrl(''); // Reinicia la previsualización de imagen principal
            setAutoGeneratedSku('');
            setShowAddModal(false); // Oculta el modal
            setShowAdvancedOptions(false); // Colapsa las opciones avanzadas
            setFormErrors({}); // Limpia todos los errores de formulario
            fetchFilterOptions(); // Actualiza las opciones de filtro en caso de que se hayan añadido nuevas categorías/marcas
            fetchLowStockAlerts(); // Vuelve a obtener alertas de stock bajo
            fetchHighStockAlerts(); // Vuelve a obtener alertas de stock alto
        } catch (err) {
            const errorMessage = err.response?.data?.message || 'Error al añadir producto. Por favor, inténtalo de nuevo.';
            displayMessage(errorMessage, 'error'); // Muestra mensaje de error
        } finally {
            setLoading(false); // Desactiva el estado de carga general
        }
    };

    // Maneja el clic en "Editar" para cargar los datos del producto en el modal de edición.
    const handleEditClick = (product) => {
        setEditingProduct({
            ...product,
            // Asegura que los campos numéricos se formateen a 2 decimales o cadena vacía si no están definidos
            price: product.price !== undefined && product.price !== null ? parseFloat(product.price).toFixed(2) : '',
            costPrice: product.costPrice !== undefined && product.costPrice !== null ? parseFloat(product.costPrice).toFixed(2) : '',
            unitOfMeasure: product.unitOfMeasure || 'unidad', // Usa valor por defecto si es nulo
            brand: product.brand || '',
            supplier: product.supplier || '',
            description: product.description || '',
            imageUrl: product.imageUrl || '',
            color: product.color || '',
            size: product.size || '',
            material: product.material || '',
            // --- NUEVOS CAMPOS DE STOCK/PERECEDEROS PARA PRODUCTO PRINCIPAL (al cargar para edición) ---
            isPerishable: product.isPerishable || false,
            reorderThreshold: product.reorderThreshold || 0,
            optimalMaxStock: product.optimalMaxStock || 0,
            shelfLifeDays: product.shelfLifeDays || 0,
            // --- FIN NUEVOS CAMPOS ---
            variants: product.variants ? product.variants.map(v => ({
                ...v,
                price: parseFloat(v.price).toFixed(2),
                costPrice: parseFloat(v.costPrice).toFixed(2),
                stock: Number(v.stock), // Ensure stock is a number for editing
                unitOfMeasure: v.unitOfMeasure || 'unidad',
                color: v.color || '',
                size: v.size || '',
                material: v.material || '',
                imageUrl: v.imageUrl || '',
                // Si el SKU de la variante existe, no auto-generar. Si no, auto-generar.
                autoGeneratedVariantSku: v.sku && v.sku.trim() !== '' ? '' : generateSkuFromName(v.name || ''),
                // --- NUEVOS CAMPOS DE STOCK/PERECEDEROS PARA VARIANTE (al cargar para edición) ---
                isPerishable: v.isPerishable || false,
                reorderThreshold: v.reorderThreshold || 0,
                optimalMaxStock: v.optimalMaxStock || 0,
                shelfLifeDays: v.shelfLifeDays || 0,
                // --- FIN NUEVOS CAMPOS ---
            })) : [], // Mapea las variantes existentes, aplicando formato y valores por defecto
        });
        setImageFile(null); // Limpia cualquier selección de archivo local pendiente para la imagen principal
        setImagePreviewUrl(product.imageUrl || ''); // Establece la previsualización de la imagen a la URL existente del producto
        setShowEditModal(true); // Muestra el modal de edición
        setShowAddModal(false); // Asegura que el modal de añadir esté oculto
        setError(''); // Limpia cualquier mensaje de error anterior
        setSuccessMessage(''); // Limpia cualquier mensaje de éxito anterior
        setFormErrors({}); // Limpia todos los errores de formulario al abrir el formulario de edición
    };

    // Maneja el envío del formulario para actualizar un producto existente.
    const handleUpdateProduct = async (e) => {
        e.preventDefault(); // Previene el comportamiento por defecto del formulario
        if (!editingProduct || !editingProduct._id) return; // Asegura que un producto esté seleccionado para edición

        setError(''); // Limpia mensajes de error previos
        setSuccessMessage(''); // Limpia mensajes de éxito previos

        // Valida el formulario completo antes de proceder con el envío
        const isValid = validateForm(editingProduct, false); // Pasa `false` para indicar que no es un producto nuevo
        if (!isValid) {
            displayMessage('Por favor, corrige los errores en el formulario.', 'error');
            return; // Detiene la ejecución si hay errores de validación
        }

        setLoading(true); // Activa el estado de carga general

        let uploadedMainImageUrl = editingProduct.imageUrl; // Comienza con la URL de imagen actual del estado editingProduct

        // Lógica para manejar las actualizaciones de la imagen principal del producto:
        if (imageFile) {
            // Caso 1: Se seleccionó un nuevo archivo local. Subirlo a Cloudinary.
            const uploadResult = await uploadImageToCloud(imageFile);
            if (!uploadResult.success) {
                setLoading(false);
                return; // Detiene el proceso si la subida falla
            }
            uploadedMainImageUrl = uploadResult.url;
        } else if (editingProduct.imageUrl === '') {
            // Caso 2: El campo de texto imageUrl fue limpiado explícitamente por el usuario, y no se seleccionó un nuevo archivo.
            // Establecer a cadena vacía para que el backend la elimine o la guarde como vacía.
            uploadedMainImageUrl = '';
        } else if (uploadedMainImageUrl && !uploadedMainImageUrl.includes('res.cloudinary.com')) {
            // Caso 3: Se pegó una nueva URL en el campo imageUrl, y aún no es una URL de Cloudinary. Subirla.
            const uploadResult = await uploadImageToCloud(uploadedMainImageUrl);
            if (!uploadResult.success) {
                setLoading(false);
                return;
            }
            uploadedMainImageUrl = uploadResult.url;
        }
        // Si no se cumple ninguna de las anteriores, significa que no hay cambios en la imagen o la URL existente ya es de Cloudinary.
        // En este caso, `uploadedMainImageUrl` ya contiene el valor correcto de `editingProduct.imageUrl`.


        // Construye el objeto de producto para enviar al backend para la actualización.
        const productToSend = {
            ...editingProduct,
            imageUrl: uploadedMainImageUrl, // URL de la imagen principal final
            // --- CORRECCIÓN CRÍTICA: Si existen variantes, los campos `required` del producto principal deben ser 0 o '' ---
            price: editingProduct.variants.length > 0 ? 0 : (editingProduct.price === '' ? 0 : Number(editingProduct.price)),
            stock: editingProduct.variants.length > 0 ? 0 : (editingProduct.stock === '' ? 0 : Number(editingProduct.stock)),
            costPrice: editingProduct.variants.length > 0 ? 0 : (editingProduct.costPrice === '' ? 0 : Number(editingProduct.costPrice)),
            unitOfMeasure: editingProduct.variants.length > 0 ? 'unidad' : (editingProduct.unitOfMeasure || 'unidad'),
            color: editingProduct.variants.length > 0 ? '' : (editingProduct.color || ''),
            size: editingProduct.variants.length > 0 ? '' : (editingProduct.size || ''),
            material: editingProduct.variants.length > 0 ? '' : (editingProduct.material || ''),
            // --- FIN CORRECCIÓN ---
            // Nuevos campos de stock/perecederos para producto principal
            isPerishable: Boolean(editingProduct.isPerishable),
            reorderThreshold: Number(editingProduct.reorderThreshold) || 0,
            optimalMaxStock: Number(editingProduct.optimalMaxStock) || 0,
            shelfLifeDays: Number(editingProduct.shelfLifeDays) || 0,
        };
        // Asegura que las variantes se mapeen con sus SKUs finalizados y sus `_id` existentes si no son nuevas.
        productToSend.variants = editingProduct.variants.map(variant => ({
            name: variant.name,
            sku: (variant.sku.trim() === '' ? variant.autoGeneratedVariantSku : variant.sku) || '', // SKU final de la variante
            price: Number(variant.price),
            costPrice: Number(variant.costPrice),
            stock: Number(variant.stock),
            unitOfMeasure: variant.unitOfMeasure,
            imageUrl: variant.imageUrl || '',
            color: variant.color || '',
            size: variant.size || '',
            material: variant.material || '',
            // Nuevos campos para variantes
            isPerishable: Boolean(variant.isPerishable),
            reorderThreshold: Number(variant.reorderThreshold) || 0,
            optimalMaxStock: Number(variant.optimalMaxStock) || 0,
            shelfLifeDays: Number(variant.shelfLifeDays) || 0,
            ...(variant._id && { _id: variant._id }) // Solo incluye `_id` si existe (para variantes existentes)
        }));

        try {
            const response = await axiosInstance.put(`/products/${editingProduct._id}`, productToSend); // Petición PUT para actualizar producto

            displayMessage('Producto actualizado exitosamente.', 'success'); // Muestra mensaje de éxito
            // Actualiza la lista de productos reemplazando el producto antiguo con el actualizado
            setProducts(prev => prev.map(p => (p._id === editingProduct._id ? response.data : p)));
            setEditingProduct(null); // Limpia el estado del producto en edición
            setImageFile(null); // Reinicia el archivo de imagen principal
            setImagePreviewUrl(''); // Reinicia la previsualización de imagen principal
            setShowEditModal(false); // Oculta el modal de edición
            setShowAdvancedOptions(false); // Colapsa las opciones avanzadas
            setFormErrors({}); // Limpia todos los errores de formulario
            fetchFilterOptions(); // Actualiza las opciones de filtro en caso de que los atributos del producto hayan cambiado
            fetchLowStockAlerts(); // Vuelve a obtener alertas de stock bajo
            fetchHighStockAlerts(); // Vuelve a obtener alertas de stock alto
        } catch (err) {
            const errorMessage = err.response?.data?.message || 'Error al actualizar producto. Por favor, inténtalo de nuevo.';
            displayMessage(errorMessage, 'error'); // Muestra mensaje de error
        } finally {
            setLoading(false); // Desactiva el estado de carga general
        }
    };

    // Displays a confirmation modal before deleting a product.
    const confirmDeleteProduct = (productId) => {
        setProductToDelete(productId);
        setShowConfirmModal(true);
        setError('');
        setSuccessMessage('');
    };

    // Handles the actual deletion of a product after user confirmation.
    const handleDeleteProduct = async (e) => {
        e.stopPropagation(); // Prevent event propagation if this function is called from a nested click event
        if (!productToDelete) {
            displayMessage('No se pudo identificar el producto a eliminar.', 'error');
            setLoading(false); // Ensure loading state is reset even on early exit
            return;
        }

        try {
            setLoading(true);
            setError('');
            setSuccessMessage('');
            await axiosInstance.delete(`/products/${productToDelete}`);

            displayMessage('Producto eliminado exitosamente.', 'success');
            setProducts(prev => {
                const updatedProducts = prev.filter(p => p._id !== productToDelete);
                return updatedProducts;
            });

            // Adjust current page if the last product on a page was deleted, otherwise refresh current page.
            if (products.length === 1 && currentPage > 1) {
                setCurrentPage(prev => prev - 1);
            } else {
                fetchProducts(); // Re-fetch products to update the list and pagination
            }

            setShowConfirmModal(false); // Hide the confirmation modal
            setProductToDelete(null); // Clear the ID of the product to be deleted
            fetchFilterOptions(); // Refresh filter options
            fetchLowStockAlerts(); // Refresh low stock alerts
            fetchHighStockAlerts(); // Refresh high stock alerts

        } catch (err) {
            const errorMessage = err.response?.data?.message || 'Error al eliminar producto. Por favor, inténtalo de nuevo.';
            displayMessage(errorMessage, 'error');
        } finally {
            setLoading(false);
        }
    };

    // Function to navigate to the previous page in pagination.
    const goToPrevPage = () => {
        setCurrentPage(prev => Math.max(1, prev - 1));
    };

    // Function to navigate to the next page in pagination.
    const goToNextPage = () => {
        setCurrentPage(prev => Math.min(totalPages, prev + 1));
    };

    // JSX para renderizar el componente de la página de inventario
    return (
        <div className="p-6 bg-dark-slate-gray rounded-lg shadow-xl min-h-screen font-inter"> {/* Aplicado font-inter */}
            <h2 className="text-4xl font-extrabold text-copper-rose-accent mb-8 border-b-2 border-action-blue pb-4">Gestión de Inventario</h2>

            {/* Visualización de Mensaje de Éxito */}
            {successMessage && (
                <div className="bg-green-700 bg-opacity-30 border border-green-500 text-green-300 px-4 py-3 rounded relative mb-6 animate-fade-in-down" role="alert">
                    <strong className="font-bold">¡Éxito!</strong>
                    <span className="block sm:inline ml-2">{successMessage}</span>
                </div>
            )}

            {/* Visualización de Mensaje de Error */}
            {error && (
                <div className="bg-red-700 bg-opacity-30 border border-red-500 text-red-300 px-4 py-3 rounded relative mb-6 animate-fade-in-down" role="alert">
                    <strong className="font-bold">¡Error!</strong>
                    <span className="block sm:inline ml-2">{error}</span>
                </div>
            )}

            {/* Modal de Confirmación para Eliminación */}
            <div
                className={`fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50 transition-opacity duration-300 ${showConfirmModal ? 'opacity-100 visible' : 'opacity-0 invisible'}`}
                onClick={(e) => {
                    e.stopPropagation(); // Previene el cierre al hacer clic en el fondo
                    setShowConfirmModal(false);
                    setProductToDelete(null);
                    setError('');
                    setSuccessMessage('');
                }}
            >
                <div
                    className={`bg-deep-night-blue p-8 rounded-lg shadow-2xl text-neutral-light max-w-sm w-full text-center border border-neutral-gray-700 transform transition-transform duration-300 ${showConfirmModal ? 'scale-100' : 'scale-95'}`}
                    onClick={(e) => e.stopPropagation()} // Previene el cierre del modal al hacer clic dentro
                >
                    <h3 className="text-xl font-bold mb-4 text-copper-rose-accent">Confirmar Eliminación</h3>
                    <p className="mb-6 text-neutral-gray-300">¿Estás seguro de que quieres eliminar este producto? Esta acción no se puede deshacer.</p>
                    <div className="flex justify-center space-x-4">
                        <button
                            onClick={(e) => {
                                e.stopPropagation();
                                setShowConfirmModal(false);
                                setProductToDelete(null);
                                setError('');
                                setSuccessMessage('');
                            }}
                            type="button"
                            className="bg-neutral-gray-500 hover:bg-neutral-gray-600 text-neutral-light font-bold py-2 px-5 rounded-lg transition duration-200 shadow-md"
                        >
                            Cancelar
                        </button>
                        <button
                            onClick={(e) => handleDeleteProduct(e)}
                            type="button"
                            className="bg-red-600 hover:bg-red-700 text-neutral-light font-bold py-2 px-5 rounded-lg transition duration-200 shadow-md"
                        >
                            Eliminar
                        </button>
                    </div>
                </div>
            </div>

            {/* --- Sección de Búsqueda, Filtros y Añadir Producto --- */}
            <div className="bg-deep-night-blue p-6 rounded-lg shadow-inner mb-8 border border-neutral-gray-700 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 items-center">
                {/* Campo de Búsqueda Consolidado */}
                <div className="relative col-span-full mb-4 md:mb-0">
                    <input
                        type="text"
                        placeholder="Buscar por nombre, SKU, Marca, Proveedor..."
                        value={searchTerm}
                        onChange={(e) => {
                            setSearchTerm(e.target.value);
                            setCurrentPage(1); // Reinicia a la primera página con cada nueva búsqueda
                        }}
                        className="shadow appearance-none border border-neutral-gray-700 rounded-full w-full py-2 px-4 pl-10 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light"
                    />
                    <Search size={18} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-neutral-gray-400" />
                    {searchTerm && (
                        <XCircle
                            size={20}
                            className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 cursor-pointer hover:text-gray-300"
                            onClick={() => {
                                // Limpia el término de búsqueda y todos los filtros, luego vuelve a cargar los productos
                                setSearchTerm('');
                                setCurrentPage(1);
                                setSelectedCategory('Todas las Categorías');
                                setSelectedBrand('Todas las Marcas');
                                setSelectedSupplier('Todos los Proveedores');
                                setSelectedVariantColor('Todos los Colores');
                                setSelectedVariantSize('Todas las Tallas');
                                // Una llamada directa a fetchProducts no es necesaria aquí ya que los cambios de estado activarán useEffect.
                            }}
                        />
                    )}
                </div>

                {/* Desplegables de Filtro - Diseño Responsivo */}
                <select
                    id="categoryFilter"
                    value={selectedCategory}
                    onChange={(e) => {
                        setSelectedCategory(e.target.value);
                        setCurrentPage(1); // Reinicia a la primera página al cambiar el filtro
                        // fetchProducts() se activará por useEffect debido al cambio de dependencia
                    }}
                    className="shadow appearance-none border border-neutral-gray-700 rounded-full w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal cursor-pointer text-neutral-light"
                >
                    {availableCategories.map(cat => (
                        <option key={cat} value={cat}>{cat}</option>
                    ))}
                </select>

                <select
                    id="brandFilter"
                    value={selectedBrand}
                    onChange={(e) => {
                        setSelectedBrand(e.target.value);
                        setCurrentPage(1);
                        // fetchProducts() se activará por useEffect debido al cambio de dependencia
                    }}
                    className="shadow appearance-none border border-neutral-gray-700 rounded-full w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal cursor-pointer text-neutral-light"
                >
                    {availableBrands.map(brand => (
                        <option key={brand} value={brand}>{brand}</option>
                    ))}
                </select>

                <select
                    id="supplierFilter"
                    value={selectedSupplier}
                    onChange={(e) => {
                        setSelectedSupplier(e.target.value);
                        setCurrentPage(1);
                        // fetchProducts() se activará por useEffect debido al cambio de dependencia
                    }}
                    className="shadow appearance-none border border-neutral-gray-700 rounded-full w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal cursor-pointer text-neutral-light"
                >
                    {availableSuppliers.map(supplier => (
                        <option key={supplier} value={supplier}>{supplier}</option>
                    ))}
                </select>

                <select
                    id="variantColorFilter"
                    value={selectedVariantColor}
                    onChange={(e) => {
                        setSelectedVariantColor(e.target.value);
                        setCurrentPage(1);
                        // fetchProducts() se activará por useEffect debido al cambio de dependencia
                    }}
                    className="shadow appearance-none border border-neutral-gray-700 rounded-full w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal cursor-pointer text-neutral-light"
                >
                    {availableVariantColors.map(color => (
                        <option key={color} value={color}>{color}</option>
                    ))}
                </select>

                <select
                    id="variantSizeFilter"
                    value={selectedVariantSize}
                    onChange={(e) => {
                        setSelectedVariantSize(e.target.value);
                        setCurrentPage(1);
                        // fetchProducts() se activará por useEffect debido al cambio de dependencia
                    }}
                    className="shadow appearance-none border border-neutral-gray-700 rounded-full w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal cursor-pointer text-neutral-light"
                >
                    {availableVariantSizes.map(size => (
                        <option key={size} value={size}>{size}</option>
                    ))}
                </select>

                {/* NUEVO: Selector para Ordenar Por */}
                <select
                    id="sortBy"
                    value={sortBy}
                    onChange={(e) => {
                        setSortBy(e.target.value);
                        setCurrentPage(1); // Reinicia a la primera página al cambiar el orden
                    }}
                    className="shadow appearance-none border border-neutral-gray-700 rounded-full w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal cursor-pointer text-neutral-light"
                >
                    <option value="createdAt">Ordenar por Fecha</option>
                    <option value="name">Ordenar por Nombre</option>
                    <option value="price">Ordenar por Precio</option>
                    <option value="stock">Ordenar por Stock</option>
                    <option value="category">Ordenar por Categoría</option>
                    <option value="brand">Ordenar por Marca</option>
                </select>

                {/* NUEVO: Selector para Ordenar Dirección */}
                <select
                    id="sortOrder"
                    value={sortOrder}
                    onChange={(e) => {
                        setSortOrder(e.target.value);
                        setCurrentPage(1); // Reinicia a la primera página al cambiar la dirección
                    }}
                    className="shadow appearance-none border border-neutral-gray-700 rounded-full w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal cursor-pointer text-neutral-light"
                >
                    <option value="asc">Ascendente</option>
                    <option value="desc">Descendente</option>
                </select>

                {/* Botón para Añadir Nuevo Producto */}
                <button
                    onClick={() => {
                        // Reinicia todos los estados relevantes para añadir un nuevo producto antes de abrir el modal
                        setShowAddModal(true);
                        setShowEditModal(false); // Asegura que el modal de edición esté cerrado
                        setEditingProduct(null); // Limpia cualquier producto que se esté editando
                        setError(''); // Limpia mensajes de error generales
                        setSuccessMessage(''); // Limpia mensajes de éxito generales
                        setGlobalProductSuggestions([]); // Limpia sugerencias globales
                        setNoGlobalSuggestionsFound(false); // Reinicia el mensaje de "no se encontraron sugerencias"
                        setAutoGeneratedSku(''); // Limpia el SKU auto-generado
                        setImageFile(null); // Limpia el archivo de imagen principal seleccionado
                        setImagePreviewUrl(''); // Limpia la URL de previsualización de imagen principal
                        setShowAdvancedOptions(false); // Colapsa las opciones avanzadas por defecto
                        setNewProduct({ // Reinicia los campos del formulario de nuevo producto a su estado inicial
                            name: '', description: '', category: '', price: '', stock: '',
                            costPrice: '', sku: '', unitOfMeasure: 'unidad', brand: '', supplier: '', imageUrl: '',
                            color: '', size: '', material: '', variants: [],
                            isPerishable: false, reorderThreshold: 0, optimalMaxStock: 0, shelfLifeDays: 0 // Reinicia nuevos campos
                        });
                        setFormErrors({}); // Limpia todos los errores de validación específicos del formulario
                    }}
                    type="button"
                    className="col-span-full md:col-span-1 lg:col-span-2 xl:col-span-1 bg-action-blue hover:bg-blue-700 text-neutral-light font-bold py-3 px-6 rounded-lg text-lg shadow-md transition duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-500 focus:ring-opacity-50 flex items-center justify-center w-full mt-4 md:mt-0"
                >
                    <PlusSquare size={24} className="mr-2" /> Añadir Nuevo Producto
                </button>
            </div>

            {/* Controles para Reportes y Acciones Masivas */}
            <div className="bg-deep-night-blue p-6 rounded-lg shadow-inner mb-8 border border-neutral-gray-700 flex flex-wrap gap-4 justify-between items-center">
                {/* Botón para Reporte de Variantes */}
                <button
                    onClick={() => {
                        if (!showVariantReport) { // Si el reporte no está visible, lo cargamos
                            fetchVariantInventoryReport();
                        } else { // Si ya está visible, lo ocultamos
                            setShowVariantReport(false);
                            setVariantReport([]); // Opcional: limpia el reporte al ocultar
                        }
                    }}
                    className="bg-action-blue hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition duration-200 flex items-center justify-center text-sm shadow-md"
                >
                    {showVariantReport ? 'Ocultar Reporte de Variantes' : 'Mostrar Reporte de Variantes'}
                </button>

                {/* Botón de Exportar Reporte a CSV (solo si el reporte está visible y tiene datos) */}
                {showVariantReport && variantReport.length > 0 && (
                    <button
                        onClick={() => exportVariantReportToCSV(variantReport)} // Implementaremos esta función después
                        className="bg-success-green hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition duration-200 flex items-center justify-center text-sm shadow-md"
                    >
                        Exportar Reporte a CSV
                        <Upload size={16} className="ml-2" />
                    </button>
                )}

                {/* ... (Aquí irían otros botones de acciones masivas si los tienes o los añades después) ... */}
            </div>

            {/* --- SECCIÓN DE ALERTAS DE STOCK --- */}
            {(lowStockAlerts.length > 0 || highStockAlerts.length > 0) && (
                <div className="mb-6 p-4 border border-yellow-600 rounded-md bg-yellow-900 bg-opacity-20 shadow-inner">
                    <h3 className="text-xl font-bold text-yellow-300 mb-3 flex items-center">
                        <Info size={20} className="mr-2" /> Alertas de Inventario
                    </h3>

                    {/* Alertas de Stock Bajo */}
                    {lowStockAlerts.length > 0 && (
                        <div className="mb-4">
                            <h4 className="text-lg font-semibold text-neutral-light flex items-center mb-2">
                                <ChevronDown size={16} className="mr-1" /> Stock Bajo:
                            </h4>
                            <ul className="list-disc pl-5 text-neutral-light">
                                {lowStockAlerts.map(alert => (
                                    <li key={alert._id} className="mb-1">
                                        <span className="font-bold">{alert.name}</span>
                                        {alert.isMainProduct ? (
                                            ` (SKU: ${alert.sku}) - Stock: ${alert.stock} (Umbral: ${alert.reorderThreshold})`
                                        ) : (
                                            <>
                                                : {alert.variantsInAlert.map((v, idx) => (
                                                    <span key={v._id || idx} className="block ml-4">
                                                        - {v.name} (SKU: {v.sku}) - Stock: {v.stock} (Umbral: {v.reorderThreshold})
                                                    </span>
                                                ))}
                                            </>
                                        )}
                                    </li>
                                ))}
                            </ul>
                        </div>
                    )}

                    {/* Alertas de Stock Alto / Riesgo de Pérdida (Perecederos) */}
                    {highStockAlerts.length > 0 && (
                        <div>
                            <h4 className="text-lg font-semibold text-neutral-light flex items-center mb-2">
                                <ChevronUp size={16} className="mr-1" /> Stock Alto / Riesgo de Pérdida (Perecederos):
                            </h4>
                            <ul className="list-disc pl-5 text-neutral-light">
                                {highStockAlerts.map(alert => (
                                    <li key={alert._id} className="mb-1">
                                        <span className="font-bold">{alert.name}</span>
                                        {alert.isMainProduct ? (
                                            ` (SKU: ${alert.sku}) - Stock: ${alert.stock} (Óptimo Máx: ${alert.optimalMaxStock}, Vida Útil: ${alert.shelfLifeDays} días)`
                                        ) : (
                                            <>
                                                : {alert.variantsInAlert.map((v, idx) => (
                                                    <span key={v._id || idx} className="block ml-4">
                                                        - {v.name} (SKU: {v.sku}) - Stock: {v.stock} (Óptimo Máx: {v.optimalMaxStock}, Vida Útil: {v.shelfLifeDays} días)
                                                    </span>
                                                ))}
                                            </>
                                        )}
                                    </li>
                                ))}
                            </ul>
                        </div>
                    )}
                </div>
            )}
            {/* --- FIN SECCIÓN DE ALERTAS DE STOCK --- */}


            {/* --- Modal para Añadir Producto --- */}
            <ProductModal
                isOpen={showAddModal}
                onClose={() => {
                    // Reinicia todos los estados relevantes al cerrar el modal de añadir producto
                    setShowAddModal(false);
                    setError('');
                    setSuccessMessage('');
                    setGlobalProductSuggestions([]);
                    setNoGlobalSuggestionsFound(false);
                    setAutoGeneratedSku('');
                    setImageFile(null);
                    setImagePreviewUrl('');
                    setShowAdvancedOptions(false);
                    setNewProduct({
                        name: '', description: '', category: '', price: '', stock: '',
                        costPrice: '', sku: '', unitOfMeasure: 'unidad', brand: '', supplier: '', imageUrl: '',
                        color: '', size: '', material: '', variants: [],
                        isPerishable: false, reorderThreshold: 0, optimalMaxStock: 0, shelfLifeDays: 0 // Reinicia nuevos campos
                    });
                    setFormErrors({});
                }}
                title="Añadir Nuevo Producto"
            >
                {/* Formulario para Añadir Producto */}
                <form onSubmit={handleAddProduct} className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="relative">
                        <label htmlFor="name" className="block text-neutral-light text-sm font-bold mb-2">
                            Nombre del Producto:
                            <span className="relative inline-block ml-2 group">
                                <Info size={16} className="text-action-blue cursor-pointer" />
                                <span className="absolute left-1/2 bottom-full transform -translate-x-1/2 mb-2 w-48 p-2 bg-neutral-gray-800 text-xs text-white rounded-md opacity-0 group-hover:opacity-100 transition-opacity duration-300 z-10 whitespace-normal text-center shadow-lg">
                                    Empieza a escribir para buscar sugerencias del catálogo global.
                                </span>
                            </span>
                        </label>
                        <input
                            type="text"
                            id="name"
                            name="name"
                            value={newProduct.name}
                            onChange={handleInputChange}
                            className={`shadow appearance-none border ${formErrors.name ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                            placeholder="Ej. Camiseta Deportiva"
                            required // El nombre del producto siempre es requerido
                            onBlur={() => setTimeout(() => setShowGlobalSuggestions(false), 100)} // Oculta sugerencias rápidamente al perder el foco
                            onFocus={() => { // Muestra sugerencias al enfocar si hay alguna y el nombre es lo suficientemente largo
                                if (newProduct.name.trim().length >= 2 && globalProductSuggestions.length > 0) {
                                    setShowGlobalSuggestions(true);
                                }
                            }}
                        />
                        {formErrors.name && <p className="text-red-400 text-xs mt-1">{formErrors.name}</p>}
                        {/* Lista de Sugerencias de Productos Globales */}
                        {showGlobalSuggestions && globalProductSuggestions.length > 0 && (
                            <ul className="absolute z-20 w-full bg-neutral-gray-800 border border-neutral-gray-700 rounded-lg shadow-xl mt-1 max-h-60 overflow-y-auto">
                                {globalProductSuggestions.map((suggestion) => (
                                    <li
                                        key={suggestion.sku || suggestion.name} // Clave única para cada sugerencia
                                        className="px-4 py-2 cursor-pointer hover:bg-action-blue-light hover:text-white text-neutral-light border-b border-neutral-gray-700 last:border-b-0"
                                        onClick={() => handleSelectGlobalProduct(suggestion)}
                                    >
                                        <p className="font-semibold">{suggestion.name}</p>
                                        <p className="text-xs text-neutral-gray-400">SKU: {suggestion.sku || 'N/A'} - Cat: {suggestion.category || 'N/A'}</p>
                                        {suggestion.imageUrl && (
                                            <img src={suggestion.imageUrl} alt="Imagen de sugerencia" className="w-16 h-16 object-cover rounded-md mt-1" />
                                        )}
                                    </li>
                                ))}
                            </ul>
                        )}
                        {/* Mensaje cuando no se encuentran sugerencias globales */}
                        {noGlobalSuggestionsFound && !showGlobalSuggestions && (
                            <p className="text-orange-400 text-sm mt-2 animate-fade-in-down">
                                No hay coincidencias. <span className="text-success-green">¡Estás registrando un nuevo producto!</span>
                            </p>
                        )}
                    </div>
                    <div>
                        <label htmlFor="sku" className="block text-neutral-light text-sm font-bold mb-2">
                            SKU:
                            <span className="relative inline-block ml-2 group">
                                <Info size={16} className="text-action-blue cursor-pointer" />
                                <span className="absolute left-1/2 bottom-full transform -translate-x-1/2 mb-2 w-64 p-2 bg-neutral-gray-800 text-xs text-white rounded-md opacity-0 group-hover:opacity-100 transition-opacity duration-300 z-10 whitespace-normal text-center shadow-lg">
                                    Código único para el producto (ej. para códigos de barras). Si lo dejas vacío, se generará uno automáticamente. Si usas variantes, este SKU será el del producto padre.
                                </span>
                            </span>
                        </label>
                        <input
                            type="text"
                            id="sku"
                            name="sku"
                            value={newProduct.sku}
                            onChange={handleInputChange}
                            placeholder={autoGeneratedSku || 'Ej. CAMI-DEP-AZUL-M'}
                            className={`shadow appearance-none border ${formErrors.sku ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                            disabled={newProduct.variants.length > 0} // El SKU está deshabilitado si existen variantes, ya que las variantes tienen sus propios SKUs
                        />
                        {formErrors.sku && <p className="text-red-400 text-xs mt-1">{formErrors.sku}</p>}
                    </div>
                    <div>
                        <label htmlFor="category" className="block text-neutral-light text-sm font-bold mb-2">Categoría:</label>
                        <input
                            type="text"
                            id="category"
                            name="category"
                            value={newProduct.category}
                            onChange={handleInputChange}
                            className={`shadow appearance-none border ${formErrors.category ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                            placeholder="Ej. Ropa, Electrónica, Alimentos"
                            required
                        />
                        {formErrors.category && <p className="text-red-400 text-xs mt-1">{formErrors.category}</p>}
                    </div>
                    <div>
                        <label htmlFor="unitOfMeasure" className="block text-neutral-light text-sm font-bold mb-2">Unidad de Medida (Producto Principal):</label>
                        <select
                            id="unitOfMeasure"
                            name="unitOfMeasure"
                            value={newProduct.unitOfMeasure}
                            onChange={handleInputChange}
                            className={`shadow appearance-none border ${formErrors.unitOfMeasure ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal cursor-pointer text-neutral-light`}
                            required={newProduct.variants.length === 0} // Requerido solo si no hay variantes
                            disabled={newProduct.variants.length > 0} // Deshabilitado si existen variantes
                        >
                            {unitOfMeasureOptions.map(unit => (
                                <option key={unit} value={unit}>{unit}</option>
                            ))}
                        </select>
                        {formErrors.unitOfMeasure && <p className="text-red-400 text-xs mt-1">{formErrors.unitOfMeasure}</p>}
                    </div>
                    <div>
                        <label htmlFor="brand" className="block text-neutral-light text-sm font-bold mb-2">Marca (Opcional):</label>
                        <input
                            type="text"
                            id="brand"
                            name="brand"
                            value={newProduct.brand}
                            onChange={handleInputChange}
                            className={`shadow appearance-none border ${formErrors.brand ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                            placeholder="Ej. Nike, Samsung"
                        />
                        {formErrors.brand && <p className="text-red-400 text-xs mt-1">{formErrors.brand}</p>}
                    </div>
                    <div>
                        <label htmlFor="supplier" className="block text-neutral-light text-sm font-bold mb-2">Proveedor (Opcional):</label>
                        <input
                            type="text"
                            id="supplier"
                            name="supplier"
                            value={newProduct.supplier}
                            onChange={handleInputChange}
                            className={`shadow appearance-none border ${formErrors.supplier ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                            placeholder="Ej. Distribuciones ABC"
                        />
                        {formErrors.supplier && <p className="text-red-400 text-xs mt-1">{formErrors.supplier}</p>}
                    </div>
                    <div>
                        <label htmlFor="price" className="block text-neutral-light text-sm font-bold mb-2">Precio de Venta ($) (Producto Principal):</label>
                        <input
                            type="number"
                            id="price"
                            name="price"
                            value={newProduct.price}
                            onChange={handleInputChange}
                            step="0.01"
                            className={`shadow appearance-none border ${formErrors.price ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                            placeholder="Ej. 29.99"
                            required={newProduct.variants.length === 0} // Requerido solo si no hay variantes
                            disabled={newProduct.variants.length > 0} // Deshabilitado si existen variantes
                        />
                        {formErrors.price && <p className="text-red-400 text-xs mt-1">{formErrors.price}</p>}
                    </div>
                    <div>
                        <label htmlFor="costPrice" className="block text-neutral-light text-sm font-bold mb-2">Costo Unitario ($) (Producto Principal):</label>
                        <input
                            type="number"
                            id="costPrice"
                            name="costPrice"
                            value={newProduct.costPrice}
                            onChange={handleInputChange}
                            step="0.01"
                            className={`shadow appearance-none border ${formErrors.costPrice ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                            placeholder="Ej. 15.00"
                            required={newProduct.variants.length === 0} // Requerido solo si no hay variantes
                            disabled={newProduct.variants.length > 0} // Deshabilitado si existen variantes
                        />
                        {formErrors.costPrice && <p className="text-red-400 text-xs mt-1">{formErrors.costPrice}</p>}
                    </div>
                    <div>
                        <label htmlFor="stock" className="block text-neutral-light text-sm font-bold mb-2">Stock (Producto Principal):</label>
                        <input
                            type="number"
                            id="stock"
                            name="stock"
                            value={newProduct.stock}
                            onChange={handleInputChange}
                            className={`shadow appearance-none border ${formErrors.stock ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                            placeholder="Ej. 100"
                            required={newProduct.variants.length === 0} // Requerido solo si no hay variantes
                            disabled={newProduct.variants.length > 0} // Deshabilitado si existen variantes
                        />
                        {formErrors.stock && <p className="text-red-400 text-xs mt-1">{formErrors.stock}</p>}
                    </div>
                    <div className="md:col-span-2">
                        <label htmlFor="description" className="block text-neutral-light text-sm font-bold mb-2">Descripción (Opcional):</label>
                        <textarea
                            id="description"
                            name="description"
                            value={newProduct.description}
                            onChange={handleInputChange}
                            className={`shadow appearance-none border ${formErrors.description ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 h-24 text-neutral-light`}
                            placeholder="Descripción detallada del producto..."
                        />
                        {formErrors.description && <p className="text-red-400 text-xs mt-1">{formErrors.description}</p>}
                    </div>

                    {/* --- INICIO DE LA SECCIÓN DE OPCIONES AVANZADAS (AÑADIR) --- */}
                    <div className="md:col-span-2 mt-4">
                        {/* Mensaje de información para campos deshabilitados cuando existen variantes */}
                        {newProduct.variants.length > 0 && (
                            <p className="text-yellow-400 text-sm mb-4">
                                <Info size={16} className="inline-block mr-1" /> Los campos de Precio, Stock, Costo, SKU, Unidad de Medida, Color, Talla/Tamaño y Material del producto principal están deshabilitados porque este producto tiene variantes. Gestiona estos detalles en cada variante.
                            </p>
                        )}
                        {/* Botón para alternar opciones avanzadas */}
                        <button
                            type="button"
                            onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}
                            className="w-full bg-neutral-gray-700 hover:bg-neutral-gray-600 text-neutral-light font-bold py-3 px-4 rounded-lg flex items-center justify-between transition duration-200 focus:outline-none focus:ring-2 focus:ring-neutral-gray-500"
                        >
                            <span>Opciones Avanzadas</span>
                            {showAdvancedOptions ? <ChevronUp size={20} /> : <ChevronDown size={20} />}
                        </button>
                        {/* Contenido colapsable de opciones avanzadas */}
                        {showAdvancedOptions && (
                            <div className="mt-4 border border-neutral-gray-700 rounded-lg p-4 bg-dark-charcoal animate-fade-in-down">
                                {/* Atributos del Producto Principal (Color, Talla, Material) */}
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                                    <div>
                                        <label htmlFor="color" className="block text-neutral-light text-sm font-bold mb-2">Color (Producto Principal - Opcional):</label>
                                        <input
                                            type="text"
                                            id="color"
                                            name="color"
                                            value={newProduct.color}
                                            onChange={handleInputChange}
                                            className={`shadow appearance-none border ${formErrors.color ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                            placeholder="Ej. Azul, Negro"
                                            disabled={newProduct.variants.length > 0} // Deshabilitado si existen variantes
                                        />
                                        {formErrors.color && <p className="text-red-400 text-xs mt-1">{formErrors.color}</p>}
                                    </div>
                                    <div>
                                        <label htmlFor="size" className="block text-neutral-light text-sm font-bold mb-2">Talla/Tamaño (Producto Principal - Opcional):</label>
                                        <input
                                            type="text"
                                            id="size"
                                            name="size"
                                            value={newProduct.size}
                                            onChange={handleInputChange}
                                            className={`shadow appearance-none border ${formErrors.size ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                            placeholder="Ej. S, L, XL, 32GB"
                                            disabled={newProduct.variants.length > 0} // Deshabilitado si existen variantes
                                        />
                                        {formErrors.size && <p className="text-red-400 text-xs mt-1">{formErrors.size}</p>}
                                    </div>
                                    <div className="md:col-span-2">
                                        <label htmlFor="material" className="block text-neutral-light text-sm font-bold mb-2">Material (Producto Principal - Opcional):</label>
                                        <input
                                            type="text"
                                            id="material"
                                            name="material"
                                            value={newProduct.material}
                                            onChange={handleInputChange}
                                            className={`shadow appearance-none border ${formErrors.material ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                            placeholder="Ej. Algodón, Plástico, Metal"
                                            disabled={newProduct.variants.length > 0} // Deshabilitado si existen variantes
                                        />
                                        {formErrors.material && <p className="text-red-400 text-xs mt-1">{formErrors.material}</p>}
                                    </div>
                                </div>

                                {/* --- NUEVOS CAMPOS DE STOCK/PERECEDEROS PARA PRODUCTO PRINCIPAL --- */}
                                <div className="mb-6 border-t border-neutral-gray-700 pt-6 mt-6">
                                    <h4 className="text-xl font-semibold text-neutral-light mb-3">Gestión de Stock Avanzada (Producto Principal):</h4>
                                    <div className="flex items-center mb-4">
                                        <input
                                            type="checkbox"
                                            id="isPerishable"
                                            name="isPerishable"
                                            checked={newProduct.isPerishable}
                                            onChange={handleInputChange}
                                            className="mr-2 h-5 w-5 text-action-blue rounded focus:ring-action-blue border-neutral-gray-600 bg-neutral-gray-700"
                                            disabled={newProduct.variants.length > 0} // Deshabilitado si existen variantes
                                        />
                                        <label htmlFor="isPerishable" className="text-neutral-light text-base font-bold">¿Es Perecedero?</label>
                                    </div>

                                    <div>
                                        <label htmlFor="reorderThreshold" className="block text-neutral-light text-sm font-bold mb-2">
                                            Umbral de Reaprovisionamiento:
                                            <span className="relative inline-block ml-2 group">
                                                <Info size={16} className="text-action-blue cursor-pointer" />
                                                <span className="absolute left-1/2 bottom-full transform -translate-x-1/2 mb-2 w-64 p-2 bg-neutral-gray-800 text-xs text-white rounded-md opacity-0 group-hover:opacity-100 transition-opacity duration-300 z-10 whitespace-normal text-center shadow-lg">
                                                    El stock mínimo de este producto/variante para generar una alerta de "Stock Bajo".
                                                </span>
                                            </span>
                                        </label>
                                        <input
                                            type="number"
                                            id="reorderThreshold"
                                            name="reorderThreshold"
                                            value={newProduct.reorderThreshold}
                                            onChange={handleInputChange}
                                            className={`shadow appearance-none border ${formErrors.reorderThreshold ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                            placeholder="Ej. 10 (unidades para alertar stock bajo)"
                                            disabled={newProduct.variants.length > 0}
                                        />
                                        {formErrors.reorderThreshold && <p className="text-red-400 text-xs mt-1">{formErrors.reorderThreshold}</p>}
                                    </div>

                                    {newProduct.isPerishable && ( // Campos condicionales para perecederos
                                        <>
                                            <div className="mt-4">
                                                <label htmlFor="optimalMaxStock" className="block text-neutral-light text-sm font-bold mb-2">Stock Óptimo Máximo (Perecedero):</label>
                                                <input
                                                    type="number"
                                                    id="optimalMaxStock"
                                                    name="optimalMaxStock"
                                                    value={newProduct.optimalMaxStock}
                                                    onChange={handleInputChange}
                                                    className={`shadow appearance-none border ${formErrors.optimalMaxStock ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                    placeholder="Ej. 50 (unidades para evitar excesos)"
                                                    required={newProduct.isPerishable && newProduct.variants.length === 0}
                                                    disabled={newProduct.variants.length > 0}
                                                />
                                                {formErrors.optimalMaxStock && <p className="text-red-400 text-xs mt-1">{formErrors.optimalMaxStock}</p>}
                                            </div>
                                            <div className="mt-4">
                                                <label htmlFor="shelfLifeDays" className="block text-neutral-light text-sm font-bold mb-2">Vida Útil (en días - Perecedero):</label>
                                                <input
                                                    type="number"
                                                    id="shelfLifeDays"
                                                    name="shelfLifeDays"
                                                    value={newProduct.shelfLifeDays}
                                                    onChange={handleInputChange}
                                                    className={`shadow appearance-none border ${formErrors.shelfLifeDays ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                    placeholder="Ej. 30 (días hasta caducidad)"
                                                    required={newProduct.isPerishable && newProduct.variants.length === 0}
                                                    disabled={newProduct.variants.length > 0}
                                                />
                                                {formErrors.shelfLifeDays && <p className="text-red-400 text-xs mt-1">{formErrors.shelfLifeDays}</p>}
                                            </div>
                                        </>
                                    )}
                                </div>
                                {/* --- FIN NUEVOS CAMPOS DE STOCK/PERECEDEROS PARA PRODUCTO PRINCIPAL --- */}

                                {/* Sección para carga o URL de imagen principal del producto */}
                                <div className="mb-6">
                                    <h4 className="text-xl font-semibold text-neutral-light mb-3">Imagen Principal del Producto (Opcional):</h4>
                                    <div className="flex flex-col gap-4">
                                        {/* Opción 1: Cargar archivo local */}
                                        <div className="flex flex-col">
                                            <label htmlFor="imageFile" className="block text-neutral-light text-sm font-bold mb-2 cursor-pointer bg-neutral-gray-600 hover:bg-neutral-gray-700 py-2 px-4 rounded-lg text-center flex items-center justify-center transition duration-200">
                                                {isUploadingMainImage ? <Loader2 size={20} className="mr-2 animate-spin" /> : <Upload size={20} className="mr-2"/>} Cargar Imagen desde mi Dispositivo
                                            </label>
                                            <input
                                                type="file"
                                                id="imageFile"
                                                name="imageFile"
                                                accept="image/*"
                                                onChange={handleImageFileChange}
                                                className="hidden"
                                            />
                                            {imageFile && (
                                                <p className="text-neutral-gray-400 text-sm mt-2">Archivo seleccionado: <span className="font-semibold">{imageFile.name}</span></p>
                                            )}
                                        </div>

                                        <div className="text-neutral-gray-400 text-center text-sm my-2">O</div>

                                        {/* Opción 2: Pegar URL de imagen */}
                                        <div>
                                            <label htmlFor="imageUrl" className="block text-neutral-light text-sm font-bold mb-2">
                                                Pega la URL de una Imagen Externa:
                                                <span className="relative inline-block ml-2 group">
                                                    <Info size={16} className="text-action-blue cursor-pointer" />
                                                    <span className="absolute left-1/2 bottom-full transform -translate-x-1/2 mb-2 w-72 p-2 bg-neutral-gray-800 text-xs text-white rounded-md opacity-0 group-hover:opacity-100 transition-opacity duration-300 z-10 whitespace-normal text-center shadow-lg">
                                                        Pega aquí la URL de la imagen principal de tu producto.
                                                        Si cargas un archivo, esta URL será ignorada.
                                                    </span>
                                                </span>
                                            </label>
                                            <input
                                                type="url"
                                                id="imageUrl"
                                                name="imageUrl"
                                                value={newProduct.imageUrl}
                                                onChange={handleInputChange}
                                                className={`shadow appearance-none border ${formErrors.imageUrl ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                placeholder="Ej. https://tuservicio.com/imagen.jpg"
                                            />
                                            {formErrors.imageUrl && <p className="text-red-400 text-xs mt-1">{formErrors.imageUrl}</p>}
                                        </div>

                                        {/* Previsualización de imagen (desde archivo local o URL) */}
                                        {(imagePreviewUrl || newProduct.imageUrl) ? (
                                            <div className="mt-4 border border-neutral-gray-600 rounded-lg p-2 text-center bg-neutral-gray-800">
                                                <p className="text-neutral-gray-400 text-sm mb-2">Previsualización de Imagen:</p>
                                                <img
                                                    src={imagePreviewUrl || newProduct.imageUrl} // Prioriza la previsualización local, luego la URL del estado
                                                    alt="Previsualización del Producto"
                                                    className="max-w-full h-auto max-h-48 object-contain mx-auto rounded-md"
                                                    onError={(e) => {
                                                        e.target.onerror = null; // Previene un bucle infinito si el marcador de posición también falla
                                                        e.target.src = 'https://placehold.co/600x400/2D3748/F8F8F2?text=Error+Cargando+Imagen'; // Imagen de respaldo
                                                        e.target.classList.add('border-red-500', 'border-2'); // Añade una señal visual de imagen rota
                                                    }}
                                                />
                                                <p className="text-orange-400 text-xs mt-1">Si la imagen no carga, la URL puede ser incorrecta o el archivo no es válido.</p>
                                            </div>
                                        ) : (
                                            <div className="mt-4 border border-neutral-gray-600 rounded-lg p-2 text-center bg-neutral-gray-800 text-neutral-gray-400 text-sm py-8">
                                                No hay imagen para previsualizar.
                                            </div>
                                        )}
                                    </div>
                                </div>

                                {/* Sección para Gestión de Variantes */}
                                <div className="mt-6 border-t border-neutral-gray-700 pt-6">
                                    <h4 className="text-xl font-semibold text-neutral-light mb-4">Gestión de Variantes de Producto:</h4>
                                    <p className="text-neutral-gray-300 text-sm mb-4">Define diferentes versiones de tu producto (ej. tallas, colores, materiales). Cada variante tendrá su propio SKU, precio, costo y stock.</p>

                                    {newProduct.variants.map((variant, index) => (
                                        <div key={index} className="bg-neutral-gray-800 p-4 rounded-lg mb-4 border border-neutral-gray-700 relative">
                                            <h5 className="text-lg font-bold text-action-blue mb-3">Variante #{index + 1}</h5>
                                            <button
                                                type="button"
                                                onClick={() => removeVariant(index)}
                                                className="absolute top-2 right-2 text-red-400 hover:text-red-600 transition-colors duration-200"
                                                title="Eliminar esta variante"
                                            >
                                                <X size={20} /> {/* Ícono 'X' para eliminar variante */}
                                            </button>
                                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                                <div>
                                                    <label htmlFor={`variantName-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Nombre de Variante:</label>
                                                    <input
                                                        type="text"
                                                        id={`variantName-${index}`}
                                                        name="name"
                                                        value={variant.name}
                                                        onChange={(e) => handleVariantInputChange(index, e)}
                                                        className={`shadow appearance-none border ${formErrors[`variant-${index}-name`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                        placeholder="Ej. Talla M, Color Azul"
                                                        required
                                                    />
                                                    {formErrors[`variant-${index}-name`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-name`]}</p>}
                                                </div>
                                                <div>
                                                    <label htmlFor={`variantSku-${index}`} className="block text-neutral-light text-sm font-bold mb-2">SKU de Variante:</label>
                                                    <input
                                                        type="text"
                                                        id={`variantSku-${index}`}
                                                        name="sku"
                                                        value={variant.sku}
                                                        onChange={(e) => handleVariantInputChange(index, e)}
                                                        placeholder={variant.autoGeneratedVariantSku || 'Ej. CAMI-AZUL-M'}
                                                        className={`shadow appearance-none border ${formErrors[`variant-${index}-sku`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                    />
                                                    {formErrors[`variant-${index}-sku`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-sku`]}</p>}
                                                </div>
                                                <div>
                                                    <label htmlFor={`variantPrice-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Precio de Venta ($):</label>
                                                    <input
                                                        type="number"
                                                        id={`variantPrice-${index}`}
                                                        name="price"
                                                        value={variant.price}
                                                        onChange={(e) => handleVariantInputChange(index, e)}
                                                        step="0.01"
                                                        className={`shadow appearance-none border ${formErrors[`variant-${index}-price`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                        placeholder="Ej. 25.99"
                                                        required
                                                    />
                                                    {formErrors[`variant-${index}-price`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-price`]}</p>}
                                                </div>
                                                <div>
                                                    <label htmlFor={`variantCostPrice-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Costo Unitario ($):</label>
                                                    <input
                                                        type="number"
                                                        id={`variantCostPrice-${index}`}
                                                        name="costPrice"
                                                        value={variant.costPrice}
                                                        onChange={(e) => handleVariantInputChange(index, e)}
                                                        step="0.01"
                                                        className={`shadow appearance-none border ${formErrors[`variant-${index}-costPrice`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                        placeholder="Ej. 12.50"
                                                        required
                                                    />
                                                    {formErrors[`variant-${index}-costPrice`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-costPrice`]}</p>}
                                                </div>
                                                <div>
                                                    <label htmlFor={`variantStock-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Stock:</label>
                                                    <input
                                                        type="number"
                                                        id={`variantStock-${index}`}
                                                        name="stock"
                                                        value={variant.stock}
                                                        onChange={(e) => handleVariantInputChange(index, e)}
                                                        className={`shadow appearance-none border ${formErrors[`variant-${index}-stock`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                        placeholder="Ej. 50"
                                                        required
                                                    />
                                                    {formErrors[`variant-${index}-stock`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-stock`]}</p>}
                                                </div>
                                                <div>
                                                    <label htmlFor={`variantUnitOfMeasure-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Unidad de Medida:</label>
                                                    <select
                                                        id={`variantUnitOfMeasure-${index}`}
                                                        name="unitOfMeasure"
                                                        value={variant.unitOfMeasure}
                                                        onChange={(e) => handleVariantInputChange(index, e)}
                                                        className={`shadow appearance-none border ${formErrors[`variant-${index}-unitOfMeasure`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal cursor-pointer text-neutral-light`}
                                                        required
                                                    >
                                                        {unitOfMeasureOptions.map(unit => (
                                                            <option key={unit} value={unit}>{unit}</option>
                                                        ))}
                                                    </select>
                                                    {formErrors[`variant-${index}-unitOfMeasure`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-unitOfMeasure`]}</p>}
                                                </div>
                                                {/* Atributos adicionales de la variante */}
                                                <div>
                                                    <label htmlFor={`variantColor-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Color (Opcional):</label>
                                                    <input
                                                        type="text"
                                                        id={`variantColor-${index}`}
                                                        name="color"
                                                        value={variant.color}
                                                        onChange={(e) => handleVariantInputChange(index, e)}
                                                        className={`shadow appearance-none border ${formErrors[`variant-${index}-color`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                        placeholder="Ej. Rojo"
                                                    />
                                                    {formErrors[`variant-${index}-color`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-color`]}</p>}
                                                </div>
                                                <div>
                                                    <label htmlFor={`variantSize-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Talla/Tamaño (Opcional):</label>
                                                    <input
                                                        type="text"
                                                        id={`variantSize-${index}`}
                                                        name="size"
                                                        value={variant.size}
                                                        onChange={(e) => handleVariantInputChange(index, e)}
                                                        className={`shadow appearance-none border ${formErrors[`variant-${index}-size`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                        placeholder="Ej. S, L, XL, 32GB"
                                                    />
                                                    {formErrors[`variant-${index}-size`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-size`]}</p>}
                                                </div>
                                                <div className="md:col-span-2">
                                                    <label htmlFor={`variantMaterial-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Material (Opcional):</label>
                                                    <input
                                                        type="text"
                                                        id={`variantMaterial-${index}`}
                                                        name="material"
                                                        value={variant.material}
                                                        onChange={(e) => handleVariantInputChange(index, e)}
                                                        className={`shadow appearance-none border ${formErrors[`variant-${index}-material`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                        placeholder="Ej. Algodón, Plástico"
                                                    />
                                                    {formErrors[`variant-${index}-material`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-material`]}</p>}
                                                </div>

                                                {/* --- NUEVOS CAMPOS DE STOCK/PERECEDEROS PARA VARIANTE --- */}
                                                <div className="md:col-span-2 mt-4 border-t border-neutral-gray-700 pt-4">
                                                    <h5 className="text-base font-semibold text-neutral-light mb-2">Gestión de Stock de Variante:</h5>
                                                    <div className="flex items-center mb-3">
                                                        <input
                                                            type="checkbox"
                                                            id={`variantIsPerishable-${index}`}
                                                            name="isPerishable"
                                                            checked={variant.isPerishable}
                                                            onChange={(e) => handleVariantInputChange(index, e)}
                                                            className="mr-2 h-4 w-4 text-action-blue rounded focus:ring-action-blue border-neutral-gray-600 bg-neutral-gray-700"
                                                        />
                                                        <label htmlFor={`variantIsPerishable-${index}`} className="text-neutral-light text-sm font-bold">¿Es Perecedero?</label>
                                                    </div>

                                                    <div>
                                                        <label htmlFor={`variantReorderThreshold-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Umbral de Reaprovisionamiento:
                                                            <span className="relative inline-block ml-2 group">
                                                                <Info size={16} className="text-action-blue cursor-pointer" />
                                                                <span className="absolute left-1/2 bottom-full transform -translate-x-1/2 mb-2 w-64 p-2 bg-neutral-gray-800 text-xs text-white rounded-md opacity-0 group-hover:opacity-100 transition-opacity duration-300 z-10 whitespace-normal text-center shadow-lg">
                                                                    El stock mínimo de este producto/variante para generar una alerta de "Stock Bajo".
                                                                </span>
                                                            </span>
                                                        </label>
                                                        <input
                                                            type="number"
                                                            id={`variantReorderThreshold-${index}`}
                                                            name="reorderThreshold"
                                                            value={variant.reorderThreshold}
                                                            onChange={(e) => handleVariantInputChange(index, e)}
                                                            className={`shadow appearance-none border ${formErrors[`variant-${index}-reorderThreshold`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                            placeholder="Ej. 5"
                                                        />
                                                        {formErrors[`variant-${index}-reorderThreshold`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-reorderThreshold`]}</p>}
                                                    </div>

                                                    {variant.isPerishable && ( // Campos condicionales para perecederos en variante
                                                        <>
                                                            <div className="mt-3">
                                                                <label htmlFor={`variantOptimalMaxStock-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Stock Óptimo Máximo (Perecedero):</label>
                                                                <input
                                                                    type="number"
                                                                    id={`variantOptimalMaxStock-${index}`}
                                                                    name="optimalMaxStock"
                                                                    value={variant.optimalMaxStock}
                                                                    onChange={(e) => handleVariantInputChange(index, e)}
                                                                    className={`shadow appearance-none border ${formErrors[`variant-${index}-optimalMaxStock`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                                    placeholder="Ej. 20"
                                                                    required={variant.isPerishable}
                                                                />
                                                                {formErrors[`variant-${index}-optimalMaxStock`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-optimalMaxStock`]}</p>}
                                                            </div>
                                                            <div className="mt-3">
                                                                <label htmlFor={`variantShelfLifeDays-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Vida Útil (en días - Perecedero):</label>
                                                                <input
                                                                    type="number"
                                                                    id={`variantShelfLifeDays-${index}`}
                                                                    name="shelfLifeDays"
                                                                    value={variant.shelfLifeDays}
                                                                    onChange={(e) => handleVariantInputChange(index, e)}
                                                                    className={`shadow appearance-none border ${formErrors[`variant-${index}-shelfLifeDays`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                                    placeholder="Ej. 14"
                                                                    required={variant.isPerishable}
                                                                />
                                                                {formErrors[`variant-${index}-shelfLifeDays`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-shelfLifeDays`]}</p>}
                                                            </div>
                                                        </>
                                                    )}
                                                </div>
                                                {/* --- FIN NUEVOS CAMPOS DE STOCK/PERECEDEROS PARA VARIANTE --- */}

                                                {/* Sección de imagen para la variante */}
                                                <div className="md:col-span-2 border border-neutral-gray-700 rounded-lg p-3 flex flex-col gap-3 bg-neutral-gray-700">
                                                    <p className="block text-neutral-light text-sm font-bold">Imagen de la Variante (Opcional):</p>
                                                    <div className="flex flex-col">
                                                        <label htmlFor={`variantImageFile-${index}`} className="block text-neutral-light text-sm font-bold mb-2 cursor-pointer bg-neutral-gray-600 hover:bg-neutral-gray-500 py-2 px-4 rounded-lg text-center flex items-center justify-center transition duration-200">
                                                            {variantImageUploading[index] ? <Loader2 size={18} className="mr-2 animate-spin" /> : <Upload size={18} className="mr-2"/>} Cargar Imagen de Variante
                                                        </label>
                                                        <input
                                                            type="file"
                                                            id={`variantImageFile-${index}`}
                                                            name="imageFile"
                                                            accept="image/*"
                                                            onChange={(e) => handleVariantImageFileChange(index, e)}
                                                            className="hidden"
                                                        />
                                                    </div>
                                                    <div className="text-neutral-gray-400 text-center text-xs my-1">O</div>
                                                    <div>
                                                        <label htmlFor={`variantImageUrl-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Pega la URL:</label>
                                                        <input
                                                            type="url"
                                                            id={`variantImageUrl-${index}`}
                                                            name="imageUrl"
                                                            value={variant.imageUrl}
                                                            onChange={(e) => handleVariantInputChange(index, e)}
                                                            onBlur={(e) => { // Sube la imagen al perder el foco si la URL cambió
                                                                // Solo intenta subir si la URL no está vacía y ha cambiado
                                                                const currentVariant = showAddModal ? newProduct.variants[index] : editingProduct.variants[index];
                                                                if (e.target.value && e.target.value.trim() !== currentVariant.imageUrl && !e.target.value.includes('res.cloudinary.com')) {
                                                                    uploadVariantImageToCloud(e.target.value, index);
                                                                }
                                                            }}
                                                            className={`shadow appearance-none border ${formErrors[`variant-${index}-imageUrl`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-xs text-neutral-light`}
                                                            placeholder="Ej. https://tuservicio.com/variante_azul.jpg"
                                                        />
                                                        {formErrors[`variant-${index}-imageUrl`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-imageUrl`]}</p>}
                                                    </div>
                                                    {(variant.imageUrl) ? (
                                                        <div className="mt-2 border border-neutral-gray-600 rounded-lg p-2 text-center bg-neutral-gray-800">
                                                            <p className="text-neutral-gray-400 text-xs mb-1">Previsualización:</p>
                                                            <img
                                                                src={variant.imageUrl}
                                                                alt={`Variante ${index + 1}`}
                                                                className="max-w-full h-auto max-h-32 object-contain mx-auto rounded-md"
                                                                onError={(e) => { e.target.onerror = null; e.target.src = 'https://placehold.co/150x100/2D3748/F8F8F2?text=Error'; }}
                                                            />
                                                        </div>
                                                    ) : (
                                                        <div className="mt-2 border border-neutral-gray-600 rounded-lg p-2 text-center bg-neutral-gray-800 text-neutral-gray-400 text-xs py-4">
                                                            Sin imagen de variante.
                                                        </div>
                                                    )}
                                                </div>
                                            </div>
                                        </div>
                                    ))}
                                    <button
                                        type="button"
                                        onClick={addVariant}
                                        className="w-full bg-success-green hover:bg-green-700 text-deep-night-blue font-bold py-2 px-4 rounded-lg flex items-center justify-center transition duration-200 shadow-md focus:outline-none focus:ring-2 focus:ring-green-500 mt-4"
                                    >
                                        <Plus size={20} className="mr-2" /> Añadir Variante
                                    </button>
                                </div>
                            </div>
                        )}
                    </div>
                    {/* --- FIN DE LA SECCIÓN DE OPCIONES AVANZADAS (AÑADIR) --- */}

                    {/* Botón de Envío del Formulario */}
                    <div className="md:col-span-2 text-right">
                        <button
                            type="submit"
                            className="bg-copper-rose-accent hover:bg-rose-700 text-deep-night-blue font-bold py-3 px-8 rounded-lg shadow-md transition duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-red-500 focus:ring-opacity-50 flex items-center justify-center float-right"
                            // Deshabilita el botón mientras carga o si alguna imagen se está subiendo (principal o de variante)
                            disabled={loading || isUploadingMainImage || Object.values(variantImageUploading).some(val => val)}
                        >
                            {loading ? <Loader2 size={20} className="mr-2 animate-spin" /> : <Save size={20} className="mr-2" />} Guardar Producto
                        </button>
                    </div>
                </form>
            </ProductModal>

            {/* --- Modal para Editar Producto --- */}
            <ProductModal
                isOpen={showEditModal}
                onClose={() => {
                    // Reinicia todos los estados relevantes al cerrar el modal de edición de producto
                    setShowEditModal(false);
                    setEditingProduct(null); // Limpia el estado del producto en edición
                    setError('');
                    setSuccessMessage('');
                    setImageFile(null); // Limpia el archivo de imagen principal seleccionado
                    setImagePreviewUrl(''); // Limpia la URL de previsualización de imagen principal
                    setShowAdvancedOptions(false); // Colapsa las opciones avanzadas
                    setFormErrors({}); // Limpia todos los errores de formulario
                }}
                title={`Editar Producto: ${editingProduct?.name || ''}`}
            >
                {/* Solo renderiza el formulario si hay un producto siendo editado */}
                {editingProduct && (
                    <form onSubmit={handleUpdateProduct} className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label htmlFor="editName" className="block text-neutral-light text-sm font-bold mb-2">Nombre del Producto:</label>
                            <input
                                type="text"
                                id="editName"
                                name="name"
                                value={editingProduct.name}
                                onChange={handleInputChange}
                                className={`shadow appearance-none border ${formErrors.name ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                placeholder="Ej. Camiseta Deportiva"
                                required
                            />
                            {formErrors.name && <p className="text-red-400 text-xs mt-1">{formErrors.name}</p>}
                        </div>
                        <div>
                            <label htmlFor="editSku" className="block text-neutral-light text-sm font-bold mb-2">SKU (Producto Principal):</label>
                            <input
                                type="text"
                                id="editSku"
                                name="sku"
                                value={editingProduct.sku}
                                onChange={handleInputChange}
                                className={`shadow appearance-none border ${formErrors.sku ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                disabled={editingProduct.variants.length > 0} // Deshabilitado si existen variantes
                            />
                            {formErrors.sku && <p className="text-red-400 text-xs mt-1">{formErrors.sku}</p>}
                        </div>
                        <div>
                            <label htmlFor="editCategory" className="block text-neutral-light text-sm font-bold mb-2">Categoría:</label>
                            <input
                                type="text"
                                id="editCategory"
                                name="category"
                                value={editingProduct.category}
                                onChange={handleInputChange}
                                className={`shadow appearance-none border ${formErrors.category ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                placeholder="Ej. Ropa, Electrónica, Alimentos"
                                required
                            />
                            {formErrors.category && <p className="text-red-400 text-xs mt-1">{formErrors.category}</p>}
                        </div>
                        <div>
                            <label htmlFor="editUnitOfMeasure" className="block text-neutral-light text-sm font-bold mb-2">Unidad de Medida (Producto Principal):</label>
                            <select
                                id="editUnitOfMeasure"
                                name="unitOfMeasure"
                                value={editingProduct.unitOfMeasure}
                                onChange={handleInputChange}
                                className={`shadow appearance-none border ${formErrors.unitOfMeasure ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal cursor-pointer text-neutral-light`}
                                required={editingProduct.variants.length === 0}
                                disabled={editingProduct.variants.length > 0}
                            >
                                {unitOfMeasureOptions.map(unit => (
                                    <option key={unit} value={unit}>{unit}</option>
                                ))}
                            </select>
                            {formErrors.unitOfMeasure && <p className="text-red-400 text-xs mt-1">{formErrors.unitOfMeasure}</p>}
                        </div>
                        <div>
                            <label htmlFor="editBrand" className="block text-neutral-light text-sm font-bold mb-2">Marca (Opcional):</label>
                            <input
                                type="text"
                                id="editBrand"
                                name="brand"
                                value={editingProduct.brand}
                                onChange={handleInputChange}
                                className={`shadow appearance-none border ${formErrors.brand ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                placeholder="Ej. Nike, Samsung"
                            />
                            {formErrors.brand && <p className="text-red-400 text-xs mt-1">{formErrors.brand}</p>}
                        </div>
                        <div>
                            <label htmlFor="editSupplier" className="block text-neutral-light text-sm font-bold mb-2">Proveedor (Opcional):</label>
                            <input
                                type="text"
                                id="editSupplier"
                                name="supplier"
                                value={editingProduct.supplier}
                                onChange={handleInputChange}
                                className={`shadow appearance-none border ${formErrors.supplier ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                placeholder="Ej. Distribuciones ABC"
                            />
                            {formErrors.supplier && <p className="text-red-400 text-xs mt-1">{formErrors.supplier}</p>}
                        </div>
                        <div>
                            <label htmlFor="editPrice" className="block text-neutral-light text-sm font-bold mb-2">Precio de Venta ($) (Producto Principal):</label>
                            <input
                                type="number"
                                id="editPrice"
                                name="price"
                                value={editingProduct.price}
                                onChange={handleInputChange}
                                step="0.01"
                                className={`shadow appearance-none border ${formErrors.price ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                placeholder="Ej. 29.99"
                                required={editingProduct.variants.length === 0}
                                disabled={editingProduct.variants.length > 0}
                            />
                            {formErrors.price && <p className="text-red-400 text-xs mt-1">{formErrors.price}</p>}
                        </div>
                        <div>
                            <label htmlFor="editCostPrice" className="block text-neutral-light text-sm font-bold mb-2">Costo Unitario ($) (Producto Principal):</label>
                            <input
                                type="number"
                                id="editCostPrice"
                                name="costPrice"
                                value={editingProduct.costPrice}
                                onChange={handleInputChange}
                                step="0.01"
                                className={`shadow appearance-none border ${formErrors.costPrice ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                placeholder="Ej. 15.00"
                                required={editingProduct.variants.length === 0}
                                disabled={editingProduct.variants.length > 0}
                            />
                            {formErrors.costPrice && <p className="text-red-400 text-xs mt-1">{formErrors.costPrice}</p>}
                        </div>
                        <div>
                            <label htmlFor="editStock" className="block text-neutral-light text-sm font-bold mb-2">Stock (Producto Principal):</label>
                            <input
                                type="number"
                                id="editStock"
                                name="stock"
                                value={editingProduct.stock}
                                onChange={handleInputChange}
                                className={`shadow appearance-none border ${formErrors.stock ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                placeholder="Ej. 100"
                                required={editingProduct.variants.length === 0}
                                disabled={editingProduct.variants.length > 0}
                            />
                            {formErrors.stock && <p className="text-red-400 text-xs mt-1">{formErrors.stock}</p>}
                        </div>
                        <div className="md:col-span-2">
                            <label htmlFor="editDescription" className="block text-neutral-light text-sm font-bold mb-2">Descripción (Opcional):</label>
                            <textarea
                                id="editDescription"
                                name="description"
                                value={editingProduct.description}
                                onChange={handleInputChange}
                                className={`shadow appearance-none border ${formErrors.description ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 h-24 text-neutral-light`}
                                placeholder="Descripción detallada del producto..."
                            />
                            {formErrors.description && <p className="text-red-400 text-xs mt-1">{formErrors.description}</p>}
                        </div>

                        {/* --- INICIO DE LA SECCIÓN DE OPCIONES AVANZADAS (EDITAR) --- */}
                        <div className="md:col-span-2 mt-4">
                            {/* Mensaje de información para campos deshabilitados cuando existen variantes */}
                            {editingProduct.variants.length > 0 && (
                                <p className="text-yellow-400 text-sm mb-4">
                                    <Info size={16} className="inline-block mr-1" /> Los campos de Precio, Stock, Costo, SKU, Unidad de Medida, Color, Talla/Tamaño y Material del producto principal están deshabilitados porque este producto tiene variantes. Gestiona estos detalles en cada variante.
                                </p>
                            )}
                            {/* Botón para alternar opciones avanzadas */}
                            <button
                                type="button"
                                onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}
                                className="w-full bg-neutral-gray-700 hover:bg-neutral-gray-600 text-neutral-light font-bold py-3 px-4 rounded-lg flex items-center justify-between transition duration-200 focus:outline-none focus:ring-2 focus:ring-neutral-gray-500"
                            >
                                <span>Opciones Avanzadas</span>
                                {showAdvancedOptions ? <ChevronUp size={20} /> : <ChevronDown size={20} />}
                            </button>
                            {/* Contenido colapsable de opciones avanzadas */}
                            {showAdvancedOptions && (
                                <div className="mt-4 border border-neutral-gray-700 rounded-lg p-4 bg-dark-charcoal animate-fade-in-down">
                                    {/* Atributos del Producto Principal (Color, Talla, Material) */}
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                                        <div>
                                            <label htmlFor="editColor" className="block text-neutral-light text-sm font-bold mb-2">Color (Producto Principal - Opcional):</label>
                                            <input
                                                type="text"
                                                id="editColor"
                                                name="color"
                                                value={editingProduct.color}
                                                onChange={handleInputChange}
                                                className={`shadow appearance-none border ${formErrors.color ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                placeholder="Ej. Azul, Negro"
                                                disabled={editingProduct.variants.length > 0}
                                            />
                                            {formErrors.color && <p className="text-red-400 text-xs mt-1">{formErrors.color}</p>}
                                        </div>
                                        <div>
                                            <label htmlFor="editSize" className="block text-neutral-light text-sm font-bold mb-2">Talla/Tamaño (Producto Principal - Opcional):</label>
                                            <input
                                                type="text"
                                                id="editSize"
                                                name="size"
                                                value={editingProduct.size}
                                                onChange={handleInputChange}
                                                className={`shadow appearance-none border ${formErrors.size ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                placeholder="Ej. S, L, XL, 32GB"
                                                disabled={editingProduct.variants.length > 0}
                                            />
                                            {formErrors.size && <p className="text-red-400 text-xs mt-1">{formErrors.size}</p>}
                                        </div>
                                        <div className="md:col-span-2">
                                            <label htmlFor="editMaterial" className="block text-neutral-light text-sm font-bold mb-2">Material (Producto Principal - Opcional):</label>
                                            <input
                                                type="text"
                                                id="editMaterial"
                                                name="material"
                                                value={editingProduct.material}
                                                onChange={handleInputChange}
                                                className={`shadow appearance-none border ${formErrors.material ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                placeholder="Ej. Algodón, Plástico, Metal"
                                                disabled={editingProduct.variants.length > 0}
                                            />
                                            {formErrors.material && <p className="text-red-400 text-xs mt-1">{formErrors.material}</p>}
                                        </div>
                                    </div>

                                    {/* --- NUEVOS CAMPOS DE STOCK/PERECEDEROS PARA PRODUCTO PRINCIPAL (EDITAR) --- */}
                                    <div className="mb-6 border-t border-neutral-gray-700 pt-6 mt-6">
                                        <h4 className="text-xl font-semibold text-neutral-light mb-3">Gestión de Stock Avanzada (Producto Principal):</h4>
                                        <div className="flex items-center mb-4">
                                            <input
                                                type="checkbox"
                                                id="editIsPerishable"
                                                name="isPerishable"
                                                checked={editingProduct.isPerishable}
                                                onChange={handleInputChange}
                                                className="mr-2 h-5 w-5 text-action-blue rounded focus:ring-action-blue border-neutral-gray-600 bg-neutral-gray-700"
                                                disabled={editingProduct.variants.length > 0}
                                            />
                                            <label htmlFor="editIsPerishable" className="text-neutral-light text-base font-bold">¿Es Perecedero?</label>
                                        </div>

                                        <div>
                                            <label htmlFor="editReorderThreshold" className="block text-neutral-light text-sm font-bold mb-2">
                                            Umbral de Reaprovisionamiento:
                                            <span className="relative inline-block ml-2 group">
                                                <Info size={16} className="text-action-blue cursor-pointer" />
                                                <span className="absolute left-1/2 bottom-full transform -translate-x-1/2 mb-2 w-64 p-2 bg-neutral-gray-800 text-xs text-white rounded-md opacity-0 group-hover:opacity-100 transition-opacity duration-300 z-10 whitespace-normal text-center shadow-lg">
                                                    El stock mínimo de este producto/variante para generar una alerta de "Stock Bajo".
                                                </span>
                                            </span>
                                        </label>
                                            <input
                                                type="number"
                                                id="editReorderThreshold"
                                                name="reorderThreshold"
                                                value={editingProduct.reorderThreshold}
                                                onChange={handleInputChange}
                                                className={`shadow appearance-none border ${formErrors.reorderThreshold ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                placeholder="Ej. 10 (unidades para alertar stock bajo)"
                                                disabled={editingProduct.variants.length > 0}
                                            />
                                            {formErrors.reorderThreshold && <p className="text-red-400 text-xs mt-1">{formErrors.reorderThreshold}</p>}
                                        </div>

                                        {editingProduct.isPerishable && ( // Campos condicionales para perecederos
                                            <>
                                                <div className="mt-4">
                                                    <label htmlFor="editOptimalMaxStock" className="block text-neutral-light text-sm font-bold mb-2">Stock Óptimo Máximo (Perecedero):</label>
                                                    <input
                                                        type="number"
                                                        id="editOptimalMaxStock"
                                                        name="optimalMaxStock"
                                                        value={editingProduct.optimalMaxStock}
                                                        onChange={handleInputChange}
                                                        className={`shadow appearance-none border ${formErrors.optimalMaxStock ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                        placeholder="Ej. 50 (unidades para evitar excesos)"
                                                        required={editingProduct.isPerishable && editingProduct.variants.length === 0}
                                                        disabled={editingProduct.variants.length > 0}
                                                    />
                                                    {formErrors.optimalMaxStock && <p className="text-red-400 text-xs mt-1">{formErrors.optimalMaxStock}</p>}
                                                </div>
                                                <div className="mt-4">
                                                    <label htmlFor="editShelfLifeDays" className="block text-neutral-light text-sm font-bold mb-2">Vida Útil (en días - Perecedero):</label>
                                                    <input
                                                        type="number"
                                                        id="editShelfLifeDays"
                                                        name="shelfLifeDays"
                                                        value={editingProduct.shelfLifeDays}
                                                        onChange={handleInputChange}
                                                        className={`shadow appearance-none border ${formErrors.shelfLifeDays ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                        placeholder="Ej. 30 (días hasta caducidad)"
                                                        required={editingProduct.isPerishable && editingProduct.variants.length === 0}
                                                        disabled={editingProduct.variants.length > 0}
                                                    />
                                                    {formErrors.shelfLifeDays && <p className="text-red-400 text-xs mt-1">{formErrors.shelfLifeDays}</p>}
                                                </div>
                                            </>
                                        )}
                                    </div>
                                    {/* --- FIN NUEVOS CAMPOS DE STOCK/PERECEDEROS PARA PRODUCTO PRINCIPAL (EDITAR) --- */}

                                    {/* Sección para carga o URL de imagen principal del producto */}
                                    <div className="mb-6">
                                        <h4 className="text-xl font-semibold text-neutral-light mb-3">Imagen Principal del Producto (Opcional):</h4>
                                        <div className="flex flex-col gap-4">
                                            {/* Opción 1: Cargar archivo local */}
                                            <div className="flex flex-col">
                                                <label htmlFor="editImageFile" className="block text-neutral-light text-sm font-bold mb-2 cursor-pointer bg-neutral-gray-600 hover:bg-neutral-gray-700 py-2 px-4 rounded-lg text-center flex items-center justify-center transition duration-200">
                                                    {isUploadingMainImage ? <Loader2 size={20} className="mr-2 animate-spin" /> : <Upload size={20} className="mr-2"/>} Cargar Nueva Imagen desde mi Dispositivo
                                                </label>
                                                <input
                                                    type="file"
                                                    id="editImageFile"
                                                    name="imageFile"
                                                    accept="image/*"
                                                    onChange={handleImageFileChange}
                                                    className="hidden"
                                                />
                                                {imageFile && (
                                                    <p className="text-neutral-gray-400 text-sm mt-2">Archivo seleccionado: <span className="font-semibold">{imageFile.name}</span></p>
                                                )}
                                            </div>

                                            <div className="text-neutral-gray-400 text-center text-sm my-2">O</div>

                                            {/* Opción 2: Pegar URL de imagen */}
                                            <div>
                                                <label htmlFor="editImageUrl" className="block text-neutral-light text-sm font-bold mb-2">
                                                    Pega la URL de una Imagen Externa:
                                                </label>
                                                <input
                                                    type="url"
                                                    id="editImageUrl"
                                                    name="imageUrl"
                                                    value={editingProduct.imageUrl}
                                                    onChange={handleInputChange}
                                                    className={`shadow appearance-none border ${formErrors.imageUrl ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                    placeholder="Ej. https://tuservicio.com/imagen.jpg"
                                                />
                                                {formErrors.imageUrl && <p className="text-red-400 text-xs mt-1">{formErrors.imageUrl}</p>}
                                            </div>

                                            {/* Previsualización de imagen (desde archivo local o URL) */}
                                            {(imagePreviewUrl || editingProduct.imageUrl) ? (
                                                <div className="mt-4 border border-neutral-gray-600 rounded-lg p-2 text-center bg-neutral-gray-800">
                                                    <p className="text-neutral-gray-400 text-sm mb-2">Previsualización de Imagen:</p>
                                                    <img
                                                        src={imagePreviewUrl || editingProduct.imageUrl} // Prioriza la previsualización local, luego la URL del estado
                                                        alt="Previsualización del Producto"
                                                        className="max-w-full h-auto max-h-48 object-contain mx-auto rounded-md"
                                                        onError={(e) => {
                                                            e.target.onerror = null; // Previene un bucle infinito si el marcador de posición también falla
                                                            e.target.src = 'https://placehold.co/600x400/2D3748/F8F8F2?text=Error+Cargando+Imagen'; // Imagen de respaldo
                                                            e.target.classList.add('border-red-500', 'border-2'); // Añade una señal visual de imagen rota
                                                        }}
                                                    />
                                                    <p className="text-orange-400 text-xs mt-1">Si la imagen no carga, la URL puede ser incorrecta o el archivo no es válido.</p>
                                                </div>
                                            ) : (
                                                <div className="mt-4 border border-neutral-gray-600 rounded-lg p-2 text-center bg-neutral-gray-800 text-neutral-gray-400 text-sm py-8">
                                                    No hay imagen para previsualizar.
                                                </div>
                                            )}
                                        </div>
                                    </div>

                                    {/* Sección para Gestión de Variantes */}
                                    <div className="mt-6 border-t border-neutral-gray-700 pt-6">
                                        <h4 className="text-xl font-semibold text-neutral-light mb-4">Gestión de Variantes de Producto:</h4>
                                        <p className="text-neutral-gray-300 text-sm mb-4">Define diferentes versiones de tu producto (ej. tallas, colores, materiales). Cada variante tendrá su propio SKU, precio, costo y stock.</p>

                                        {editingProduct.variants.map((variant, index) => (
                                            <div key={index} className="bg-neutral-gray-800 p-4 rounded-lg mb-4 border border-neutral-gray-700 relative">
                                                <h5 className="text-lg font-bold text-action-blue mb-3">Variante #{index + 1}</h5>
                                                <button
                                                    type="button"
                                                    onClick={() => removeVariant(index)}
                                                    className="absolute top-2 right-2 text-red-400 hover:text-red-600 transition-colors duration-200"
                                                    title="Eliminar esta variante"
                                                >
                                                    <X size={20} /> {/* Ícono 'X' para eliminar variante */}
                                                </button>
                                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                                    <div>
                                                        <label htmlFor={`editVariantName-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Nombre de Variante:</label>
                                                        <input
                                                            type="text"
                                                            id={`editVariantName-${index}`}
                                                            name="name"
                                                            value={variant.name}
                                                            onChange={(e) => handleVariantInputChange(index, e)}
                                                            className={`shadow appearance-none border ${formErrors[`variant-${index}-name`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                            placeholder="Ej. Talla M, Color Azul"
                                                            required
                                                        />
                                                        {formErrors[`variant-${index}-name`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-name`]}</p>}
                                                    </div>
                                                    <div>
                                                        <label htmlFor={`editVariantSku-${index}`} className="block text-neutral-light text-sm font-bold mb-2">SKU de Variante:</label>
                                                        <input
                                                            type="text"
                                                            id={`editVariantSku-${index}`}
                                                            name="sku"
                                                            value={variant.sku}
                                                            onChange={(e) => handleVariantInputChange(index, e)}
                                                            placeholder={variant.autoGeneratedVariantSku || 'Ej. CAMI-AZUL-M'}
                                                            className={`shadow appearance-none border ${formErrors[`variant-${index}-sku`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                        />
                                                        {formErrors[`variant-${index}-sku`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-sku`]}</p>}
                                                    </div>
                                                    <div>
                                                        <label htmlFor={`editVariantPrice-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Precio de Venta ($):</label>
                                                        <input
                                                            type="number"
                                                            id={`editVariantPrice-${index}`}
                                                            name="price"
                                                            value={variant.price}
                                                            onChange={(e) => handleVariantInputChange(index, e)}
                                                            step="0.01"
                                                            className={`shadow appearance-none border ${formErrors[`variant-${index}-price`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                            placeholder="Ej. 25.99"
                                                            required
                                                        />
                                                        {formErrors[`variant-${index}-price`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-price`]}</p>}
                                                    </div>
                                                    <div>
                                                        <label htmlFor={`editVariantCostPrice-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Costo Unitario ($):</label>
                                                        <input
                                                            type="number"
                                                            id={`editVariantCostPrice-${index}`}
                                                            name="costPrice"
                                                            value={variant.costPrice}
                                                            onChange={(e) => handleVariantInputChange(index, e)}
                                                            step="0.01"
                                                            className={`shadow appearance-none border ${formErrors[`variant-${index}-costPrice`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                            placeholder="Ej. 12.50"
                                                            required
                                                        />
                                                        {formErrors[`variant-${index}-costPrice`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-costPrice`]}</p>}
                                                    </div>
                                                    <div>
                                                        <label htmlFor={`editVariantStock-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Stock:</label>
                                                        <input
                                                            type="number"
                                                            id={`editVariantStock-${index}`}
                                                            name="stock"
                                                            value={variant.stock}
                                                            onChange={(e) => handleVariantInputChange(index, e)}
                                                            className={`shadow appearance-none border ${formErrors[`variant-${index}-stock`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                            placeholder="Ej. 50"
                                                            required
                                                        />
                                                        {formErrors[`variant-${index}-stock`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-stock`]}</p>}
                                                    </div>
                                                    <div>
                                                        <label htmlFor={`editVariantUnitOfMeasure-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Unidad de Medida:</label>
                                                        <select
                                                            id={`editVariantUnitOfMeasure-${index}`}
                                                            name="unitOfMeasure"
                                                            value={variant.unitOfMeasure}
                                                            onChange={(e) => handleVariantInputChange(index, e)}
                                                            className={`shadow appearance-none border ${formErrors[`variant-${index}-unitOfMeasure`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal cursor-pointer text-neutral-light`}
                                                            required
                                                        >
                                                            {unitOfMeasureOptions.map(unit => (
                                                                <option key={unit} value={unit}>{unit}</option>
                                                            ))}
                                                        </select>
                                                        {formErrors[`variant-${index}-unitOfMeasure`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-unitOfMeasure`]}</p>}
                                                    </div>
                                                    {/* Atributos adicionales de la variante */}
                                                    <div>
                                                        <label htmlFor={`editVariantColor-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Color (Opcional):</label>
                                                        <input
                                                            type="text"
                                                            id={`editVariantColor-${index}`}
                                                            name="color"
                                                            value={variant.color}
                                                            onChange={(e) => handleVariantInputChange(index, e)}
                                                            className={`shadow appearance-none border ${formErrors[`variant-${index}-color`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                            placeholder="Ej. Rojo"
                                                        />
                                                        {formErrors[`variant-${index}-color`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-color`]}</p>}
                                                    </div>
                                                    <div>
                                                        <label htmlFor={`editVariantSize-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Talla/Tamaño (Opcional):</label>
                                                        <input
                                                            type="text"
                                                            id={`editVariantSize-${index}`}
                                                            name="size"
                                                            value={variant.size}
                                                            onChange={(e) => handleVariantInputChange(index, e)}
                                                            className={`shadow appearance-none border ${formErrors[`variant-${index}-size`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                            placeholder="Ej. S, L, XL, 32GB"
                                                        />
                                                        {formErrors[`variant-${index}-size`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-size`]}</p>}
                                                    </div>
                                                    <div className="md:col-span-2">
                                                        <label htmlFor={`editVariantMaterial-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Material (Opcional):</label>
                                                        <input
                                                            type="text"
                                                            id={`editVariantMaterial-${index}`}
                                                            name="material"
                                                            value={variant.material}
                                                            onChange={(e) => handleVariantInputChange(index, e)}
                                                            className={`shadow appearance-none border ${formErrors[`variant-${index}-material`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                            placeholder="Ej. Algodón, Plástico"
                                                        />
                                                        {formErrors[`variant-${index}-material`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-material`]}</p>}
                                                    </div>

                                                    {/* --- NUEVOS CAMPOS DE STOCK/PERECEDEROS PARA VARIANTE (EDITAR) --- */}
                                                    <div className="md:col-span-2 mt-4 border-t border-neutral-gray-700 pt-4">
                                                        <h5 className="text-base font-semibold text-neutral-light mb-2">Gestión de Stock de Variante:</h5>
                                                        <div className="flex items-center mb-3">
                                                            <input
                                                                type="checkbox"
                                                                id={`editVariantIsPerishable-${index}`}
                                                                name="isPerishable"
                                                                checked={variant.isPerishable}
                                                                onChange={(e) => handleVariantInputChange(index, e)}
                                                                className="mr-2 h-4 w-4 text-action-blue rounded focus:ring-action-blue border-neutral-gray-600 bg-neutral-gray-700"
                                                            />
                                                            <label htmlFor={`editVariantIsPerishable-${index}`} className="text-neutral-light text-sm font-bold">¿Es Perecedero?</label>
                                                        </div>

                                                        <div>
                                                            <label htmlFor={`editVariantReorderThreshold-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Umbral de Reaprovisionamiento:
                                                            <span className="relative inline-block ml-2 group">
                                                                <Info size={16} className="text-action-blue cursor-pointer" />
                                                                <span className="absolute left-1/2 bottom-full transform -translate-x-1/2 mb-2 w-64 p-2 bg-neutral-gray-800 text-xs text-white rounded-md opacity-0 group-hover:opacity-100 transition-opacity duration-300 z-10 whitespace-normal text-center shadow-lg">
                                                                    El stock mínimo de este producto/variante para generar una alerta de "Stock Bajo".
                                                                </span>
                                                            </span>
                                                        </label>
                                                            <input
                                                                type="number"
                                                                id={`editVariantReorderThreshold-${index}`}
                                                                name="reorderThreshold"
                                                                value={variant.reorderThreshold}
                                                                onChange={(e) => handleVariantInputChange(index, e)}
                                                                className={`shadow appearance-none border ${formErrors[`variant-${index}-reorderThreshold`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                                placeholder="Ej. 5"
                                                            />
                                                            {formErrors[`variant-${index}-reorderThreshold`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-reorderThreshold`]}</p>}
                                                        </div>

                                                        {variant.isPerishable && ( // Campos condicionales para perecederos en variante
                                                            <>
                                                                <div className="mt-3">
                                                                    <label htmlFor={`editVariantOptimalMaxStock-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Stock Óptimo Máximo (Perecedero):</label>
                                                                    <input
                                                                        type="number"
                                                                        id={`editVariantOptimalMaxStock-${index}`}
                                                                        name="optimalMaxStock"
                                                                        value={variant.optimalMaxStock}
                                                                        onChange={(e) => handleVariantInputChange(index, e)}
                                                                        className={`shadow appearance-none border ${formErrors[`variant-${index}-optimalMaxStock`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                                        placeholder="Ej. 20"
                                                                        required={variant.isPerishable}
                                                                    />
                                                                    {formErrors[`variant-${index}-optimalMaxStock`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-optimalMaxStock`]}</p>}
                                                                </div>
                                                                <div className="mt-3">
                                                                    <label htmlFor={`editVariantShelfLifeDays-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Vida Útil (en días - Perecedero):</label>
                                                                    <input
                                                                        type="number"
                                                                        id={`editVariantShelfLifeDays-${index}`}
                                                                        name="shelfLifeDays"
                                                                        value={variant.shelfLifeDays}
                                                                        onChange={(e) => handleVariantInputChange(index, e)}
                                                                        className={`shadow appearance-none border ${formErrors[`variant-${index}-shelfLifeDays`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                                        placeholder="Ej. 14"
                                                                        required={variant.isPerishable}
                                                                    />
                                                                    {formErrors[`variant-${index}-shelfLifeDays`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-shelfLifeDays`]}</p>}
                                                                </div>
                                                            </>
                                                        )}
                                                    </div>
                                                    {/* --- FIN NUEVOS CAMPOS DE STOCK/PERECEDEROS PARA VARIANTE (EDITAR) --- */}

                                                    {/* Sección de imagen para la variante */}
                                                    <div className="md:col-span-2 border border-neutral-gray-700 rounded-lg p-3 flex flex-col gap-3 bg-neutral-gray-700">
                                                        <p className="block text-neutral-light text-sm font-bold">Imagen de la Variante (Opcional):</p>
                                                        <div className="flex flex-col">
                                                            <label htmlFor={`editVariantImageFile-${index}`} className="block text-neutral-light text-sm font-bold mb-2 cursor-pointer bg-neutral-gray-600 hover:bg-neutral-gray-500 py-2 px-4 rounded-lg text-center flex items-center justify-center transition duration-200">
                                                                {variantImageUploading[index] ? <Loader2 size={18} className="mr-2 animate-spin" /> : <Upload size={18} className="mr-2"/>} Cargar Imagen de Variante
                                                            </label>
                                                            <input
                                                                type="file"
                                                                id={`editVariantImageFile-${index}`}
                                                                name="imageFile"
                                                                accept="image/*"
                                                                onChange={(e) => handleVariantImageFileChange(index, e)}
                                                                className="hidden"
                                                            />
                                                        </div>
                                                        <div className="text-neutral-gray-400 text-center text-xs my-1">O</div>
                                                        <div>
                                                            <label htmlFor={`editVariantImageUrl-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Pega la URL:</label>
                                                            <input
                                                                type="url"
                                                                id={`editVariantImageUrl-${index}`}
                                                                name="imageUrl"
                                                                value={variant.imageUrl}
                                                                onChange={(e) => handleVariantInputChange(index, e)}
                                                                onBlur={(e) => { // Sube la imagen al perder el foco si la URL cambió
                                                                    // Solo intenta subir si la URL no está vacía y ha cambiado
                                                                    const currentVariant = showAddModal ? newProduct.variants[index] : editingProduct.variants[index];
                                                                    if (e.target.value && e.target.value.trim() !== currentVariant.imageUrl && !e.target.value.includes('res.cloudinary.com')) {
                                                                        uploadVariantImageToCloud(e.target.value, index);
                                                                    }
                                                                }}
                                                                className={`shadow appearance-none border ${formErrors[`variant-${index}-imageUrl`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-xs text-neutral-light`}
                                                                placeholder="Ej. https://tuservicio.com/variante_azul.jpg"
                                                            />
                                                            {formErrors[`variant-${index}-imageUrl`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-imageUrl`]}</p>}
                                                        </div>
                                                        {(variant.imageUrl) ? (
                                                            <div className="mt-2 border border-neutral-gray-600 rounded-lg p-2 text-center bg-neutral-gray-800">
                                                                <p className="text-neutral-gray-400 text-xs mb-1">Previsualización:</p>
                                                                <img
                                                                    src={variant.imageUrl}
                                                                    alt={`Variante ${index + 1}`}
                                                                    className="max-w-full h-auto max-h-32 object-contain mx-auto rounded-md"
                                                                    onError={(e) => { e.target.onerror = null; e.target.src = 'https://placehold.co/150x100/2D3748/F8F8F2?text=Error'; }}
                                                                />
                                                            </div>
                                                        ) : (
                                                            <div className="mt-2 border border-neutral-gray-600 rounded-lg p-2 text-center bg-neutral-gray-800 text-neutral-gray-400 text-xs py-4">
                                                                Sin imagen de variante.
                                                            </div>
                                                        )}
                                                    </div>
                                                </div>
                                            </div>
                                        ))}
                                        <button
                                            type="button"
                                            onClick={addVariant}
                                            className="w-full bg-success-green hover:bg-green-700 text-deep-night-blue font-bold py-2 px-4 rounded-lg flex items-center justify-center transition duration-200 shadow-md focus:outline-none focus:ring-2 focus:ring-green-500 mt-4"
                                        >
                                            <Plus size={20} className="mr-2" /> Añadir Variante
                                        </button>
                                    </div>
                                </div>
                            )}
                        </div>
                        {/* --- FIN DE LA SECCIÓN DE OPCIONES AVANZADAS (EDITAR) --- */}

                        {/* Botón de Envío del Formulario */}
                        <div className="md:col-span-2 text-right">
                            <button
                                type="submit"
                                className="bg-action-blue hover:bg-blue-700 text-neutral-light font-bold py-3 px-8 rounded-lg shadow-md transition duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-500 focus:ring-opacity-50 flex items-center justify-center float-right"
                                // Deshabilita el botón mientras carga o si alguna imagen se está subiendo (principal o de variante)
                                disabled={loading || isUploadingMainImage || Object.values(variantImageUploading).some(val => val)}
                            >
                                {loading ? <Loader2 size={20} className="mr-2 animate-spin" /> : <Save size={20} className="mr-2" />} Actualizar Producto
                            </button>
                        </div>
                    </form>
                )}
            </ProductModal>

            <h3 className="text-3xl font-semibold text-neutral-light mb-6 border-b border-neutral-gray-700 pb-3">Lista de Productos</h3>

            {/* Renderizado condicional para carga, no hay productos o lista de productos */}
            {loading && !products.length ? (
                <div className="flex justify-center items-center h-48">
                    <Loader2 size={48} className="animate-spin text-copper-rose-accent" />
                    <span className="sr-only">Cargando...</span>
                </div>
            ) : products.length === 0 ? (
                <p className="text-neutral-gray-300 text-lg text-center mt-10">No hay productos que coincidan con la búsqueda o el filtro. ¡Intenta añadir uno!</p>
            ) : (
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                    {products.map((product) => (
                        <div key={product._id} className="bg-deep-night-blue p-6 rounded-lg shadow-lg border border-action-blue-light flex flex-col justify-between transform transition duration-300 hover:scale-[1.02] hover:shadow-2xl">
                            <div>

                                {/* Confirm Modal (Tu modal de confirmación existente) */}
                                {/* ... (tu modal de confirmación existente) ... */}
    
                                {/* Imagen del Producto (primero la imagen principal del producto, luego la primera variante, luego el fallback) */}
                                <div className="w-full h-48 mb-4 bg-neutral-gray-800 rounded-md overflow-hidden flex items-center justify-center">
                                    <img
                                        src={product.imageUrl || ((product.variants && product.variants.length > 0 && product.variants[0].imageUrl) ? product.variants[0].imageUrl : 'https://placehold.co/600x400/2D3748/F8F8F2?text=Sin+Imagen')}
                                        alt={product.name || 'Producto'}
                                        className="object-cover w-full h-full"
                                        onError={(e) => {
                                            e.target.onerror = null;
                                            e.target.src = 'https://placehold.co/600x400/2D3748/F8F8F2?text=Error+Cargando+Imagen';
                                            e.target.classList.add('border-red-500', 'border-2');
                                        }}
                                    />
                                </div>
                                <h4 className="text-xl font-bold text-copper-rose-accent mb-2 truncate">{product.name}</h4>
                                <p className="text-neutral-light mb-1 text-sm"><span className="font-semibold text-action-blue">SKU:</span> {product.sku || 'N/A'}</p>
                                {product.category && <p className="text-neutral-light mb-1 text-sm"><span className="font-semibold text-action-blue">Categoría:</span> <span className="bg-neutral-gray-700 text-neutral-light px-2 py-0.5 rounded-full text-xs font-medium">{product.category}</span></p>}
                                {product.brand && <p className="text-neutral-light mb-1 text-sm"><span className="font-semibold text-action-blue">Marca:</span> {product.brand}</p>}
                                {product.supplier && <p className="text-neutral-light mb-1 text-sm"><span className="font-semibold text-action-blue">Proveedor:</span> {product.supplier}</p>}
                                {product.description && <p className="text-neutral-gray-300 mb-2 text-sm line-clamp-2">{product.description}</p>}

                                {/* Mostrar información del producto principal si NO tiene variantes */}
                                {!product.variants || product.variants.length === 0 ? (
                                    <>
                                        <p className="text-neutral-light mb-1"><span className="font-semibold">Unidad:</span> {product.unitOfMeasure}</p>
                                        <p className="text-neutral-light mb-1"><span className="font-semibold">Precio de Venta:</span> <span className="text-success-green font-bold text-lg">${parseFloat(product.price).toFixed(2)}</span></p>
                                        <p className="text-neutral-light mb-1"><span className="font-semibold">Costo Unitario:</span> <span className="text-yellow-400 font-bold">${parseFloat(product.costPrice).toFixed(2)}</span></p>
                                        <p className="text-neutral-light mb-3"><span className="font-semibold">Stock:</span> <span className={`${product.stock <= 5 ? 'text-red-400' : 'text-yellow-400'} font-bold`}>{product.stock} unidades</span></p>
                                        {product.color && <p className="text-neutral-light mb-1 text-sm"><span className="font-semibold">Color:</span> {product.color}</p>}
                                        {product.size && <p className="text-neutral-light mb-1 text-sm"><span className="font-semibold">Talla:</span> {product.size}</p>}
                                        {product.material && <p className="text-neutral-light mb-1 text-sm"><span className="font-semibold">Material:</span> {product.material}</p>}
                                        {product.isPerishable && <p className="text-neutral-light mb-1 text-sm"><span className="font-semibold">Perecedero:</span> Sí</p>}
                                        {product.reorderThreshold > 0 && <p className="text-neutral-light mb-1 text-sm"><span className="font-semibold">Umbral de Reapro.:</span> {product.reorderThreshold}</p>}
                                        {product.isPerishable && product.optimalMaxStock > 0 && <p className="text-neutral-light mb-1 text-sm"><span className="font-semibold">Stock Óptimo Máx:</span> {product.optimalMaxStock}</p>}
                                        {product.isPerishable && product.shelfLifeDays > 0 && <p className="text-neutral-light mb-1 text-sm"><span className="font-semibold">Vida Útil:</span> {product.shelfLifeDays} días</p>}
                                    </>
                                ) : (
                                    // Si tiene variantes, muestra el resumen de variantes y el botón para expandir/colapsar
                                    <div className="mt-2 pt-2 border-t border-neutral-gray-700">
                                        <div className="flex justify-between items-center mb-2">
                                            <p className="text-neutral-light font-bold text-sm">Variantes ({product.variants.length}):</p>
                                            <button
                                                onClick={() => toggleProductExpansion(product._id)}
                                                className="text-action-blue hover:text-blue-500 transition duration-200"
                                                title={expandedProducts.has(product._id) ? 'Colapsar variantes' : 'Expandir variantes'}
                                            >
                                                {expandedProducts.has(product._id) ? (
                                                    <ChevronUp size={20} />
                                                ) : (
                                                    <ChevronDown size={20} />
                                                )}
                                            </button>
                                        </div>
                                        {/* Sección de variantes expandida condicionalmente */}
                                        {expandedProducts.has(product._id) && (
                                            <div className="mt-3 grid grid-cols-1 gap-3 animate-fade-in-down">
                                                {product.variants.map((variant, idx) => (
                                                    <div key={variant._id || idx} className="bg-neutral-gray-700 p-3 rounded-md border border-neutral-gray-600 shadow-sm flex flex-col sm:flex-row items-start sm:items-center gap-3">
                                                        {/* Imagen de la variante */}
                                                        <div className="w-16 h-16 sm:w-16 sm:h-16 flex-shrink-0 bg-neutral-gray-900 rounded-md overflow-hidden">
                                                            <img
                                                                src={variant.imageUrl || 'https://placehold.co/100x100/2D3748/F8F8F2?text=Var+Img'}
                                                                alt={variant.name || 'Variante'}
                                                                className="object-cover w-full h-full"
                                                                onError={(e) => { e.target.onerror = null; e.target.src = 'https://placehold.co/100x100/2D3748/F8F8F2?text=Error'; }}
                                                            />
                                                        </div>
                                                        <div className="flex-grow">
                                                            <p className="text-neutral-light text-base font-semibold mb-1">{variant.name}</p>
                                                            <p className="text-neutral-gray-400 text-xs">SKU: {variant.sku}</p>
                                                            <p className="text-success-green font-bold text-sm mt-1">Precio: ${parseFloat(variant.price).toFixed(2)}</p>
                                                            <p className="text-yellow-400 text-sm">Stock: {variant.stock} {variant.unitOfMeasure}</p>
                                                            <div className="flex flex-wrap gap-x-3 text-neutral-gray-400 text-xs mt-1">
                                                                {variant.color && <span>Color: {variant.color}</span>}
                                                                {variant.size && <span>Talla: {variant.size}</span>}
                                                                {variant.material && <span>Material: {variant.material}</span>}
                                                                {variant.isPerishable && <span className="text-orange-300">Perecedero</span>}
                                                                {variant.reorderThreshold > 0 && <span>Umbral: {variant.reorderThreshold}</span>}
                                                                {variant.isPerishable && variant.optimalMaxStock > 0 && <span>Óptimo Máx: {variant.optimalMaxStock}</span>}
                                                                {variant.isPerishable && variant.shelfLifeDays > 0 && <span>Vida Útil: {variant.shelfLifeDays} días</span>}
                                                            </div>
                                                        </div>
                                                    </div>
                                                ))}
                                            </div>
                                        )}
                                    </div>
                                )}
                            </div>
                            {/* Botones de Acción */}
                            <div className="flex justify-end gap-2 mt-4">
                                <button
                                    onClick={() => handleEditClick(product)}
                                    className="bg-neutral-gray-700 text-neutral-light px-4 py-2 rounded-lg text-sm font-medium hover:bg-neutral-gray-600 transition duration-200 flex items-center shadow-md focus:outline-none focus:ring-2 focus:ring-neutral-gray-500"
                                >
                                    <Edit size={16} className="mr-1"/> Editar
                                </button>
                                <button
                                    onClick={() => confirmDeleteProduct(product._id)}
                                    className="bg-red-600 text-neutral-light px-4 py-2 rounded-lg text-sm font-medium hover:bg-red-700 transition duration-200 flex items-center shadow-md focus:outline-none focus:ring-2 focus:ring-red-500"
                                >
                                    <Trash2 size={16} className="mr-1"/> Eliminar
                                </button>
                            </div>
                        </div>
                    ))}
                </div>
            )}

                        {/* Sección de Reporte de Inventario por Variante */}
                        {showVariantReport && variantReport.length > 0 && (
                            <div className="mt-12 bg-deep-night-blue p-8 rounded-lg shadow-2xl border border-action-blue-light">
                                <h3 className="text-3xl font-bold text-copper-rose-accent mb-6 text-center border-b border-neutral-gray-600 pb-4">
                                    Reporte de Inventario por Variante</h3>

                        {loading ? (
                            <div className="flex justify-center items-center h-48">
                                <Loader2 size={48} className="animate-spin text-action-blue" />
                                <p className="text-neutral-light ml-3 text-lg">Cargando reporte...</p>
                            </div>
                        ) : (
                            <div className="overflow-x-auto rounded-lg shadow-lg border border-neutral-gray-700">
                                <table className="min-w-full divide-y divide-neutral-gray-600">
                                    <thead className="bg-neutral-gray-800">
                                        <tr>
                                            <th scope="col" className="px-6 py-3 text-left text-xs font-semibold text-neutral-light uppercase tracking-wider">
                                                Producto Principal
                                            </th>
                                            <th scope="col" className="px-6 py-3 text-left text-xs font-semibold text-neutral-light uppercase tracking-wider">
                                                Variante
                                            </th>
                                            <th scope="col" className="px-6 py-3 text-left text-xs font-semibold text-neutral-light uppercase tracking-wider">
                                                SKU Variante
                                            </th>
                                            <th scope="col" className="px-6 py-3 text-left text-xs font-semibold text-neutral-light uppercase tracking-wider">
                                                Stock
                                            </th>
                                            <th scope="col" className="px-6 py-3 text-left text-xs font-semibold text-neutral-light uppercase tracking-wider">
                                                Precio Venta Unitario
                                            </th>
                                            <th scope="col" className="px-6 py-3 text-left text-xs font-semibold text-neutral-light uppercase tracking-wider">
                                                Valor Total (Stock * Precio)
                                            </th>
                                            <th scope="col" className="px-6 py-3 text-left text-xs font-semibold text-neutral-light uppercase tracking-wider">
                                                Costo Unitario
                                            </th>
                                            <th scope="col" className="px-6 py-3 text-left text-xs font-semibold text-neutral-light uppercase tracking-wider">
                                                Costo Total (Stock * Costo)
                                            </th>
                                            <th scope="col" className="px-6 py-3 text-left text-xs font-semibold text-neutral-light uppercase tracking-wider">
                                                Perecedero
                                            </th>
                                            <th scope="col" className="px-6 py-3 text-left text-xs font-semibold text-neutral-light uppercase tracking-wider">
                                                Umbral Reapro.
                                            </th>
                                            <th scope="col" className="px-6 py-3 text-left text-xs font-semibold text-neutral-light uppercase tracking-wider">
                                                Vida Útil (Días)
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody className="bg-dark-charcoal divide-y divide-neutral-gray-700 text-neutral-light">
                                        {variantReport.map((item) => (
                                            <tr key={item.variantId} className="hover:bg-neutral-gray-800 transition-colors duration-200">
                                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-copper-rose-accent">{item.productName}</td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm">{item.variantName}</td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-neutral-gray-400">{item.variantSku}</td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm font-semibold">{item.variantStock}</td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-success-green">${parseFloat(item.variantPrice).toFixed(2)}</td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm font-bold text-success-green-light">${parseFloat(item.variantTotalValue).toFixed(2)}</td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-yellow-400">${parseFloat(item.variantCostPrice).toFixed(2)}</td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm font-bold text-yellow-300">${parseFloat(item.variantTotalCostValue).toFixed(2)}</td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm">{item.variantIsPerishable ? 'Sí' : 'No'}</td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm">{item.variantReorderThreshold}</td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm">{item.variantShelfLifeDays > 0 ? `${item.variantShelfLifeDays} días` : 'N/A'}</td>
                                            </tr>
                                        ))}
                                    </tbody>
                                    {/* Fila para mostrar Totales Generales (Opcional, se puede añadir después) */}
                                    <tfoot className="bg-neutral-gray-800">
                                        <tr>
                                            <td colSpan="5" className="px-6 py-3 text-right text-base font-semibold text-neutral-light">Total Valor de Inventario:</td>
                                            <td className="px-6 py-3 whitespace-nowrap text-base font-bold text-success-green-light">
                                                ${parseFloat(variantReport.reduce((sum, item) => sum + item.variantTotalValue, 0)).toFixed(2)}
                                            </td>
                                            <td colSpan="2" className="px-6 py-3 text-right text-base font-semibold text-neutral-light">Total Costo de Inventario:</td>
                                            <td className="px-6 py-3 whitespace-nowrap text-base font-bold text-yellow-300">
                                                ${parseFloat(variantReport.reduce((sum, item) => sum + item.variantTotalCostValue, 0)).toFixed(2)}
                                            </td>
                                            <td colSpan="2"></td> {/* Columnas vacías para los últimos encabezados */}
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        )}
                    </div>
                )}

            {/* Controles de Paginación */}
            {totalPages > 1 && (
                <div className="flex justify-center items-center space-x-3 mt-8 text-neutral-light">
                    <button
                        onClick={goToPrevPage}
                        disabled={currentPage === 1 || loading}
                        className="bg-action-blue hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed transition duration-200 flex items-center justify-center"
                    >
                        <ChevronLeft size={20} />
                    </button>
                    <span className="text-lg font-semibold text-copper-rose-accent">Página {currentPage} de {totalPages}</span>
                    <button
                        onClick={goToNextPage}
                        disabled={currentPage === totalPages || loading}
                        className="bg-action-blue hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed transition duration-200 flex items-center justify-center"
                    >
                        <ChevronRight size={20} />
                    </button>
                </div>
            )}
        </div>
    );
};

export default InventoryPage;
