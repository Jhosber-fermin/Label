import React, { useState, useEffect, useCallback, useRef } from 'react';
import axiosInstance from '../api/axiosInstance';
import ProductModal from './ProductModal';
import { PlusSquare, Edit, Trash2, XCircle, Save, Search, ChevronLeft, ChevronRight, Loader2, Info, Upload, ChevronDown, ChevronUp, Plus, X } from 'lucide-react'; // Changed Minus to X

const InventoryPage = () => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [successMessage, setSuccessMessage] = useState('');
    const [showAddModal, setShowAddModal] = useState(false);
    const [showEditModal, setShowEditModal] = useState(false);
    const [editingProduct, setEditingProduct] = useState(null);
    const [showConfirmModal, setShowConfirmModal] = useState(false);
    const [productToDelete, setProductToDelete] = useState(null);

    const [searchTerm, setSearchTerm] = useState('');
    const [selectedCategory, setSelectedCategory] = useState('Todas las Categorías');
    const [currentPage, setCurrentPage] = useState(1);
    const [totalPages, setTotalPages] = useState(1);
    const [limit] = useState(10); // Fixed limit for pagination

    const [availableCategories, setAvailableCategories] = useState([]);
    const [availableBrands, setAvailableBrands] = useState(['Todas las Marcas']);
    const [selectedBrand, setSelectedBrand] = useState('Todas las Marcas');
    const [availableSuppliers, setAvailableSuppliers] = useState(['Todos los Proveedores']);
    const [selectedSupplier, setSelectedSupplier] = useState('Todos los Proveedores');
    const [availableVariantColors, setAvailableVariantColors] = useState(['Todos los Colores']);
    const [selectedVariantColor, setSelectedVariantColor] = useState('Todos los Colores');
    const [availableVariantSizes, setAvailableVariantSizes] = useState(['Todas las Tallas']);
    const [selectedVariantSize, setSelectedVariantSize] = useState('Todas las Tallas');

    const [globalProductSuggestions, setGlobalProductSuggestions] = useState([]);
    const [showGlobalSuggestions, setShowGlobalSuggestions] = useState(false);
    const [noGlobalSuggestionsFound, setNoGlobalSuggestionsFound] = useState(false);
    const debounceTimeoutRef = useRef(null);

    const [autoGeneratedSku, setAutoGeneratedSku] = useState('');

    const [imageFile, setImageFile] = useState(null);
    const [imagePreviewUrl, setImagePreviewUrl] = useState('');
    const [isUploadingMainImage, setIsUploadingMainImage] = useState(false); // Loading state for main image
    const [variantImageUploading, setVariantImageUploading] = useState({}); // Loading states for variant images by index

    const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);

    // State for individual field errors
    const [formErrors, setFormErrors] = useState({});

    const [newProduct, setNewProduct] = useState({
        name: '', description: '', category: '', price: '', stock: '',
        costPrice: '', sku: '', unitOfMeasure: 'unidad', brand: '', supplier: '', imageUrl: '',
        color: '', size: '', material: '', variants: []
    });

    const unitOfMeasureOptions = ['unidad', 'kg', 'litro', 'metro', 'paquete', 'caja', 'docena', 'otro'];

    // Displays a message to the user, either success or error, and clears it after 5 seconds.
    const displayMessage = (msg, type) => {
        if (type === 'success') {
            setSuccessMessage(msg);
            setError('');
        } else {
            setError(msg);
            setSuccessMessage('');
        }
        setTimeout(() => {
            setSuccessMessage('');
            setError('');
        }, 5000);
    };

    // Generates a unique SKU from a product name by cleaning, truncating, and adding a hash.
    const generateSkuFromName = useCallback((name) => {
        if (!name || name.trim() === '') {
            return '';
        }
        const cleanedName = name
            .normalize("NFD").replace(/[\u0300-\u036f]/g, "") // Remove accents
            .replace(/[^a-zA-Z0-9\s]/g, '') // Remove special characters
            .trim()
            .toUpperCase()
            .split(/\s+/)
            .slice(0, 4)
            .join('-');
        const hash = Math.random().toString(36).substring(2, 6).toUpperCase();
        return `${cleanedName.substring(0, 15)}-${hash}`;
    }, []);

    // Validates individual form fields based on product type (main or variant) and sets error messages.
    const validateField = (name, value, currentProductState, index = null) => {
        let message = '';
        const isVariantField = index !== null;

        if (isVariantField) {
            // Variant specific validations
            if (name === 'name' && value.trim() === '') message = 'El nombre de la variante es obligatorio.';
            if (name === 'sku' && value.trim() === '' && !currentProductState.variants[index]?.autoGeneratedVariantSku) message = 'El SKU de la variante es obligatorio o se debe generar automáticamente.';
            if ((name === 'price' || name === 'costPrice' || name === 'stock') && (value === '' || value === null || value === undefined)) message = 'Campo obligatorio.';
            else if ((name === 'price' || name === 'costPrice' || name === 'stock') && isNaN(Number(value))) message = 'Debe ser un número válido.';
            else if (name === 'price' && Number(value) <= 0) message = 'El precio debe ser positivo.';
            else if ((name === 'costPrice' || name === 'stock') && Number(value) < 0) message = 'Debe ser un número no negativo.';
            if (name === 'unitOfMeasure' && value.trim() === '') message = 'La unidad de medida es obligatoria.';
        } else {
            // Main product specific validations
            if (name === 'name' && value.trim() === '') message = 'El nombre es obligatorio.';
            if (name === 'category' && value.trim() === '') message = 'La categoría es obligatoria.';
            // SKU validation for main product (if no variants exist)
            if (name === 'sku' && value.trim() === '' && !autoGeneratedSku && currentProductState.variants.length === 0) message = 'El SKU es obligatorio si no hay variantes y no se genera automáticamente.';

            // Only validate price, stock, costPrice, unitOfMeasure if no variants exist
            if (currentProductState.variants.length === 0) {
                if ((name === 'price' || name === 'costPrice' || name === 'stock') && (value === '' || value === null || value === undefined)) message = 'Campo obligatorio.';
                else if ((name === 'price' || name === 'costPrice' || name === 'stock') && isNaN(Number(value))) message = 'Debe ser un número válido.';
                else if (name === 'price' && Number(value) <= 0) message = 'El precio debe ser positivo.';
                else if ((name === 'costPrice' || name === 'stock') && Number(value) < 0) message = 'Debe ser un número no negativo.';
                if (name === 'unitOfMeasure' && value.trim() === '') message = 'La unidad de medida es obligatoria.';
            }
        }
        return message;
    };

    // Handles changes in main product input fields, including SKU auto-generation and global suggestions.
    const handleInputChange = (e) => {
        const { name, value } = e.target;
        const targetStateSetter = showAddModal ? setNewProduct : setEditingProduct;
        const targetProductState = showAddModal ? newProduct : editingProduct;

        targetStateSetter(prev => ({ ...prev, [name]: value }));

        // Validate and set error for the changed field
        setFormErrors(prev => ({ ...prev, [name]: validateField(name, value, targetProductState) }));

        // Logic for SKU auto-generation and global product suggestions (only for add modal's 'name' field)
        if (name === 'name' && showAddModal) {
            if (value.trim().length >= 2) {
                // If SKU is not manually entered, try to auto-generate
                if (newProduct.sku.trim() === '') {
                    setAutoGeneratedSku(generateSkuFromName(value));
                }
                // Debounce for global product suggestions to avoid excessive API calls
                if (debounceTimeoutRef.current) clearTimeout(debounceTimeoutRef.current);
                debounceTimeoutRef.current = setTimeout(() => {
                    fetchGlobalProductSuggestions(value);
                }, 300);
            } else {
                // Clear suggestions and auto-generated SKU if name is too short
                setAutoGeneratedSku('');
                setGlobalProductSuggestions([]);
                setShowGlobalSuggestions(false);
                setNoGlobalSuggestionsFound(false);
            }
        }

        // Logic to auto-generate SKU if SKU field is emptied and name exists (for both add and edit)
        if (name === 'sku' && value.trim() === '') {
            if (targetProductState.name.trim().length >= 2 && !globalProductSuggestions.length) {
                setAutoGeneratedSku(generateSkuFromName(targetProductState.name));
            } else {
                setAutoGeneratedSku(''); // Clear auto SKU if empty and name is too short or suggestions are active
            }
        } else if (name === 'sku' && value.trim() !== '') {
            setAutoGeneratedSku(''); // Clear auto SKU if user types manually into SKU field
        }

        // If image URL field is edited, clear local file selection
        if (name === 'imageUrl') {
            setImageFile(null); // Clear any file selected
            setImagePreviewUrl(value); // Update preview to the entered URL
        }

        // Clear general messages on any input change
        setError('');
        setSuccessMessage('');
    };

    // Handles changes in variant product input fields, including variant SKU auto-generation.
    const handleVariantInputChange = (index, e) => {
        const { name, value } = e.target;
        const targetProductState = showAddModal ? newProduct : editingProduct;
        const setTargetProductState = showAddModal ? setNewProduct : setEditingProduct;

        const updatedVariants = [...targetProductState.variants];
        let updatedVariant = { ...updatedVariants[index], [name]: value };

        // SKU generation logic for variants
        if (name === 'name') {
            if (!updatedVariant.sku || updatedVariant.sku.trim() === '') {
                updatedVariant.autoGeneratedVariantSku = generateSkuFromName(value);
            } else {
                updatedVariant.autoGeneratedVariantSku = ''; // Clear auto SKU if user types manually
            }
        } else if (name === 'sku') {
            if (value.trim() !== '') {
                updatedVariant.autoGeneratedVariantSku = ''; // Clear auto SKU if user types manually
            } else {
                if (updatedVariant.name && updatedVariant.name.trim() !== '') {
                    updatedVariant.autoGeneratedVariantSku = generateSkuFromName(updatedVariant.name);
                } else {
                    updatedVariant.autoGeneratedVariantSku = '';
                }
            }
        }

        updatedVariants[index] = updatedVariant;
        setTargetProductState(prev => ({ ...prev, variants: updatedVariants }));

        // Validate and set error for variant field
        setFormErrors(prev => ({
            ...prev,
            [`variant-${index}-${name}`]: validateField(name, value, targetProductState, index)
        }));

        setError('');
        setSuccessMessage('');
    };

    // Handles changes when a local image file is selected for the main product.
    const handleImageFileChange = (e) => {
        const file = e.target.files[0];
        const targetStateSetter = showAddModal ? setNewProduct : setEditingProduct;

        if (file) {
            setImageFile(file);
            setImagePreviewUrl(URL.createObjectURL(file)); // Create a temporary URL for local file preview
            targetStateSetter(prev => ({ ...prev, imageUrl: '' })); // Clear the URL text field if a file is selected
            setError(''); // Clear any previous image errors
            setFormErrors(prev => ({ ...prev, imageUrl: '' })); // Clear specific error for imageUrl
        } else {
            setImageFile(null);
            // If clearing the file input, and there's an existing URL in the product state, set it back as preview.
            // Otherwise, clear the preview.
            const currentProduct = showAddModal ? newProduct : editingProduct;
            setImagePreviewUrl(currentProduct?.imageUrl || ''); // Retain existing URL if no new file
            targetStateSetter(prev => ({ ...prev, imageUrl: currentProduct?.imageUrl || '' })); // Keep existing URL in state
        }
    };

    // Handles changes when a local image file is selected for a variant.
    const handleVariantImageFileChange = async (index, e) => {
        const file = e.target.files[0];
        if (file) {
            setVariantImageUploading(prev => ({ ...prev, [index]: true }));
            const result = await uploadImageToCloud(file, true, index); // Call the general upload function
            setVariantImageUploading(prev => ({ ...prev, [index]: false }));
            if (!result.success) {
                setFormErrors(prev => ({
                    ...prev,
                    [`variant-${index}-imageUrl`]: 'Error al subir imagen de variante.'
                }));
            }
        }
    };

    // Handles uploading image file or processing image URL to Cloudinary.
    const uploadImageToCloud = async (fileOrUrl, isVariant = false, variantIndex = null) => {
        const formData = new FormData();
        if (fileOrUrl instanceof File) {
            formData.append('image', fileOrUrl); // 'image' is the field name Multer expects on the backend
        } else if (typeof fileOrUrl === 'string' && fileOrUrl.trim() !== '') {
            // If it's already a Cloudinary URL, skip re-uploading and just return it.
            if (fileOrUrl.includes('res.cloudinary.com')) {
                displayMessage('La imagen ya está alojada.', 'success');
                return { success: true, url: fileOrUrl };
            }
            formData.append('imageUrl', fileOrUrl); // If it's a new URL, send it to the backend for processing
        } else {
            return { success: true, url: '' }; // No valid file or URL to upload, or intent to clear image
        }

        try {
            if (!isVariant) setIsUploadingMainImage(true); // Activate loading for main image
            const response = await axiosInstance.post('/upload', formData, {
                headers: {
                    'Content-Type': 'multipart/form-data' // Important for sending files
                }
            });
            displayMessage('Imagen procesada y alojada exitosamente.', 'success');
            const uploadedUrl = response.data.imageUrl;

            // Update the image URL in the corresponding state (main product or specific variant)
            if (isVariant && variantIndex !== null) {
                const targetStateSetter = showAddModal ? setNewProduct : setEditingProduct;
                targetStateSetter(prev => {
                    const updatedVariants = [...prev.variants];
                    if (updatedVariants[variantIndex]) {
                        updatedVariants[variantIndex] = { ...updatedVariants[variantIndex], imageUrl: uploadedUrl };
                    }
                    return { ...prev, variants: updatedVariants };
                });
                setFormErrors(prev => ({ ...prev, [`variant-${variantIndex}-imageUrl`]: '' })); // Clear variant image error
            } else { // It's the main product image
                const targetStateSetter = showAddModal ? setNewProduct : setEditingProduct;
                targetStateSetter(prev => ({ ...prev, imageUrl: uploadedUrl }));
                setImagePreviewUrl(uploadedUrl); // Update main preview URL
                setImageFile(null); // Clear local file after successful upload
                setFormErrors(prev => ({ ...prev, imageUrl: '' })); // Clear main image error
            }
            return { success: true, url: uploadedUrl }; // Return the Cloudinary URL
        } catch (err) {
            const errorMessage = err.response?.data?.message || 'Error al procesar la imagen. Por favor, inténtalo de nuevo.';
            displayMessage(errorMessage, 'error');
            if (isVariant && variantIndex !== null) {
                setFormErrors(prev => ({ ...prev, [`variant-${variantIndex}-imageUrl`]: 'Error al subir imagen.' }));
                const targetStateSetter = showAddModal ? setNewProduct : setEditingProduct;
                targetStateSetter(prev => {
                    const updatedVariants = [...prev.variants];
                    if (updatedVariants[variantIndex]) {
                        updatedVariants[variantIndex] = { ...updatedVariants[variantIndex], imageUrl: '' }; // Clear URL if upload fails
                    }
                    return { ...prev, variants: updatedVariants };
                });
            } else {
                setFormErrors(prev => ({ ...prev, imageUrl: 'Error al subir imagen.' }));
                const targetStateSetter = showAddModal ? setNewProduct : setEditingProduct;
                targetStateSetter(prev => ({ ...prev, imageUrl: '' })); // Clear URL if upload fails
                setImagePreviewUrl(''); // Clear main preview if upload fails
                setImageFile(null); // Clear local file as it failed
            }
            return { success: false, error: errorMessage };
        } finally {
            if (!isVariant) setIsUploadingMainImage(false); // Deactivate loading for main image
        }
    };

    // Helper function to upload variant images to Cloudinary, used for clarity.
    const uploadVariantImageToCloud = async (fileOrUrl, variantIndex) => {
        setVariantImageUploading(prev => ({ ...prev, [variantIndex]: true }));
        const result = await uploadImageToCloud(fileOrUrl, true, variantIndex);
        setVariantImageUploading(prev => ({ ...prev, [variantIndex]: false }));
        return result;
    };

    // Fetches products from the backend based on current filters and pagination.
    const fetchProducts = useCallback(async () => {
        try {
            setLoading(true);
            setError('');
            setSuccessMessage('');

            const queryParams = new URLSearchParams();
            if (searchTerm) queryParams.append('searchTerm', searchTerm);
            if (selectedCategory && selectedCategory !== 'Todas las Categorías') queryParams.append('category', selectedCategory);
            if (selectedBrand && selectedBrand !== 'Todas las Marcas') queryParams.append('brand', selectedBrand);
            if (selectedSupplier && selectedSupplier !== 'Todos los Proveedores') queryParams.append('supplier', selectedSupplier);
            if (selectedVariantColor && selectedVariantColor !== 'Todos los Colores') queryParams.append('variantColor', selectedVariantColor);
            if (selectedVariantSize && selectedVariantSize !== 'Todas las Tallas') queryParams.append('variantSize', selectedVariantSize);

            queryParams.append('page', currentPage);
            queryParams.append('limit', limit);

            const response = await axiosInstance.get(`/products?${queryParams.toString()}`);

            setProducts(response.data.products);
            setTotalPages(response.data.pagination.totalPages);
        } catch (err) {
            const errorMessage = err.response?.data?.message || 'Error al cargar productos. Por favor, inténtalo de nuevo.';
            displayMessage(errorMessage, 'error');
            setProducts([]);
            setTotalPages(1);
        } finally {
            setLoading(false);
        }
    }, [searchTerm, selectedCategory, selectedBrand, selectedSupplier, selectedVariantColor, selectedVariantSize, currentPage, limit]);

    // Fetches all available categories, brands, suppliers, colors, and sizes for filter dropdowns.
    const fetchFilterOptions = useCallback(async () => {
        try {
            // Fetch all products to get all unique filter options (setting a very high limit)
            const response = await axiosInstance.get('/products?limit=9999');
            const allProducts = response.data.products;

            const categories = [...new Set(allProducts.map(p => p.category).filter(Boolean))].sort();
            setAvailableCategories(['Todas las Categorías', ...categories]);

            const brands = [...new Set(allProducts.map(p => p.brand).filter(Boolean))].sort();
            setAvailableBrands(['Todas las Marcas', ...brands]);

            const suppliers = [...new Set(allProducts.map(p => p.supplier).filter(Boolean))].sort();
            setAvailableSuppliers(['Todos los Proveedores', ...suppliers]);

            const colors = new Set();
            const sizes = new Set();
            allProducts.forEach(p => {
                // Collect colors and sizes from variants first
                if (p.variants && p.variants.length > 0) {
                    p.variants.forEach(v => {
                        if (v.color) colors.add(v.color);
                        if (v.size) sizes.add(v.size);
                    });
                } else {
                    // If no variants, collect from the main product attributes
                    if (p.color) colors.add(p.color);
                    if (p.size) sizes.add(p.size);
                }
            });
            setAvailableVariantColors(['Todos los Colores', ...Array.from(colors).sort()]);
            setAvailableVariantSizes(['Todas las Tallas', ...Array.from(sizes).sort()]);

        } catch (err) {
            console.error("Error al cargar opciones de filtro:", err.response?.data?.message || err.message);
        }
    }, []);

    // Effect hook to fetch products and filter options on component mount and when dependencies change.
    useEffect(() => {
        fetchProducts();
        fetchFilterOptions();
    }, [fetchProducts, fetchFilterOptions]);


    // Fetches product suggestions from a global catalog based on the search term.
    const fetchGlobalProductSuggestions = useCallback(async (nameTerm) => {
        if (nameTerm.trim().length < 2) {
            // If search term is too short, clear suggestions and related states
            setGlobalProductSuggestions([]);
            setShowGlobalSuggestions(false);
            setNoGlobalSuggestionsFound(false);
            setAutoGeneratedSku('');
            return;
        }

        try {
            const response = await axiosInstance.get(`/globalproducts?searchTerm=${nameTerm}`);
            if (response.data.length > 0) {
                setGlobalProductSuggestions(response.data);
                setShowGlobalSuggestions(true);
                setNoGlobalSuggestionsFound(false);
                setAutoGeneratedSku(''); // Clear auto SKU if suggestions are found
            } else {
                setGlobalProductSuggestions([]);
                setShowGlobalSuggestions(false);
                setNoGlobalSuggestionsFound(true);
                setAutoGeneratedSku(generateSkuFromName(nameTerm)); // Auto-generate if no suggestions found
                setTimeout(() => setNoGlobalSuggestionsFound(false), 3000); // Hide "no matches" message after 3 seconds
            }
        } catch (err) {
            console.error("Error al buscar sugerencias de productos globales:", err);
            setGlobalProductSuggestions([]);
            setShowGlobalSuggestions(false);
            setNoGlobalSuggestionsFound(false);
            setAutoGeneratedSku(generateSkuFromName(nameTerm)); // Auto-generate on error as well
        }
    }, [generateSkuFromName]);

    // Handles selecting a product from the global catalog suggestions.
    const handleSelectGlobalProduct = (suggestedProduct) => {
        setNewProduct({
            ...newProduct,
            name: suggestedProduct.name,
            description: suggestedProduct.description || '',
            category: suggestedProduct.category || '',
            sku: suggestedProduct.sku || '',
            unitOfMeasure: suggestedProduct.unitOfMeasure || 'unidad',
            brand: suggestedProduct.brand || '',
            supplier: suggestedProduct.supplier || '',
            imageUrl: suggestedProduct.imageUrl || '', // Bring main suggestion image URL
            color: suggestedProduct.color || '',    // Apply main product color
            size: suggestedProduct.size || '',      // Apply main product size
            material: suggestedProduct.material || '', // Apply main product material
            variants: suggestedProduct.variants ? suggestedProduct.variants.map(v => ({ // Bring variants if it has them
                ...v,
                // Regenerate variant SKU if it's empty, otherwise keep original
                autoGeneratedVariantSku: v.sku && v.sku.trim() !== '' ? '' : generateSkuFromName(v.name || ''),
            })) : [],
        });
        setImageFile(null); // Clear any locally selected file after selection
        setImagePreviewUrl(suggestedProduct.imageUrl || ''); // Set preview to main suggestion URL
        setGlobalProductSuggestions([]); // Hide suggestions
        setShowGlobalSuggestions(false);
        setNoGlobalSuggestionsFound(false);
        setAutoGeneratedSku(''); // Clear main auto-generated SKU
        setFormErrors({}); // Clear any previous form errors on selection
    };

    // Function to add a new empty variant to the product.
    const addVariant = () => {
        const newVariant = {
            name: '', sku: '', price: '', costPrice: '', stock: '',
            unitOfMeasure: 'unidad', imageUrl: '', color: '', size: '', material: '',
            autoGeneratedVariantSku: '', // Initialize auto-generated SKU for the new variant
        };
        if (showAddModal) {
            setNewProduct(prev => ({ ...prev, variants: [...prev.variants, newVariant] }));
        } else if (showEditModal) {
            setEditingProduct(prev => ({ ...prev, variants: [...prev.variants, newVariant] }));
        }
    };

    // Function to remove a variant by its index.
    const removeVariant = (indexToRemove) => {
        // Clear any specific form errors related to the removed variant
        setFormErrors(prevErrors => {
            const newErrors = { ...prevErrors };
            Object.keys(newErrors).forEach(key => {
                if (key.startsWith(`variant-${indexToRemove}-`)) {
                    delete newErrors[key];
                }
            });
            // Adjust indices for errors of subsequent variants to maintain correctness
            const adjustedErrors = {};
            for (const key in newErrors) {
                const parts = key.split('-');
                if (parts[0] === 'variant' && parseInt(parts[1]) > indexToRemove) {
                    const newIndex = parseInt(parts[1]) - 1;
                    adjustedErrors[`variant-${newIndex}-${parts[2]}`] = newErrors[key];
                } else {
                    adjustedErrors[key] = newErrors[key];
                }
            }
            return adjustedErrors;
        });

        if (showAddModal) {
            setNewProduct(prev => ({
                ...prev,
                variants: prev.variants.filter((_, index) => index !== indexToRemove)
            }));
        } else if (showEditModal) {
            setEditingProduct(prev => ({
                ...prev,
                variants: prev.variants.filter((_, index) => index !== indexToRemove)
            }));
        }
    };

    // Function to validate the entire product form (main product and all variants) before submission.
    const validateForm = (productState, isNewProduct = true) => {
        let errors = {};
        let isValid = true;
        // Determine the final SKU for the main product based on user input or auto-generation
        const finalMainSku = isNewProduct ?
            (productState.sku.trim() === '' ? autoGeneratedSku : productState.sku) :
            productState.sku;

        // Main product validations
        if (productState.name.trim() === '') { errors.name = 'El nombre es obligatorio.'; isValid = false; }
        if (productState.category.trim() === '') { errors.category = 'La categoría es obligatoria.'; isValid = false; }

        if (productState.variants.length === 0) {
            // Only validate main product fields if no variants exist
            if (finalMainSku.trim() === '') { errors.sku = 'El SKU es obligatorio si no hay variantes.'; isValid = false; }
            if (productState.price === '' || productState.price === null || productState.price === undefined) { errors.price = 'El precio de venta es obligatorio.'; isValid = false; }
            else if (isNaN(Number(productState.price)) || Number(productState.price) <= 0) { errors.price = 'El precio debe ser un número positivo.'; isValid = false; }

            if (productState.costPrice === '' || productState.costPrice === null || productState.costPrice === undefined) { errors.costPrice = 'El costo unitario es obligatorio.'; isValid = false; }
            else if (isNaN(Number(productState.costPrice)) || Number(productState.costPrice) < 0) { errors.costPrice = 'El costo debe ser un número no negativo.'; isValid = false; }

            if (productState.stock === '' || productState.stock === null || productState.stock === undefined) { errors.stock = 'El stock es obligatorio.'; isValid = false; }
            else if (isNaN(Number(productState.stock)) || Number(productState.stock) < 0) { errors.stock = 'El stock debe ser un número no negativo.'; isValid = false; }

            if (productState.unitOfMeasure.trim() === '') { errors.unitOfMeasure = 'La unidad de medida es obligatoria.'; isValid = false; }
        }

        // Variant validations
        productState.variants.forEach((variant, index) => {
            const variantPrefix = `variant-${index}-`;
            const finalVariantSku = variant.sku.trim() === '' ? variant.autoGeneratedVariantSku : variant.sku;

            if (variant.name.trim() === '') { errors[`${variantPrefix}name`] = 'El nombre de la variante es obligatorio.'; isValid = false; }
            if (finalVariantSku.trim() === '') { errors[`${variantPrefix}sku`] = 'El SKU de la variante es obligatorio o se debe generar automáticamente.'; isValid = false; }

            if (variant.price === '' || variant.price === null || variant.price === undefined) { errors[`${variantPrefix}price`] = 'El precio es obligatorio.'; isValid = false; }
            else if (isNaN(Number(variant.price)) || Number(variant.price) <= 0) { errors[`${variantPrefix}price`] = 'El precio debe ser positivo.'; isValid = false; }

            if (variant.costPrice === '' || variant.costPrice === null || variant.costPrice === undefined) { errors[`${variantPrefix}costPrice`] = 'El costo es obligatorio.'; isValid = false; }
            else if (isNaN(Number(variant.costPrice)) || Number(variant.costPrice) < 0) { errors[`${variantPrefix}costPrice`] = 'El costo debe ser no negativo.'; isValid = false; }

            if (variant.stock === '' || variant.stock === null || variant.stock === undefined) { errors[`${variantPrefix}stock`] = 'El stock es obligatorio.'; isValid = false; }
            else if (isNaN(Number(variant.stock)) || Number(variant.stock) < 0) { errors[`${variantPrefix}stock`] = 'El stock debe ser no negativo.'; isValid = false; }

            if (variant.unitOfMeasure.trim() === '') { errors[`${variantPrefix}unitOfMeasure`] = 'La unidad de medida es obligatoria.'; isValid = false; }
        });

        setFormErrors(errors);
        return isValid;
    };


    // Handles form submission for adding a new product.
    const handleAddProduct = async (e) => {
        e.preventDefault();
        setError('');
        setSuccessMessage('');

        // Validate the entire form before proceeding
        const isValid = validateForm(newProduct, true);
        if (!isValid) {
            displayMessage('Por favor, corrige los errores en el formulario.', 'error');
            return;
        }

        setLoading(true); // Activate general loading state

        let uploadedMainImageUrl = '';
        // If there's a main image file selected OR a URL entered in the form, try to upload/process it.
        if (imageFile || (newProduct.imageUrl && newProduct.imageUrl.trim() !== '')) {
            const uploadResult = await uploadImageToCloud(imageFile || newProduct.imageUrl);
            if (!uploadResult.success) {
                setLoading(false); // Deactivate loading if image upload fails
                return; // Stop the process if image upload fails
            }
            uploadedMainImageUrl = uploadResult.url;
        }

        // Determine the final SKU for the main product (user input or auto-generated)
        const finalMainSku = newProduct.sku.trim() === '' ? (autoGeneratedSku || undefined) : newProduct.sku;

        // Construct the product object to send to the backend.
        // If variants exist, main product's price, stock, costPrice, unitOfMeasure, color, size, material
        // are set to undefined to avoid overwriting the model, as these are managed by variants.
        const productToSend = {
            ...newProduct,
            sku: finalMainSku || '', // Ensure SKU is always a string, even if finalMainSku is empty/undefined
            imageUrl: uploadedMainImageUrl || '', // Ensure imageUrl is always a string
            // If no variants, ensure price, stock, costPrice are numbers (0 if empty string). Otherwise, undefined.
            price: (newProduct.variants.length > 0) ? undefined : (newProduct.price === '' ? 0 : Number(newProduct.price)),
            stock: (newProduct.variants.length > 0) ? undefined : (newProduct.stock === '' ? 0 : Number(newProduct.stock)),
            costPrice: (newProduct.variants.length > 0) ? undefined : (newProduct.costPrice === '' ? 0 : Number(newProduct.costPrice)),
            // Ensure unitOfMeasure, color, size, material are empty strings if no variants and left empty by user
            unitOfMeasure: (newProduct.variants.length > 0) ? undefined : (newProduct.unitOfMeasure || 'unidad'),
            color: (newProduct.variants.length > 0) ? undefined : (newProduct.color || ''),
            size: (newProduct.variants.length > 0) ? undefined : (newProduct.size || ''),
            material: (newProduct.variants.length > 0) ? undefined : (newProduct.material || ''),
        };
        // Map variants to ensure correct data types and final SKU for each variant.
        productToSend.variants = newProduct.variants.map(variant => ({
            name: variant.name,
            sku: (variant.sku.trim() === '' ? variant.autoGeneratedVariantSku : variant.sku) || '', // Asegura que siempre sea un string
            price: Number(variant.price),
            costPrice: Number(variant.costPrice),
            stock: Number(variant.stock),
            unitOfMeasure: variant.unitOfMeasure,
            imageUrl: variant.imageUrl || '',
            color: variant.color || '',
            size: variant.size || '',
            material: variant.material || '',
        }));

        try {
            const response = await axiosInstance.post('/products', productToSend);

            displayMessage('Producto añadido exitosamente.', 'success');
            setProducts(prev => [response.data, ...prev]); // Add new product to the beginning of the list
            // Reset all form states to clear the modal for next use
            setNewProduct({
                name: '', description: '', category: '', price: '', stock: '',
                costPrice: '', sku: '', unitOfMeasure: 'unidad', brand: '', supplier: '', imageUrl: '',
                color: '', size: '', material: '', variants: []
            });
            setImageFile(null); // Reset main image file input
            setImagePreviewUrl(''); // Reset main image preview
            setAutoGeneratedSku('');
            setShowAddModal(false); // Hide the modal
            setShowAdvancedOptions(false); // Collapse advanced options
            setFormErrors({}); // Clear all form errors
            fetchFilterOptions(); // Refresh filter options in case new categories/brands were added
        } catch (err) {
            const errorMessage = err.response?.data?.message || 'Error al añadir producto. Por favor, inténtalo de nuevo.';
            displayMessage(errorMessage, 'error');
        } finally {
            setLoading(false); // Deactivate general loading state
        }
    };

    // Handles the click event for editing a product, populating the edit form.
    const handleEditClick = (product) => {
        setEditingProduct({
            ...product,
            // Format numeric fields to fixed 2 decimal places for consistency in input fields
            price: product.price !== undefined && product.price !== null ? parseFloat(product.price).toFixed(2) : '',
            costPrice: product.costPrice !== undefined && product.costPrice !== null ? parseFloat(product.costPrice).toFixed(2) : '',
            unitOfMeasure: product.unitOfMeasure || 'unidad', // Default to 'unidad' if not set
            brand: product.brand || '', // Ensure brand exists or is empty string
            supplier: product.supplier || '', // Ensure supplier exists or is empty string
            description: product.description || '', // Ensure description exists or is empty string
            imageUrl: product.imageUrl || '', // Ensure imageUrl exists or is empty string
            color: product.color || '',    // Populate main product color
            size: product.size || '',       // Populate main product size
            material: product.material || '', // Populate main product material
            variants: product.variants ? product.variants.map(v => ({ // Map variants to ensure fields and auto-generate SKU
                ...v,
                price: parseFloat(v.price).toFixed(2),
                costPrice: parseFloat(v.costPrice).toFixed(2),
                unitOfMeasure: v.unitOfMeasure || 'unidad',
                color: v.color || '',
                size: v.size || '',
                material: v.material || '',
                imageUrl: v.imageUrl || '',
                // If variant SKU exists, do not auto-generate. If not, auto-generate.
                autoGeneratedVariantSku: v.sku && v.sku.trim() !== '' ? '' : generateSkuFromName(v.name || ''),
            })) : [],
        });
        setImageFile(null); // Clear any pending local file selection for the main image
        setImagePreviewUrl(product.imageUrl || ''); // Set the image preview to the existing product's image URL
        setShowEditModal(true); // Show the edit modal
        setShowAddModal(false); // Ensure add modal is hidden
        setError(''); // Clear any previous error messages
        setSuccessMessage(''); // Clear any previous success messages
        setFormErrors({}); // Clear all form errors when opening edit form
    };

    // Handles form submission for updating an existing product.
    const handleUpdateProduct = async (e) => {
        e.preventDefault();
        if (!editingProduct || !editingProduct._id) return; // Ensure a product is selected for editing

        setError('');
        setSuccessMessage('');

        // Validate the entire form before proceeding
        const isValid = validateForm(editingProduct, false); // Pass `false` for isNewProduct
        if (!isValid) {
            displayMessage('Por favor, corrige los errores en el formulario.', 'error');
            return;
        }

        setLoading(true); // Activate general loading state

        let uploadedMainImageUrl = editingProduct.imageUrl; // Start with the current imageUrl from the editingProduct state

        // Logic to handle main product image updates:
        if (imageFile) {
            // Case 1: A new local file was selected. Upload it.
            const uploadResult = await uploadImageToCloud(imageFile);
            if (!uploadResult.success) {
                setLoading(false);
                return; // Stop the process if upload fails
            }
            uploadedMainImageUrl = uploadResult.url;
        } else if (editingProduct.imageUrl === '') {
            // Case 2: The imageUrl text field was explicitly cleared by the user, and no new file was selected.
            // Set to undefined to effectively remove the image from the product on the backend.
            uploadedMainImageUrl = undefined;
        } else if (uploadedMainImageUrl && !uploadedMainImageUrl.includes('res.cloudinary.com')) {
            // Case 3: A new URL was pasted into the imageUrl field, and it's not yet a Cloudinary URL. Upload it.
            const uploadResult = await uploadImageToCloud(uploadedMainImageUrl);
            if (!uploadResult.success) {
                setLoading(false);
                return;
            }
            uploadedMainImageUrl = uploadResult.url;
        }
        // If none of the above, it means no change to the image or the existing URL is already Cloudinary.
        // In this case, `uploadedMainImageUrl` already holds the correct `editingProduct.imageUrl` value.


        // Construct the product object to send to the backend for update.
        // Similar to add, if variants exist, main product's granular fields are set to undefined.
        const productToSend = {
            ...editingProduct,
            imageUrl: uploadedMainImageUrl || '', // Ensure imageUrl is always a string
            // If no variants, ensure price, stock, costPrice are numbers (0 if empty string). Otherwise, undefined.
            price: (editingProduct.variants.length > 0) ? undefined : (editingProduct.price === '' ? 0 : Number(editingProduct.price)),
            stock: (editingProduct.variants.length > 0) ? undefined : (editingProduct.stock === '' ? 0 : Number(editingProduct.stock)),
            costPrice: (editingProduct.variants.length > 0) ? undefined : (editingProduct.costPrice === '' ? 0 : Number(editingProduct.costPrice)),
            // Ensure unitOfMeasure, color, size, material are empty strings if no variants and left empty by user
            unitOfMeasure: (editingProduct.variants.length > 0) ? undefined : (editingProduct.unitOfMeasure || 'unidad'),
            color: (editingProduct.variants.length > 0) ? undefined : (editingProduct.color || ''),
            size: (editingProduct.variants.length > 0) ? undefined : (editingProduct.size || ''),
            material: (editingProduct.variants.length > 0) ? undefined : (editingProduct.material || ''),
        };
        // Ensure variants are mapped with their finalized SKUs and existing `_id` if they are not new.
        productToSend.variants = editingProduct.variants.map(variant => ({
            name: variant.name,
            sku: (variant.sku.trim() === '' ? variant.autoGeneratedVariantSku : variant.sku) || '', // Asegura que siempre sea un string
            price: Number(variant.price),
            costPrice: Number(variant.costPrice),
            stock: Number(variant.stock),
            unitOfMeasure: variant.unitOfMeasure,
            imageUrl: variant.imageUrl || '',
            color: variant.color || '',
            size: variant.size || '',
            material: variant.material || '',
            ...(variant._id && { _id: variant._id }) // Only include `_id` if it exists (for existing variants)
        }));


        try {
            const response = await axiosInstance.put(`/products/${editingProduct._id}`, productToSend);

            displayMessage('Producto actualizado exitosamente.', 'success');
            // Update the product list by replacing the old product with the updated one
            setProducts(prev => prev.map(p => (p._id === editingProduct._id ? response.data : p)));
            setEditingProduct(null); // Clear the editing product state
            setImageFile(null); // Reset main image file input
            setImagePreviewUrl(''); // Reset main image preview
            setShowEditModal(false); // Hide the edit modal
            setShowAdvancedOptions(false); // Collapse advanced options
            setFormErrors({}); // Clear all form errors
            fetchFilterOptions(); // Refresh filter options in case product attributes changed
        } catch (err) {
            const errorMessage = err.response?.data?.message || 'Error al actualizar producto. Por favor, inténtalo de nuevo.';
            displayMessage(errorMessage, 'error');
        } finally {
            setLoading(false); // Deactivate general loading state
        }
    };

    // Displays a confirmation modal before deleting a product.
    const confirmDeleteProduct = (productId) => {
        setProductToDelete(productId);
        setShowConfirmModal(true);
        setError('');
        setSuccessMessage('');
    };

    // Handles the actual deletion of a product after user confirmation.
    const handleDeleteProduct = async (e) => {
        e.stopPropagation(); // Prevent event propagation if this function is called from a nested click event
        if (!productToDelete) {
            displayMessage('No se pudo identificar el producto a eliminar.', 'error');
            setLoading(false); // Ensure loading state is reset even on early exit
            return;
        }

        try {
            setLoading(true);
            setError('');
            setSuccessMessage('');
            await axiosInstance.delete(`/products/${productToDelete}`);

            displayMessage('Producto eliminado exitosamente.', 'success');
            setProducts(prev => {
                const updatedProducts = prev.filter(p => p._id !== productToDelete);
                return updatedProducts;
            });

            // Adjust current page if the last product on a page was deleted, otherwise refresh current page.
            if (products.length === 1 && currentPage > 1) {
                setCurrentPage(prev => prev - 1);
            } else {
                fetchProducts(); // Re-fetch products to update the list and pagination
            }

            setShowConfirmModal(false); // Hide the confirmation modal
            setProductToDelete(null); // Clear the ID of the product to be deleted

        } catch (err) {
            const errorMessage = err.response?.data?.message || 'Error al eliminar producto. Por favor, inténtalo de nuevo.';
            displayMessage(errorMessage, 'error');
        } finally {
            setLoading(false);
        }
    };

    // Function to navigate to the previous page in pagination.
    const goToPrevPage = () => {
        setCurrentPage(prev => Math.max(1, prev - 1));
    };

    // Function to navigate to the next page in pagination.
    const goToNextPage = () => {
        setCurrentPage(prev => Math.min(totalPages, prev + 1));
    };

    return (
        <div className="p-6 bg-dark-slate-gray rounded-lg shadow-xl min-h-screen font-inter"> {/* Applied font-inter */}
            <h2 className="text-4xl font-extrabold text-copper-rose-accent mb-8 border-b-2 border-action-blue pb-4">Gestión de Inventario</h2>

            {/* Success Message Display */}
            {successMessage && (
                <div className="bg-green-700 bg-opacity-30 border border-green-500 text-green-300 px-4 py-3 rounded relative mb-6 animate-fade-in-down" role="alert">
                    <strong className="font-bold">¡Éxito!</strong>
                    <span className="block sm:inline ml-2">{successMessage}</span>
                </div>
            )}

            {/* Error Message Display */}
            {error && (
                <div className="bg-red-700 bg-opacity-30 border border-red-500 text-red-300 px-4 py-3 rounded relative mb-6 animate-fade-in-down" role="alert">
                    <strong className="font-bold">¡Error!</strong>
                    <span className="block sm:inline ml-2">{error}</span>
                </div>
            )}

            {/* Confirmation Modal for Deletion */}
            <div
                className={`fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50 transition-opacity duration-300 ${showConfirmModal ? 'opacity-100 visible' : 'opacity-0 invisible'}`}
                onClick={(e) => {
                    e.stopPropagation(); // Prevent closing when clicking background
                    setShowConfirmModal(false);
                    setProductToDelete(null);
                    setError('');
                    setSuccessMessage('');
                }}
            >
                <div
                    className={`bg-deep-night-blue p-8 rounded-lg shadow-2xl text-neutral-light max-w-sm w-full text-center border border-neutral-gray-700 transform transition-transform duration-300 ${showConfirmModal ? 'scale-100' : 'scale-95'}`}
                    onClick={(e) => e.stopPropagation()} // Prevent modal from closing when clicking inside
                >
                    <h3 className="text-xl font-bold mb-4 text-copper-rose-accent">Confirmar Eliminación</h3>
                    <p className="mb-6 text-neutral-gray-300">¿Estás seguro de que quieres eliminar este producto? Esta acción no se puede deshacer.</p>
                    <div className="flex justify-center space-x-4">
                        <button
                            onClick={(e) => {
                                e.stopPropagation();
                                setShowConfirmModal(false);
                                setProductToDelete(null);
                                setError('');
                                setSuccessMessage('');
                            }}
                            type="button"
                            className="bg-neutral-gray-500 hover:bg-neutral-gray-600 text-neutral-light font-bold py-2 px-5 rounded-lg transition duration-200 shadow-md"
                        >
                            Cancelar
                        </button>
                        <button
                            onClick={(e) => handleDeleteProduct(e)}
                            type="button"
                            className="bg-red-600 hover:bg-red-700 text-neutral-light font-bold py-2 px-5 rounded-lg transition duration-200 shadow-md"
                        >
                            Eliminar
                        </button>
                    </div>
                </div>
            </div>

            {/* --- Search, Filter, and Add Product Section --- */}
            <div className="bg-deep-night-blue p-6 rounded-lg shadow-inner mb-8 border border-neutral-gray-700 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 items-center">
                {/* Consolidated Search Input */}
                <div className="relative col-span-full mb-4 md:mb-0">
                    <input
                        type="text"
                        placeholder="Buscar por nombre, SKU, Marca, Proveedor..."
                        value={searchTerm}
                        onChange={(e) => {
                            setSearchTerm(e.target.value);
                            setCurrentPage(1); // Reset to first page on new search
                        }}
                        className="shadow appearance-none border border-neutral-gray-700 rounded-full w-full py-2 px-4 pl-10 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light"
                    />
                    <Search size={18} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-neutral-gray-400" />
                    {searchTerm && (
                        <XCircle
                            size={20}
                            className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 cursor-pointer hover:text-gray-300"
                            onClick={() => {
                                // Clear search term and all filters, then re-fetch products
                                setSearchTerm('');
                                setCurrentPage(1);
                                setSelectedCategory('Todas las Categorías');
                                setSelectedBrand('Todas las Marcas');
                                setSelectedSupplier('Todos los Proveedores');
                                setSelectedVariantColor('Todos los Colores');
                                setSelectedVariantSize('Todas las Tallas');
                                // A direct call to fetchProducts is not needed here as state changes will trigger useEffect.
                            }}
                        />
                    )}
                </div>

                {/* Filter Dropdowns - Responsive layout */}
                <select
                    id="categoryFilter"
                    value={selectedCategory}
                    onChange={(e) => {
                        setSelectedCategory(e.target.value);
                        setCurrentPage(1); // Reset to first page on filter change
                        // fetchProducts() will be triggered by useEffect due to dependency change
                    }}
                    className="shadow appearance-none border border-neutral-gray-700 rounded-full w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal cursor-pointer text-neutral-light"
                >
                    {availableCategories.map(cat => (
                        <option key={cat} value={cat}>{cat}</option>
                    ))}
                </select>

                <select
                    id="brandFilter"
                    value={selectedBrand}
                    onChange={(e) => {
                        setSelectedBrand(e.target.value);
                        setCurrentPage(1);
                        // fetchProducts() will be triggered by useEffect due to dependency change
                    }}
                    className="shadow appearance-none border border-neutral-gray-700 rounded-full w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal cursor-pointer text-neutral-light"
                >
                    {availableBrands.map(brand => (
                        <option key={brand} value={brand}>{brand}</option>
                    ))}
                </select>

                <select
                    id="supplierFilter"
                    value={selectedSupplier}
                    onChange={(e) => {
                        setSelectedSupplier(e.target.value);
                        setCurrentPage(1);
                        // fetchProducts() will be triggered by useEffect due to dependency change
                    }}
                    className="shadow appearance-none border border-neutral-gray-700 rounded-full w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal cursor-pointer text-neutral-light"
                >
                    {availableSuppliers.map(supplier => (
                        <option key={supplier} value={supplier}>{supplier}</option>
                    ))}
                </select>

                <select
                    id="variantColorFilter"
                    value={selectedVariantColor}
                    onChange={(e) => {
                        setSelectedVariantColor(e.target.value);
                        setCurrentPage(1);
                        // fetchProducts() will be triggered by useEffect due to dependency change
                    }}
                    className="shadow appearance-none border border-neutral-gray-700 rounded-full w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal cursor-pointer text-neutral-light"
                >
                    {availableVariantColors.map(color => (
                        <option key={color} value={color}>{color}</option>
                    ))}
                </select>

                <select
                    id="variantSizeFilter"
                    value={selectedVariantSize}
                    onChange={(e) => {
                        setSelectedVariantSize(e.target.value);
                        setCurrentPage(1);
                        // fetchProducts() will be triggered by useEffect due to dependency change
                    }}
                    className="shadow appearance-none border border-neutral-gray-700 rounded-full w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal cursor-pointer text-neutral-light"
                >
                    {availableVariantSizes.map(size => (
                        <option key={size} value={size}>{size}</option>
                    ))}
                </select>

                {/* Add New Product Button */}
                <button
                    onClick={() => {
                        // Reset all states relevant to adding a new product before opening the modal
                        setShowAddModal(true);
                        setShowEditModal(false); // Ensure edit modal is closed
                        setEditingProduct(null); // Clear any product being edited
                        setError(''); // Clear general error message
                        setSuccessMessage(''); // Clear general success message
                        setGlobalProductSuggestions([]); // Clear global suggestions
                        setNoGlobalSuggestionsFound(false); // Reset "no suggestions found" message
                        setAutoGeneratedSku(''); // Clear auto-generated SKU
                        setImageFile(null); // Clear selected main image file
                        setImagePreviewUrl(''); // Clear main image preview URL
                        setShowAdvancedOptions(false); // Collapse advanced options by default
                        setNewProduct({ // Reset new product form fields to initial state
                            name: '', description: '', category: '', price: '', stock: '',
                            costPrice: '', sku: '', unitOfMeasure: 'unidad', brand: '', supplier: '', imageUrl: '',
                            color: '', size: '', material: '', variants: []
                        });
                        setFormErrors({}); // Clear all form-specific validation errors
                    }}
                    type="button"
                    className="col-span-full md:col-span-1 lg:col-span-2 xl:col-span-1 bg-action-blue hover:bg-blue-700 text-neutral-light font-bold py-3 px-6 rounded-lg text-lg shadow-md transition duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-500 focus:ring-opacity-50 flex items-center justify-center w-full mt-4 md:mt-0"
                >
                    <PlusSquare size={24} className="mr-2" /> Añadir Nuevo Producto
                </button>
            </div>

            {/* --- Add Product Modal --- */}
            <ProductModal
                isOpen={showAddModal}
                onClose={() => {
                    // Reset all relevant states when closing the add product modal
                    setShowAddModal(false);
                    setError('');
                    setSuccessMessage('');
                    setGlobalProductSuggestions([]);
                    setNoGlobalSuggestionsFound(false);
                    setAutoGeneratedSku('');
                    setImageFile(null);
                    setImagePreviewUrl('');
                    setShowAdvancedOptions(false);
                    setNewProduct({
                        name: '', description: '', category: '', price: '', stock: '',
                        costPrice: '', sku: '', unitOfMeasure: 'unidad', brand: '', supplier: '', imageUrl: '',
                        color: '', size: '', material: '', variants: []
                    });
                    setFormErrors({});
                }}
                title="Añadir Nuevo Producto"
            >
                {/* Add Product Form */}
                <form onSubmit={handleAddProduct} className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="relative">
                        <label htmlFor="name" className="block text-neutral-light text-sm font-bold mb-2">
                            Nombre del Producto:
                            <span className="relative inline-block ml-2 group">
                                <Info size={16} className="text-action-blue cursor-pointer" />
                                <span className="absolute left-1/2 bottom-full transform -translate-x-1/2 mb-2 w-48 p-2 bg-neutral-gray-800 text-xs text-white rounded-md opacity-0 group-hover:opacity-100 transition-opacity duration-300 z-10 whitespace-normal text-center shadow-lg">
                                    Empieza a escribir para buscar sugerencias del catálogo global.
                                </span>
                            </span>
                        </label>
                        <input
                            type="text"
                            id="name"
                            name="name"
                            value={newProduct.name}
                            onChange={handleInputChange}
                            className={`shadow appearance-none border ${formErrors.name ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                            placeholder="Ej. Camiseta Deportiva"
                            required // Product name is always required
                            onBlur={() => setTimeout(() => setShowGlobalSuggestions(false), 100)} // Hide suggestions quickly on blur
                            onFocus={() => { // Show suggestions on focus if there are any and name length is sufficient
                                if (newProduct.name.trim().length >= 2 && globalProductSuggestions.length > 0) {
                                    setShowGlobalSuggestions(true);
                                }
                            }}
                        />
                        {formErrors.name && <p className="text-red-400 text-xs mt-1">{formErrors.name}</p>}
                        {/* Global Product Suggestions List */}
                        {showGlobalSuggestions && globalProductSuggestions.length > 0 && (
                            <ul className="absolute z-20 w-full bg-neutral-gray-800 border border-neutral-gray-700 rounded-lg shadow-xl mt-1 max-h-60 overflow-y-auto">
                                {globalProductSuggestions.map((suggestion) => (
                                    <li
                                        key={suggestion.sku || suggestion.name} // Unique key for each suggestion
                                        className="px-4 py-2 cursor-pointer hover:bg-action-blue-light hover:text-white text-neutral-light border-b border-neutral-gray-700 last:border-b-0"
                                        onClick={() => handleSelectGlobalProduct(suggestion)}
                                    >
                                        <p className="font-semibold">{suggestion.name}</p>
                                        <p className="text-xs text-neutral-gray-400">SKU: {suggestion.sku || 'N/A'} - Cat: {suggestion.category || 'N/A'}</p>
                                        {suggestion.imageUrl && (
                                            <img src={suggestion.imageUrl} alt="Imagen de sugerencia" className="w-16 h-16 object-cover rounded-md mt-1" />
                                        )}
                                    </li>
                                ))}
                            </ul>
                        )}
                        {/* Message when no global suggestions are found */}
                        {noGlobalSuggestionsFound && !showGlobalSuggestions && (
                            <p className="text-orange-400 text-sm mt-2 animate-fade-in-down">
                                No hay coincidencias. <span className="text-success-green">¡Estás registrando un nuevo producto!</span>
                            </p>
                        )}
                    </div>
                    <div>
                        <label htmlFor="sku" className="block text-neutral-light text-sm font-bold mb-2">
                            SKU:
                            <span className="relative inline-block ml-2 group">
                                <Info size={16} className="text-action-blue cursor-pointer" />
                                <span className="absolute left-1/2 bottom-full transform -translate-x-1/2 mb-2 w-64 p-2 bg-neutral-gray-800 text-xs text-white rounded-md opacity-0 group-hover:opacity-100 transition-opacity duration-300 z-10 whitespace-normal text-center shadow-lg">
                                    Código único para el producto (ej. para códigos de barras). Si lo dejas vacío, se generará uno automáticamente. Si usas variantes, este SKU será el del producto padre.
                                </span>
                            </span>
                        </label>
                        <input
                            type="text"
                            id="sku"
                            name="sku"
                            value={newProduct.sku}
                            onChange={handleInputChange}
                            placeholder={autoGeneratedSku || 'Ej. CAMI-DEP-AZUL-M'}
                            className={`shadow appearance-none border ${formErrors.sku ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                            disabled={newProduct.variants.length > 0} // SKU is disabled if variants exist, as variants have their own SKUs
                        />
                        {formErrors.sku && <p className="text-red-400 text-xs mt-1">{formErrors.sku}</p>}
                    </div>
                    <div>
                        <label htmlFor="category" className="block text-neutral-light text-sm font-bold mb-2">Categoría:</label>
                        <input
                            type="text"
                            id="category"
                            name="category"
                            value={newProduct.category}
                            onChange={handleInputChange}
                            className={`shadow appearance-none border ${formErrors.category ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                            placeholder="Ej. Ropa, Electrónica, Alimentos"
                            required
                        />
                        {formErrors.category && <p className="text-red-400 text-xs mt-1">{formErrors.category}</p>}
                    </div>
                    <div>
                        <label htmlFor="unitOfMeasure" className="block text-neutral-light text-sm font-bold mb-2">Unidad de Medida (Producto Principal):</label>
                        <select
                            id="unitOfMeasure"
                            name="unitOfMeasure"
                            value={newProduct.unitOfMeasure}
                            onChange={handleInputChange}
                            className={`shadow appearance-none border ${formErrors.unitOfMeasure ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal cursor-pointer text-neutral-light`}
                            required={newProduct.variants.length === 0} // Required only if no variants
                            disabled={newProduct.variants.length > 0} // Disabled if variants exist
                        >
                            {unitOfMeasureOptions.map(unit => (
                                <option key={unit} value={unit}>{unit}</option>
                            ))}
                        </select>
                        {formErrors.unitOfMeasure && <p className="text-red-400 text-xs mt-1">{formErrors.unitOfMeasure}</p>}
                    </div>
                    <div>
                        <label htmlFor="brand" className="block text-neutral-light text-sm font-bold mb-2">Marca (Opcional):</label>
                        <input
                            type="text"
                            id="brand"
                            name="brand"
                            value={newProduct.brand}
                            onChange={handleInputChange}
                            className={`shadow appearance-none border ${formErrors.brand ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                            placeholder="Ej. Nike, Samsung"
                        />
                        {formErrors.brand && <p className="text-red-400 text-xs mt-1">{formErrors.brand}</p>}
                    </div>
                    <div>
                        <label htmlFor="supplier" className="block text-neutral-light text-sm font-bold mb-2">Proveedor (Opcional):</label>
                        <input
                            type="text"
                            id="supplier"
                            name="supplier"
                            value={newProduct.supplier}
                            onChange={handleInputChange}
                            className={`shadow appearance-none border ${formErrors.supplier ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                            placeholder="Ej. Distribuciones ABC"
                        />
                        {formErrors.supplier && <p className="text-red-400 text-xs mt-1">{formErrors.supplier}</p>}
                    </div>
                    <div>
                        <label htmlFor="price" className="block text-neutral-light text-sm font-bold mb-2">Precio de Venta ($) (Producto Principal):</label>
                        <input
                            type="number"
                            id="price"
                            name="price"
                            value={newProduct.price}
                            onChange={handleInputChange}
                            step="0.01"
                            className={`shadow appearance-none border ${formErrors.price ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                            placeholder="Ej. 29.99"
                            required={newProduct.variants.length === 0} // Required only if no variants
                            disabled={newProduct.variants.length > 0} // Disabled if variants exist
                        />
                        {formErrors.price && <p className="text-red-400 text-xs mt-1">{formErrors.price}</p>}
                    </div>
                    <div>
                        <label htmlFor="costPrice" className="block text-neutral-light text-sm font-bold mb-2">Costo Unitario ($) (Producto Principal):</label>
                        <input
                            type="number"
                            id="costPrice"
                            name="costPrice"
                            value={newProduct.costPrice}
                            onChange={handleInputChange}
                            step="0.01"
                            className={`shadow appearance-none border ${formErrors.costPrice ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                            placeholder="Ej. 15.00"
                            required={newProduct.variants.length === 0} // Required only if no variants
                            disabled={newProduct.variants.length > 0} // Disabled if variants exist
                        />
                        {formErrors.costPrice && <p className="text-red-400 text-xs mt-1">{formErrors.costPrice}</p>}
                    </div>
                    <div>
                        <label htmlFor="stock" className="block text-neutral-light text-sm font-bold mb-2">Stock (Producto Principal):</label>
                        <input
                            type="number"
                            id="stock"
                            name="stock"
                            value={newProduct.stock}
                            onChange={handleInputChange}
                            className={`shadow appearance-none border ${formErrors.stock ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                            placeholder="Ej. 100"
                            required={newProduct.variants.length === 0} // Required only if no variants
                            disabled={newProduct.variants.length > 0} // Disabled if variants exist
                        />
                        {formErrors.stock && <p className="text-red-400 text-xs mt-1">{formErrors.stock}</p>}
                    </div>
                    <div className="md:col-span-2">
                        <label htmlFor="description" className="block text-neutral-light text-sm font-bold mb-2">Descripción (Opcional):</label>
                        <textarea
                            id="description"
                            name="description"
                            value={newProduct.description}
                            onChange={handleInputChange}
                            className={`shadow appearance-none border ${formErrors.description ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 h-24 text-neutral-light`}
                            placeholder="Descripción detallada del producto..."
                        />
                        {formErrors.description && <p className="text-red-400 text-xs mt-1">{formErrors.description}</p>}
                    </div>

                    {/* --- START OF ADVANCED OPTIONS SECTION (ADD) --- */}
                    <div className="md:col-span-2 mt-4">
                        {/* Info message for disabled fields when variants exist */}
                        {newProduct.variants.length > 0 && (
                            <p className="text-yellow-400 text-sm mb-4">
                                <Info size={16} className="inline-block mr-1" /> Los campos de Precio, Stock, Costo, SKU, Unidad de Medida, Color, Talla/Tamaño y Material del producto principal están deshabilitados porque este producto tiene variantes. Gestiona estos detalles en cada variante.
                            </p>
                        )}
                        {/* Toggle button for advanced options */}
                        <button
                            type="button"
                            onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}
                            className="w-full bg-neutral-gray-700 hover:bg-neutral-gray-600 text-neutral-light font-bold py-3 px-4 rounded-lg flex items-center justify-between transition duration-200 focus:outline-none focus:ring-2 focus:ring-neutral-gray-500"
                        >
                            <span>Opciones Avanzadas</span>
                            {showAdvancedOptions ? <ChevronUp size={20} /> : <ChevronDown size={20} />}
                        </button>
                        {/* Collapsible advanced options content */}
                        {showAdvancedOptions && (
                            <div className="mt-4 border border-neutral-gray-700 rounded-lg p-4 bg-dark-charcoal animate-fade-in-down">
                                {/* Main Product Attributes (Color, Size, Material) */}
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                                    <div>
                                        <label htmlFor="color" className="block text-neutral-light text-sm font-bold mb-2">Color (Producto Principal - Opcional):</label>
                                        <input
                                            type="text"
                                            id="color"
                                            name="color"
                                            value={newProduct.color}
                                            onChange={handleInputChange}
                                            className={`shadow appearance-none border ${formErrors.color ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                            placeholder="Ej. Azul, Negro"
                                            disabled={newProduct.variants.length > 0} // Disabled if variants exist
                                        />
                                        {formErrors.color && <p className="text-red-400 text-xs mt-1">{formErrors.color}</p>}
                                    </div>
                                    <div>
                                        <label htmlFor="size" className="block text-neutral-light text-sm font-bold mb-2">Talla/Tamaño (Producto Principal - Opcional):</label>
                                        <input
                                            type="text"
                                            id="size"
                                            name="size"
                                            value={newProduct.size}
                                            onChange={handleInputChange}
                                            className={`shadow appearance-none border ${formErrors.size ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                            placeholder="Ej. S, L, XL, 32GB"
                                            disabled={newProduct.variants.length > 0} // Disabled if variants exist
                                        />
                                        {formErrors.size && <p className="text-red-400 text-xs mt-1">{formErrors.size}</p>}
                                    </div>
                                    <div className="md:col-span-2">
                                        <label htmlFor="material" className="block text-neutral-light text-sm font-bold mb-2">Material (Producto Principal - Opcional):</label>
                                        <input
                                            type="text"
                                            id="material"
                                            name="material"
                                            value={newProduct.material}
                                            onChange={handleInputChange}
                                            className={`shadow appearance-none border ${formErrors.material ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                            placeholder="Ej. Algodón, Plástico, Metal"
                                            disabled={newProduct.variants.length > 0} // Disabled if variants exist
                                        />
                                        {formErrors.material && <p className="text-red-400 text-xs mt-1">{formErrors.material}</p>}
                                    </div>
                                </div>

                                {/* Section for main product image upload or URL */}
                                <div className="mb-6">
                                    <h4 className="text-xl font-semibold text-neutral-light mb-3">Imagen Principal del Producto (Opcional):</h4>
                                    <div className="flex flex-col gap-4">
                                        {/* Option 1: Upload local file */}
                                        <div className="flex flex-col">
                                            <label htmlFor="imageFile" className="block text-neutral-light text-sm font-bold mb-2 cursor-pointer bg-neutral-gray-600 hover:bg-neutral-gray-700 py-2 px-4 rounded-lg text-center flex items-center justify-center transition duration-200">
                                                {isUploadingMainImage ? <Loader2 size={20} className="mr-2 animate-spin" /> : <Upload size={20} className="mr-2"/>} Cargar Imagen desde mi Dispositivo
                                            </label>
                                            <input
                                                type="file"
                                                id="imageFile"
                                                name="imageFile"
                                                accept="image/*"
                                                onChange={handleImageFileChange}
                                                className="hidden"
                                            />
                                            {imageFile && (
                                                <p className="text-neutral-gray-400 text-sm mt-2">Archivo seleccionado: <span className="font-semibold">{imageFile.name}</span></p>
                                            )}
                                        </div>

                                        <div className="text-neutral-gray-400 text-center text-sm my-2">O</div>

                                        {/* Option 2: Paste image URL */}
                                        <div>
                                            <label htmlFor="imageUrl" className="block text-neutral-light text-sm font-bold mb-2">
                                                Pega la URL de una Imagen Externa:
                                                <span className="relative inline-block ml-2 group">
                                                    <Info size={16} className="text-action-blue cursor-pointer" />
                                                    <span className="absolute left-1/2 bottom-full transform -translate-x-1/2 mb-2 w-72 p-2 bg-neutral-gray-800 text-xs text-white rounded-md opacity-0 group-hover:opacity-100 transition-opacity duration-300 z-10 whitespace-normal text-center shadow-lg">
                                                        Pega aquí la URL de la imagen principal de tu producto.
                                                        Si cargas un archivo, esta URL será ignorada.
                                                    </span>
                                                </span>
                                            </label>
                                            <input
                                                type="url"
                                                id="imageUrl"
                                                name="imageUrl"
                                                value={newProduct.imageUrl}
                                                onChange={handleInputChange}
                                                className={`shadow appearance-none border ${formErrors.imageUrl ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                placeholder="Ej. https://tuservicio.com/imagen.jpg"
                                            />
                                            {formErrors.imageUrl && <p className="text-red-400 text-xs mt-1">{formErrors.imageUrl}</p>}
                                        </div>

                                        {/* Image preview (from local file or URL) */}
                                        {(imagePreviewUrl || newProduct.imageUrl) ? (
                                            <div className="mt-4 border border-neutral-gray-600 rounded-lg p-2 text-center bg-neutral-gray-800">
                                                <p className="text-neutral-gray-400 text-sm mb-2">Previsualización de Imagen:</p>
                                                <img
                                                    src={imagePreviewUrl || newProduct.imageUrl} // Prioritize local preview, then URL from state
                                                    alt="Previsualización del Producto"
                                                    className="max-w-full h-auto max-h-48 object-contain mx-auto rounded-md"
                                                    onError={(e) => {
                                                        e.target.onerror = null; // Prevent infinite loop if placeholder also fails
                                                        e.target.src = 'https://placehold.co/600x400/2D3748/F8F8F2?text=Error+Cargando+Imagen'; // Fallback image
                                                        e.target.classList.add('border-red-500', 'border-2'); // Add visual cue for broken image
                                                    }}
                                                />
                                                <p className="text-orange-400 text-xs mt-1">Si la imagen no carga, la URL puede ser incorrecta o el archivo no es válido.</p>
                                            </div>
                                        ) : (
                                            <div className="mt-4 border border-neutral-gray-600 rounded-lg p-2 text-center bg-neutral-gray-800 text-neutral-gray-400 text-sm py-8">
                                                No hay imagen para previsualizar.
                                            </div>
                                        )}
                                    </div>
                                </div>

                                {/* Section for Variant Management */}
                                <div className="mt-6 border-t border-neutral-gray-700 pt-6">
                                    <h4 className="text-xl font-semibold text-neutral-light mb-4">Gestión de Variantes de Producto:</h4>
                                    <p className="text-neutral-gray-300 text-sm mb-4">Define diferentes versiones de tu producto (ej. tallas, colores, materiales). Cada variante tendrá su propio SKU, precio, costo y stock.</p>

                                    {newProduct.variants.map((variant, index) => (
                                        <div key={index} className="bg-neutral-gray-800 p-4 rounded-lg mb-4 border border-neutral-gray-700 relative">
                                            <h5 className="text-lg font-bold text-action-blue mb-3">Variante #{index + 1}</h5>
                                            <button
                                                type="button"
                                                onClick={() => removeVariant(index)}
                                                className="absolute top-2 right-2 text-red-400 hover:text-red-600 transition-colors duration-200"
                                                title="Eliminar esta variante"
                                            >
                                                <X size={20} /> {/* 'X' icon for removing variant */}
                                            </button>
                                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                                <div>
                                                    <label htmlFor={`variantName-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Nombre de Variante:</label>
                                                    <input
                                                        type="text"
                                                        id={`variantName-${index}`}
                                                        name="name"
                                                        value={variant.name}
                                                        onChange={(e) => handleVariantInputChange(index, e)}
                                                        className={`shadow appearance-none border ${formErrors[`variant-${index}-name`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                        placeholder="Ej. Talla M, Color Azul"
                                                        required
                                                    />
                                                    {formErrors[`variant-${index}-name`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-name`]}</p>}
                                                </div>
                                                <div>
                                                    <label htmlFor={`variantSku-${index}`} className="block text-neutral-light text-sm font-bold mb-2">SKU de Variante:</label>
                                                    <input
                                                        type="text"
                                                        id={`variantSku-${index}`}
                                                        name="sku"
                                                        value={variant.sku}
                                                        onChange={(e) => handleVariantInputChange(index, e)}
                                                        placeholder={variant.autoGeneratedVariantSku || 'Ej. CAMI-AZUL-M'}
                                                        className={`shadow appearance-none border ${formErrors[`variant-${index}-sku`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                        // ELIMINADO: required
                                                    />
                                                    {formErrors[`variant-${index}-sku`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-sku`]}</p>}
                                                </div>
                                                <div>
                                                    <label htmlFor={`variantPrice-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Precio de Venta ($):</label>
                                                    <input
                                                        type="number"
                                                        id={`variantPrice-${index}`}
                                                        name="price"
                                                        value={variant.price}
                                                        onChange={(e) => handleVariantInputChange(index, e)}
                                                        step="0.01"
                                                        className={`shadow appearance-none border ${formErrors[`variant-${index}-price`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                        placeholder="Ej. 25.99"
                                                        required
                                                    />
                                                    {formErrors[`variant-${index}-price`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-price`]}</p>}
                                                </div>
                                                <div>
                                                    <label htmlFor={`variantCostPrice-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Costo Unitario ($):</label>
                                                    <input
                                                        type="number"
                                                        id={`variantCostPrice-${index}`}
                                                        name="costPrice"
                                                        value={variant.costPrice}
                                                        onChange={(e) => handleVariantInputChange(index, e)}
                                                        step="0.01"
                                                        className={`shadow appearance-none border ${formErrors[`variant-${index}-costPrice`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                        placeholder="Ej. 12.50"
                                                        required
                                                    />
                                                    {formErrors[`variant-${index}-costPrice`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-costPrice`]}</p>}
                                                </div>
                                                <div>
                                                    <label htmlFor={`variantStock-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Stock:</label>
                                                    <input
                                                        type="number"
                                                        id={`variantStock-${index}`}
                                                        name="stock"
                                                        value={variant.stock}
                                                        onChange={(e) => handleVariantInputChange(index, e)}
                                                        className={`shadow appearance-none border ${formErrors[`variant-${index}-stock`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                        placeholder="Ej. 50"
                                                        required
                                                    />
                                                    {formErrors[`variant-${index}-stock`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-stock`]}</p>}
                                                </div>
                                                <div>
                                                    <label htmlFor={`variantUnitOfMeasure-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Unidad de Medida:</label>
                                                    <select
                                                        id={`variantUnitOfMeasure-${index}`}
                                                        name="unitOfMeasure"
                                                        value={variant.unitOfMeasure}
                                                        onChange={(e) => handleVariantInputChange(index, e)}
                                                        className={`shadow appearance-none border ${formErrors[`variant-${index}-unitOfMeasure`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal cursor-pointer text-neutral-light`}
                                                        required
                                                    >
                                                        {unitOfMeasureOptions.map(unit => (
                                                            <option key={unit} value={unit}>{unit}</option>
                                                        ))}
                                                    </select>
                                                    {formErrors[`variant-${index}-unitOfMeasure`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-unitOfMeasure`]}</p>}
                                                </div>
                                                {/* Additional variant attributes */}
                                                <div>
                                                    <label htmlFor={`variantColor-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Color (Opcional):</label>
                                                    <input
                                                        type="text"
                                                        id={`variantColor-${index}`}
                                                        name="color"
                                                        value={variant.color}
                                                        onChange={(e) => handleVariantInputChange(index, e)}
                                                        className={`shadow appearance-none border ${formErrors[`variant-${index}-color`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                        placeholder="Ej. Rojo"
                                                    />
                                                    {formErrors[`variant-${index}-color`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-color`]}</p>}
                                                </div>
                                                <div>
                                                    <label htmlFor={`variantSize-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Talla/Tamaño (Opcional):</label>
                                                    <input
                                                        type="text"
                                                        id={`variantSize-${index}`}
                                                        name="size"
                                                        value={variant.size}
                                                        onChange={(e) => handleVariantInputChange(index, e)}
                                                        className={`shadow appearance-none border ${formErrors[`variant-${index}-size`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                        placeholder="Ej. S, L, XL, 32GB"
                                                    />
                                                    {formErrors[`variant-${index}-size`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-size`]}</p>}
                                                </div>
                                                <div className="md:col-span-2">
                                                    <label htmlFor={`variantMaterial-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Material (Opcional):</label>
                                                    <input
                                                        type="text"
                                                        id={`variantMaterial-${index}`}
                                                        name="material"
                                                        value={variant.material}
                                                        onChange={(e) => handleVariantInputChange(index, e)}
                                                        className={`shadow appearance-none border ${formErrors[`variant-${index}-material`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                        placeholder="Ej. Algodón, Plástico"
                                                    />
                                                    {formErrors[`variant-${index}-material`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-material`]}</p>}
                                                </div>
                                                {/* Image section for the variant */}
                                                <div className="md:col-span-2 border border-neutral-gray-700 rounded-lg p-3 flex flex-col gap-3 bg-neutral-gray-700">
                                                    <p className="block text-neutral-light text-sm font-bold">Imagen de la Variante (Opcional):</p>
                                                    <div className="flex flex-col">
                                                        <label htmlFor={`variantImageFile-${index}`} className="block text-neutral-light text-sm font-bold mb-2 cursor-pointer bg-neutral-gray-600 hover:bg-neutral-gray-500 py-2 px-4 rounded-lg text-center flex items-center justify-center transition duration-200">
                                                            {variantImageUploading[index] ? <Loader2 size={18} className="mr-2 animate-spin" /> : <Upload size={18} className="mr-2"/>} Cargar Imagen de Variante
                                                        </label>
                                                        <input
                                                            type="file"
                                                            id={`variantImageFile-${index}`}
                                                            name="imageFile"
                                                            accept="image/*"
                                                            onChange={(e) => handleVariantImageFileChange(index, e)}
                                                            className="hidden"
                                                        />
                                                    </div>
                                                    <div className="text-neutral-gray-400 text-center text-xs my-1">O</div>
                                                    <div>
                                                        <label htmlFor={`variantImageUrl-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Pega la URL:</label>
                                                        <input
                                                            type="url"
                                                            id={`variantImageUrl-${index}`}
                                                            name="imageUrl"
                                                            value={variant.imageUrl}
                                                            onChange={(e) => handleVariantInputChange(index, e)}
                                                            onBlur={(e) => { // Upload image when focus is lost if URL changed
                                                                // Only try to upload if URL is not empty and has changed
                                                                const currentVariant = showAddModal ? newProduct.variants[index] : editingProduct.variants[index];
                                                                if (e.target.value && e.target.value.trim() !== currentVariant.imageUrl && !e.target.value.includes('res.cloudinary.com')) {
                                                                    uploadVariantImageToCloud(e.target.value, index);
                                                                }
                                                            }}
                                                            className={`shadow appearance-none border ${formErrors[`variant-${index}-imageUrl`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-xs text-neutral-light`}
                                                            placeholder="Ej. https://tuservicio.com/variante_azul.jpg"
                                                        />
                                                        {formErrors[`variant-${index}-imageUrl`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-imageUrl`]}</p>}
                                                    </div>
                                                    {(variant.imageUrl) ? (
                                                        <div className="mt-2 border border-neutral-gray-600 rounded-lg p-2 text-center bg-neutral-gray-800">
                                                            <p className="text-neutral-gray-400 text-xs mb-1">Previsualización:</p>
                                                            <img
                                                                src={variant.imageUrl}
                                                                alt={`Variante ${index + 1}`}
                                                                className="max-w-full h-auto max-h-32 object-contain mx-auto rounded-md"
                                                                onError={(e) => { e.target.onerror = null; e.target.src = 'https://placehold.co/150x100/2D3748/F8F8F2?text=Error'; }}
                                                            />
                                                        </div>
                                                    ) : (
                                                        <div className="mt-2 border border-neutral-gray-600 rounded-lg p-2 text-center bg-neutral-gray-800 text-neutral-gray-400 text-xs py-4">
                                                            Sin imagen de variante.
                                                        </div>
                                                    )}
                                                </div>
                                            </div>
                                        </div>
                                    ))}
                                    <button
                                        type="button"
                                        onClick={addVariant}
                                        className="w-full bg-success-green hover:bg-green-700 text-deep-night-blue font-bold py-2 px-4 rounded-lg flex items-center justify-center transition duration-200 shadow-md focus:outline-none focus:ring-2 focus:ring-green-500 mt-4"
                                    >
                                        <Plus size={20} className="mr-2" /> Añadir Variante
                                    </button>
                                </div>
                            </div>
                        )}
                    </div>
                    {/* --- END OF ADVANCED OPTIONS SECTION (ADD) --- */}

                    {/* Form Submission Button */}
                    <div className="md:col-span-2 text-right">
                        <button
                            type="submit"
                            className="bg-copper-rose-accent hover:bg-rose-700 text-deep-night-blue font-bold py-3 px-8 rounded-lg shadow-md transition duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-red-500 focus:ring-opacity-50 flex items-center justify-center float-right"
                            // Disable button while loading or if any image is uploading (main or variant)
                            disabled={loading || isUploadingMainImage || Object.values(variantImageUploading).some(val => val)}
                        >
                            {loading ? <Loader2 size={20} className="mr-2 animate-spin" /> : <Save size={20} className="mr-2" />} Guardar Producto
                        </button>
                    </div>
                </form>
            </ProductModal>

            {/* --- Edit Product Modal --- */}
            <ProductModal
                isOpen={showEditModal}
                onClose={() => {
                    // Reset all relevant states when closing the edit product modal
                    setShowEditModal(false);
                    setEditingProduct(null); // Clear the editing product state
                    setError('');
                    setSuccessMessage('');
                    setImageFile(null); // Clear selected main image file
                    setImagePreviewUrl(''); // Clear main image preview URL
                    setShowAdvancedOptions(false); // Collapse advanced options
                    setFormErrors({}); // Clear all form errors
                }}
                title={`Editar Producto: ${editingProduct?.name || ''}`}
            >
                {/* Only render the form if there's a product being edited */}
                {editingProduct && (
                    <form onSubmit={handleUpdateProduct} className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label htmlFor="editName" className="block text-neutral-light text-sm font-bold mb-2">Nombre del Producto:</label>
                            <input
                                type="text"
                                id="editName"
                                name="name"
                                value={editingProduct.name}
                                onChange={handleInputChange}
                                className={`shadow appearance-none border ${formErrors.name ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                placeholder="Ej. Camiseta Deportiva"
                                required
                            />
                            {formErrors.name && <p className="text-red-400 text-xs mt-1">{formErrors.name}</p>}
                        </div>
                        <div>
                            <label htmlFor="editSku" className="block text-neutral-light text-sm font-bold mb-2">SKU (Producto Principal):</label>
                            <input
                                type="text"
                                id="editSku"
                                name="sku"
                                value={editingProduct.sku}
                                onChange={handleInputChange}
                                className={`shadow appearance-none border ${formErrors.sku ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                disabled={editingProduct.variants.length > 0} // Disabled if variants exist
                            />
                            {formErrors.sku && <p className="text-red-400 text-xs mt-1">{formErrors.sku}</p>}
                        </div>
                        <div>
                            <label htmlFor="editCategory" className="block text-neutral-light text-sm font-bold mb-2">Categoría:</label>
                            <input
                                type="text"
                                id="editCategory"
                                name="category"
                                value={editingProduct.category}
                                onChange={handleInputChange}
                                className={`shadow appearance-none border ${formErrors.category ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                placeholder="Ej. Ropa, Electrónica, Alimentos"
                                required
                            />
                            {formErrors.category && <p className="text-red-400 text-xs mt-1">{formErrors.category}</p>}
                        </div>
                        <div>
                            <label htmlFor="editUnitOfMeasure" className="block text-neutral-light text-sm font-bold mb-2">Unidad de Medida (Producto Principal):</label>
                            <select
                                id="editUnitOfMeasure"
                                name="unitOfMeasure"
                                value={editingProduct.unitOfMeasure}
                                onChange={handleInputChange}
                                className={`shadow appearance-none border ${formErrors.unitOfMeasure ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal cursor-pointer text-neutral-light`}
                                required={editingProduct.variants.length === 0}
                                disabled={editingProduct.variants.length > 0}
                            >
                                {unitOfMeasureOptions.map(unit => (
                                    <option key={unit} value={unit}>{unit}</option>
                                ))}
                            </select>
                            {formErrors.unitOfMeasure && <p className="text-red-400 text-xs mt-1">{formErrors.unitOfMeasure}</p>}
                        </div>
                        <div>
                            <label htmlFor="editBrand" className="block text-neutral-light text-sm font-bold mb-2">Marca (Opcional):</label>
                            <input
                                type="text"
                                id="editBrand"
                                name="brand"
                                value={editingProduct.brand}
                                onChange={handleInputChange}
                                className={`shadow appearance-none border ${formErrors.brand ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                placeholder="Ej. Nike, Samsung"
                            />
                            {formErrors.brand && <p className="text-red-400 text-xs mt-1">{formErrors.brand}</p>}
                        </div>
                        <div>
                            <label htmlFor="editSupplier" className="block text-neutral-light text-sm font-bold mb-2">Proveedor (Opcional):</label>
                            <input
                                type="text"
                                id="editSupplier"
                                name="supplier"
                                value={editingProduct.supplier}
                                onChange={handleInputChange}
                                className={`shadow appearance-none border ${formErrors.supplier ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                placeholder="Ej. Distribuciones ABC"
                            />
                            {formErrors.supplier && <p className="text-red-400 text-xs mt-1">{formErrors.supplier}</p>}
                        </div>
                        <div>
                            <label htmlFor="editPrice" className="block text-neutral-light text-sm font-bold mb-2">Precio de Venta ($) (Producto Principal):</label>
                            <input
                                type="number"
                                id="editPrice"
                                name="price"
                                value={editingProduct.price}
                                onChange={handleInputChange}
                                step="0.01"
                                className={`shadow appearance-none border ${formErrors.price ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                placeholder="Ej. 29.99"
                                required={editingProduct.variants.length === 0}
                                disabled={editingProduct.variants.length > 0}
                            />
                            {formErrors.price && <p className="text-red-400 text-xs mt-1">{formErrors.price}</p>}
                        </div>
                        <div>
                            <label htmlFor="editCostPrice" className="block text-neutral-light text-sm font-bold mb-2">Costo Unitario ($) (Producto Principal):</label>
                            <input
                                type="number"
                                id="editCostPrice"
                                name="costPrice"
                                value={editingProduct.costPrice}
                                onChange={handleInputChange}
                                step="0.01"
                                className={`shadow appearance-none border ${formErrors.costPrice ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                placeholder="Ej. 15.00"
                                required={editingProduct.variants.length === 0}
                                disabled={editingProduct.variants.length > 0}
                            />
                            {formErrors.costPrice && <p className="text-red-400 text-xs mt-1">{formErrors.costPrice}</p>}
                        </div>
                        <div>
                            <label htmlFor="editStock" className="block text-neutral-light text-sm font-bold mb-2">Stock (Producto Principal):</label>
                            <input
                                type="number"
                                id="editStock"
                                name="stock"
                                value={editingProduct.stock}
                                onChange={handleInputChange}
                                className={`shadow appearance-none border ${formErrors.stock ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                placeholder="Ej. 100"
                                required={editingProduct.variants.length === 0}
                                disabled={editingProduct.variants.length > 0}
                            />
                            {formErrors.stock && <p className="text-red-400 text-xs mt-1">{formErrors.stock}</p>}
                        </div>
                        <div className="md:col-span-2">
                            <label htmlFor="editDescription" className="block text-neutral-light text-sm font-bold mb-2">Descripción (Opcional):</label>
                            <textarea
                                id="editDescription"
                                name="description"
                                value={editingProduct.description}
                                onChange={handleInputChange}
                                className={`shadow appearance-none border ${formErrors.description ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 h-24 text-neutral-light`}
                                placeholder="Descripción detallada del producto..."
                            />
                            {formErrors.description && <p className="text-red-400 text-xs mt-1">{formErrors.description}</p>}
                        </div>

                        {/* --- START OF ADVANCED OPTIONS SECTION (EDIT) --- */}
                        <div className="md:col-span-2 mt-4">
                            {/* Info message for disabled fields when variants exist */}
                            {editingProduct.variants.length > 0 && (
                                <p className="text-yellow-400 text-sm mb-4">
                                    <Info size={16} className="inline-block mr-1" /> Los campos de Precio, Stock, Costo, SKU, Unidad de Medida, Color, Talla/Tamaño y Material del producto principal están deshabilitados porque este producto tiene variantes. Gestiona estos detalles en cada variante.
                                </p>
                            )}
                            {/* Toggle button for advanced options */}
                            <button
                                type="button"
                                onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}
                                className="w-full bg-neutral-gray-700 hover:bg-neutral-gray-600 text-neutral-light font-bold py-3 px-4 rounded-lg flex items-center justify-between transition duration-200 focus:outline-none focus:ring-2 focus:ring-neutral-gray-500"
                            >
                                <span>Opciones Avanzadas</span>
                                {showAdvancedOptions ? <ChevronUp size={20} /> : <ChevronDown size={20} />}
                            </button>
                            {/* Collapsible advanced options content */}
                            {showAdvancedOptions && (
                                <div className="mt-4 border border-neutral-gray-700 rounded-lg p-4 bg-dark-charcoal animate-fade-in-down">
                                    {/* Main Product Attributes (Color, Size, Material) */}
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                                        <div>
                                            <label htmlFor="editColor" className="block text-neutral-light text-sm font-bold mb-2">Color (Producto Principal - Opcional):</label>
                                            <input
                                                type="text"
                                                id="editColor"
                                                name="color"
                                                value={editingProduct.color}
                                                onChange={handleInputChange}
                                                className={`shadow appearance-none border ${formErrors.color ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                placeholder="Ej. Azul, Negro"
                                                disabled={editingProduct.variants.length > 0}
                                            />
                                            {formErrors.color && <p className="text-red-400 text-xs mt-1">{formErrors.color}</p>}
                                        </div>
                                        <div>
                                            <label htmlFor="editSize" className="block text-neutral-light text-sm font-bold mb-2">Talla/Tamaño (Producto Principal - Opcional):</label>
                                            <input
                                                type="text"
                                                id="editSize"
                                                name="size"
                                                value={editingProduct.size}
                                                onChange={handleInputChange}
                                                className={`shadow appearance-none border ${formErrors.size ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                placeholder="Ej. S, L, XL, 32GB"
                                                disabled={editingProduct.variants.length > 0}
                                            />
                                            {formErrors.size && <p className="text-red-400 text-xs mt-1">{formErrors.size}</p>}
                                        </div>
                                        <div className="md:col-span-2">
                                            <label htmlFor="editMaterial" className="block text-neutral-light text-sm font-bold mb-2">Material (Producto Principal - Opcional):</label>
                                            <input
                                                type="text"
                                                id="editMaterial"
                                                name="material"
                                                value={editingProduct.material}
                                                onChange={handleInputChange}
                                                className={`shadow appearance-none border ${formErrors.material ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                placeholder="Ej. Algodón, Plástico, Metal"
                                                disabled={editingProduct.variants.length > 0}
                                            />
                                            {formErrors.material && <p className="text-red-400 text-xs mt-1">{formErrors.material}</p>}
                                        </div>
                                    </div>
                                    {/* Section for main product image upload or URL */}
                                    <div className="mb-6">
                                        <h4 className="text-xl font-semibold text-neutral-light mb-3">Imagen Principal del Producto (Opcional):</h4>
                                        <div className="flex flex-col gap-4">
                                            {/* Option 1: Upload local file */}
                                            <div className="flex flex-col">
                                                <label htmlFor="editImageFile" className="block text-neutral-light text-sm font-bold mb-2 cursor-pointer bg-neutral-gray-600 hover:bg-neutral-gray-700 py-2 px-4 rounded-lg text-center flex items-center justify-center transition duration-200">
                                                    {isUploadingMainImage ? <Loader2 size={20} className="mr-2 animate-spin" /> : <Upload size={20} className="mr-2"/>} Cargar Nueva Imagen desde mi Dispositivo
                                                </label>
                                                <input
                                                    type="file"
                                                    id="editImageFile"
                                                    name="imageFile"
                                                    accept="image/*"
                                                    onChange={handleImageFileChange}
                                                    className="hidden"
                                                />
                                                {imageFile && (
                                                    <p className="text-neutral-gray-400 text-sm mt-2">Archivo seleccionado: <span className="font-semibold">{imageFile.name}</span></p>
                                                )}
                                            </div>

                                            <div className="text-neutral-gray-400 text-center text-sm my-2">O</div>

                                            {/* Option 2: Paste image URL */}
                                            <div>
                                                <label htmlFor="editImageUrl" className="block text-neutral-light text-sm font-bold mb-2">
                                                    Pega la URL de una Imagen Externa:
                                                </label>
                                                <input
                                                    type="url"
                                                    id="editImageUrl"
                                                    name="imageUrl"
                                                    value={editingProduct.imageUrl}
                                                    onChange={handleInputChange}
                                                    className={`shadow appearance-none border ${formErrors.imageUrl ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                    placeholder="Ej. https://tuservicio.com/imagen.jpg"
                                                />
                                                {formErrors.imageUrl && <p className="text-red-400 text-xs mt-1">{formErrors.imageUrl}</p>}
                                            </div>

                                            {/* Image preview (from local file or URL) */}
                                            {(imagePreviewUrl || editingProduct.imageUrl) ? (
                                                <div className="mt-4 border border-neutral-gray-600 rounded-lg p-2 text-center bg-neutral-gray-800">
                                                    <p className="text-neutral-gray-400 text-sm mb-2">Previsualización de Imagen:</p>
                                                    <img
                                                        src={imagePreviewUrl || editingProduct.imageUrl} // Prioritize local preview, then URL from state
                                                        alt="Previsualización del Producto"
                                                        className="max-w-full h-auto max-h-48 object-contain mx-auto rounded-md"
                                                        onError={(e) => {
                                                            e.target.onerror = null; // Prevent infinite loop if placeholder also fails
                                                            e.target.src = 'https://placehold.co/600x400/2D3748/F8F8F2?text=Error+Cargando+Imagen'; // Fallback image
                                                            e.target.classList.add('border-red-500', 'border-2'); // Add visual cue for broken image
                                                        }}
                                                    />
                                                    <p className="text-orange-400 text-xs mt-1">Si la imagen no carga, la URL puede ser incorrecta o el archivo no es válido.</p>
                                                </div>
                                            ) : (
                                                <div className="mt-4 border border-neutral-gray-600 rounded-lg p-2 text-center bg-neutral-gray-800 text-neutral-gray-400 text-sm py-8">
                                                    No hay imagen para previsualizar.
                                                </div>
                                            )}
                                        </div>
                                    </div>

                                    {/* Section for Variant Management */}
                                    <div className="mt-6 border-t border-neutral-gray-700 pt-6">
                                        <h4 className="text-xl font-semibold text-neutral-light mb-4">Gestión de Variantes de Producto:</h4>
                                        <p className="text-neutral-gray-300 text-sm mb-4">Define diferentes versiones de tu producto (ej. tallas, colores, materiales). Cada variante tendrá su propio SKU, precio, costo y stock.</p>

                                        {editingProduct.variants.map((variant, index) => (
                                            <div key={index} className="bg-neutral-gray-800 p-4 rounded-lg mb-4 border border-neutral-gray-700 relative">
                                                <h5 className="text-lg font-bold text-action-blue mb-3">Variante #{index + 1}</h5>
                                                <button
                                                    type="button"
                                                    onClick={() => removeVariant(index)}
                                                    className="absolute top-2 right-2 text-red-400 hover:text-red-600 transition-colors duration-200"
                                                    title="Eliminar esta variante"
                                                >
                                                    <X size={20} /> {/* 'X' icon for removing variant */}
                                                </button>
                                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                                    <div>
                                                        <label htmlFor={`editVariantName-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Nombre de Variante:</label>
                                                        <input
                                                            type="text"
                                                            id={`editVariantName-${index}`}
                                                            name="name"
                                                            value={variant.name}
                                                            onChange={(e) => handleVariantInputChange(index, e)}
                                                            className={`shadow appearance-none border ${formErrors[`variant-${index}-name`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                            placeholder="Ej. Talla M, Color Azul"
                                                            required
                                                        />
                                                        {formErrors[`variant-${index}-name`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-name`]}</p>}
                                                    </div>
                                                    <div>
                                                        <label htmlFor={`editVariantSku-${index}`} className="block text-neutral-light text-sm font-bold mb-2">SKU de Variante:</label>
                                                        <input
                                                            type="text"
                                                            id={`editVariantSku-${index}`}
                                                            name="sku"
                                                            value={variant.sku}
                                                            onChange={(e) => handleVariantInputChange(index, e)}
                                                            placeholder={variant.autoGeneratedVariantSku || 'Ej. CAMI-AZUL-M'}
                                                            className={`shadow appearance-none border ${formErrors[`variant-${index}-sku`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                            // ELIMINADO: required
                                                        />
                                                        {formErrors[`variant-${index}-sku`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-sku`]}</p>}
                                                    </div>
                                                    <div>
                                                        <label htmlFor={`editVariantPrice-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Precio de Venta ($):</label>
                                                        <input
                                                            type="number"
                                                            id={`editVariantPrice-${index}`}
                                                            name="price"
                                                            value={variant.price}
                                                            onChange={(e) => handleVariantInputChange(index, e)}
                                                            step="0.01"
                                                            className={`shadow appearance-none border ${formErrors[`variant-${index}-price`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                            placeholder="Ej. 25.99"
                                                            required
                                                        />
                                                        {formErrors[`variant-${index}-price`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-price`]}</p>}
                                                    </div>
                                                    <div>
                                                        <label htmlFor={`editVariantCostPrice-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Costo Unitario ($):</label>
                                                        <input
                                                            type="number"
                                                            id={`editVariantCostPrice-${index}`}
                                                            name="costPrice"
                                                            value={variant.costPrice}
                                                            onChange={(e) => handleVariantInputChange(index, e)}
                                                            step="0.01"
                                                            className={`shadow appearance-none border ${formErrors[`variant-${index}-costPrice`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                            placeholder="Ej. 12.50"
                                                            required
                                                        />
                                                        {formErrors[`variant-${index}-costPrice`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-costPrice`]}</p>}
                                                    </div>
                                                    <div>
                                                        <label htmlFor={`editVariantStock-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Stock:</label>
                                                        <input
                                                            type="number"
                                                            id={`editVariantStock-${index}`}
                                                            name="stock"
                                                            value={variant.stock}
                                                            onChange={(e) => handleVariantInputChange(index, e)}
                                                            className={`shadow appearance-none border ${formErrors[`variant-${index}-stock`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                            placeholder="Ej. 50"
                                                            required
                                                        />
                                                        {formErrors[`variant-${index}-stock`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-stock`]}</p>}
                                                    </div>
                                                    <div>
                                                        <label htmlFor={`editVariantUnitOfMeasure-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Unidad de Medida:</label>
                                                        <select
                                                            id={`editVariantUnitOfMeasure-${index}`}
                                                            name="unitOfMeasure"
                                                            value={variant.unitOfMeasure}
                                                            onChange={(e) => handleVariantInputChange(index, e)}
                                                            className={`shadow appearance-none border ${formErrors[`variant-${index}-unitOfMeasure`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal cursor-pointer text-neutral-light`}
                                                            required
                                                        >
                                                            {unitOfMeasureOptions.map(unit => (
                                                                <option key={unit} value={unit}>{unit}</option>
                                                            ))}
                                                        </select>
                                                        {formErrors[`variant-${index}-unitOfMeasure`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-unitOfMeasure`]}</p>}
                                                    </div>
                                                    {/* Additional variant attributes */}
                                                    <div>
                                                        <label htmlFor={`editVariantColor-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Color (Opcional):</label>
                                                        <input
                                                            type="text"
                                                            id={`editVariantColor-${index}`}
                                                            name="color"
                                                            value={variant.color}
                                                            onChange={(e) => handleVariantInputChange(index, e)}
                                                            className={`shadow appearance-none border ${formErrors[`variant-${index}-color`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                            placeholder="Ej. Rojo"
                                                        />
                                                        {formErrors[`variant-${index}-color`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-color`]}</p>}
                                                    </div>
                                                    <div>
                                                        <label htmlFor={`editVariantSize-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Talla/Tamaño (Opcional):</label>
                                                        <input
                                                            type="text"
                                                            id={`editVariantSize-${index}`}
                                                            name="size"
                                                            value={variant.size}
                                                            onChange={(e) => handleVariantInputChange(index, e)}
                                                            className={`shadow appearance-none border ${formErrors[`variant-${index}-size`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                            placeholder="Ej. S, L, XL, 32GB"
                                                        />
                                                        {formErrors[`variant-${index}-size`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-size`]}</p>}
                                                    </div>
                                                    <div className="md:col-span-2">
                                                        <label htmlFor={`editVariantMaterial-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Material (Opcional):</label>
                                                        <input
                                                            type="text"
                                                            id={`editVariantMaterial-${index}`}
                                                            name="material"
                                                            value={variant.material}
                                                            onChange={(e) => handleVariantInputChange(index, e)}
                                                            className={`shadow appearance-none border ${formErrors[`variant-${index}-material`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-neutral-light`}
                                                            placeholder="Ej. Algodón, Plástico"
                                                        />
                                                        {formErrors[`variant-${index}-material`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-material`]}</p>}
                                                    </div>
                                                    {/* Image section for the variant */}
                                                    <div className="md:col-span-2 border border-neutral-gray-700 rounded-lg p-3 flex flex-col gap-3 bg-neutral-gray-700">
                                                        <p className="block text-neutral-light text-sm font-bold">Imagen de la Variante (Opcional):</p>
                                                        <div className="flex flex-col">
                                                            <label htmlFor={`editVariantImageFile-${index}`} className="block text-neutral-light text-sm font-bold mb-2 cursor-pointer bg-neutral-gray-600 hover:bg-neutral-gray-500 py-2 px-4 rounded-lg text-center flex items-center justify-center transition duration-200">
                                                                {variantImageUploading[index] ? <Loader2 size={18} className="mr-2 animate-spin" /> : <Upload size={18} className="mr-2"/>} Cargar Imagen de Variante
                                                            </label>
                                                            <input
                                                                type="file"
                                                                id={`editVariantImageFile-${index}`}
                                                                name="imageFile"
                                                                accept="image/*"
                                                                onChange={(e) => handleVariantImageFileChange(index, e)}
                                                                className="hidden"
                                                            />
                                                        </div>
                                                        <div className="text-neutral-gray-400 text-center text-xs my-1">O</div>
                                                        <div>
                                                            <label htmlFor={`editVariantImageUrl-${index}`} className="block text-neutral-light text-sm font-bold mb-2">Pega la URL:</label>
                                                            <input
                                                                type="url"
                                                                id={`editVariantImageUrl-${index}`}
                                                                name="imageUrl"
                                                                value={variant.imageUrl}
                                                                onChange={(e) => handleVariantInputChange(index, e)}
                                                                onBlur={(e) => { // Upload image when focus is lost if URL changed
                                                                    // Only try to upload if URL is not empty and has changed
                                                                    const currentVariant = showAddModal ? newProduct.variants[index] : editingProduct.variants[index];
                                                                    if (e.target.value && e.target.value.trim() !== currentVariant.imageUrl && !e.target.value.includes('res.cloudinary.com')) {
                                                                        uploadVariantImageToCloud(e.target.value, index);
                                                                    }
                                                                }}
                                                                className={`shadow appearance-none border ${formErrors[`variant-${index}-imageUrl`] ? 'border-red-500' : 'border-neutral-gray-700'} rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:ring-2 focus:ring-action-blue bg-dark-charcoal placeholder-neutral-gray-500 text-xs text-neutral-light`}
                                                                placeholder="Ej. https://tuservicio.com/variante_azul.jpg"
                                                            />
                                                            {formErrors[`variant-${index}-imageUrl`] && <p className="text-red-400 text-xs mt-1">{formErrors[`variant-${index}-imageUrl`]}</p>}
                                                        </div>
                                                        {(variant.imageUrl) ? (
                                                            <div className="mt-2 border border-neutral-gray-600 rounded-lg p-2 text-center bg-neutral-gray-800">
                                                                <p className="text-neutral-gray-400 text-xs mb-1">Previsualización:</p>
                                                                <img
                                                                    src={variant.imageUrl}
                                                                    alt={`Variante ${index + 1}`}
                                                                    className="max-w-full h-auto max-h-32 object-contain mx-auto rounded-md"
                                                                    onError={(e) => { e.target.onerror = null; e.target.src = 'https://placehold.co/150x100/2D3748/F8F8F2?text=Error'; }}
                                                                />
                                                            </div>
                                                        ) : (
                                                            <div className="mt-2 border border-neutral-gray-600 rounded-lg p-2 text-center bg-neutral-gray-800 text-neutral-gray-400 text-xs py-4">
                                                                Sin imagen de variante.
                                                            </div>
                                                        )}
                                                    </div>
                                                </div>
                                            </div>
                                        ))}
                                        <button
                                            type="button"
                                            onClick={addVariant}
                                            className="w-full bg-success-green hover:bg-green-700 text-deep-night-blue font-bold py-2 px-4 rounded-lg flex items-center justify-center transition duration-200 shadow-md focus:outline-none focus:ring-2 focus:ring-green-500 mt-4"
                                        >
                                            <Plus size={20} className="mr-2" /> Añadir Variante
                                        </button>
                                    </div>
                                </div>
                            )}
                        </div>
                        {/* --- END OF ADVANCED OPTIONS SECTION (EDIT) --- */}

                        {/* Form Submission Button */}
                        <div className="md:col-span-2 text-right">
                            <button
                                type="submit"
                                className="bg-action-blue hover:bg-blue-700 text-neutral-light font-bold py-3 px-8 rounded-lg shadow-md transition duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-500 focus:ring-opacity-50 flex items-center justify-center float-right"
                                // Disable button while loading or if any image is uploading (main or variant)
                                disabled={loading || isUploadingMainImage || Object.values(variantImageUploading).some(val => val)}
                            >
                                {loading ? <Loader2 size={20} className="mr-2 animate-spin" /> : <Save size={20} className="mr-2" />} Actualizar Producto
                            </button>
                        </div>
                    </form>
                )}
            </ProductModal>

            <h3 className="text-3xl font-semibold text-neutral-light mb-6 border-b border-neutral-gray-700 pb-3">Lista de Productos</h3>

            {/* Conditional rendering for loading, no products, or product list */}
            {loading && !products.length ? (
                <div className="flex justify-center items-center h-48">
                    <Loader2 size={48} className="animate-spin text-copper-rose-accent" />
                    <span className="sr-only">Cargando...</span>
                </div>
            ) : products.length === 0 ? (
                <p className="text-neutral-gray-300 text-lg text-center mt-10">No hay productos que coincidan con la búsqueda o el filtro. ¡Intenta añadir uno!</p>
            ) : (
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                    {products.map((product) => (
                        <div key={product._id} className="bg-deep-night-blue p-6 rounded-lg shadow-lg border border-action-blue-light flex flex-col justify-between transform transition duration-300 hover:scale-[1.02] hover:shadow-2xl">
                            <div>
                                {/* Product Image (main product image first, then first variant, then fallback) */}
                                <div className="w-full h-48 mb-4 bg-neutral-gray-800 rounded-md overflow-hidden flex items-center justify-center">
                                    <img
                                        src={product.imageUrl || ((product.variants && product.variants.length > 0 && product.variants[0].imageUrl) ? product.variants[0].imageUrl : 'https://placehold.co/600x400/2D3748/F8F8F2?text=Sin+Imagen')}
                                        alt={product.name || 'Producto'}
                                        className="object-cover w-full h-full"
                                        onError={(e) => {
                                            e.target.onerror = null;
                                            e.target.src = 'https://placehold.co/600x400/2D3748/F8F8F2?text=Error+Cargando+Imagen';
                                            e.target.classList.add('border-red-500', 'border-2');
                                        }}
                                    />
                                </div>
                                <h4 className="text-xl font-bold text-copper-rose-accent mb-2 truncate">{product.name}</h4>
                                <p className="text-neutral-light mb-1 text-sm"><span className="font-semibold text-action-blue">SKU:</span> {product.sku || 'N/A'}</p>
                                {product.category && <p className="text-neutral-light mb-1 text-sm"><span className="font-semibold text-action-blue">Categoría:</span> <span className="bg-neutral-gray-700 text-neutral-light px-2 py-0.5 rounded-full text-xs font-medium">{product.category}</span></p>}
                                {product.brand && <p className="text-neutral-light mb-1 text-sm"><span className="font-semibold text-action-blue">Marca:</span> {product.brand}</p>}
                                {product.supplier && <p className="text-neutral-light mb-1 text-sm"><span className="font-semibold text-action-blue">Proveedor:</span> {product.supplier}</p>}
                                {product.description && <p className="text-neutral-gray-300 mb-2 text-sm line-clamp-2">{product.description}</p>}
                                
                                {/* Display variant details if they exist */}
                                {product.variants && product.variants.length > 0 ? (
                                    <div className="mt-2 pt-2 border-t border-neutral-gray-700">
                                        <p className="text-neutral-light font-bold text-sm mb-2">Variantes ({product.variants.length}):</p>
                                        {product.variants.map((variant, idx) => (
                                            <div key={idx} className="bg-neutral-gray-700 rounded-md p-2 mb-1 last:mb-0">
                                                <p className="text-neutral-light text-xs font-semibold">{variant.name}</p>
                                                <p className="text-neutral-gray-400 text-xs">
                                                    SKU: {variant.sku} | P: ${parseFloat(variant.price).toFixed(2)} | S: {variant.stock} {variant.unitOfMeasure}
                                                </p>
                                                <div className="flex flex-wrap gap-x-2 text-neutral-gray-400 text-xs">
                                                    {variant.color && <span>Color: {variant.color}</span>}
                                                    {variant.size && <span>Talla: {variant.size}</span>}
                                                    {variant.material && <span>Material: {variant.material}</span>}
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                ) : (
                                    <>
                                        {/* Display main product attributes if no variants */}
                                        <p className="text-neutral-light mb-1"><span className="font-semibold">Unidad:</span> {product.unitOfMeasure}</p>
                                        <p className="text-neutral-light mb-1"><span className="font-semibold">Precio de Venta:</span> <span className="text-success-green font-bold text-lg">${parseFloat(product.price).toFixed(2)}</span></p>
                                        <p className="text-neutral-light mb-1"><span className="font-semibold">Costo Unitario:</span> <span className="text-yellow-400 font-bold">${parseFloat(product.costPrice).toFixed(2)}</span></p>
                                        <p className="text-neutral-light mb-3"><span className="font-semibold">Stock:</span> <span className={`${product.stock <= 5 ? 'text-red-400' : 'text-yellow-400'} font-bold`}>{product.stock} unidades</span></p>
                                        {product.color && <p className="text-neutral-light mb-1 text-sm"><span className="font-semibold">Color:</span> {product.color}</p>}
                                        {product.size && <p className="text-neutral-light mb-1 text-sm"><span className="font-semibold">Talla:</span> {product.size}</p>}
                                        {product.material && <p className="text-neutral-light mb-1 text-sm"><span className="font-semibold">Material:</span> {product.material}</p>}
                                    </>
                                )}
                            </div>
                            {/* Action Buttons */}
                            <div className="flex justify-end gap-2 mt-4">
                                <button
                                    onClick={() => handleEditClick(product)}
                                    className="bg-neutral-gray-700 text-neutral-light px-4 py-2 rounded-lg text-sm font-medium hover:bg-neutral-gray-600 transition duration-200 flex items-center shadow-md focus:outline-none focus:ring-2 focus:ring-neutral-gray-500"
                                >
                                    <Edit size={16} className="mr-1"/> Editar
                                </button>
                                <button
                                    onClick={() => confirmDeleteProduct(product._id)}
                                    className="bg-red-600 text-neutral-light px-4 py-2 rounded-lg text-sm font-medium hover:bg-red-700 transition duration-200 flex items-center shadow-md focus:outline-none focus:ring-2 focus:ring-red-500"
                                >
                                    <Trash2 size={16} className="mr-1"/> Eliminar
                                </button>
                            </div>
                        </div>
                    ))}
                </div>
            )}

            {/* Pagination Controls */}
            {totalPages > 1 && (
                <div className="flex justify-center items-center space-x-3 mt-8 text-neutral-light">
                    <button
                        onClick={goToPrevPage}
                        disabled={currentPage === 1 || loading}
                        className="bg-action-blue hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed transition duration-200 flex items-center justify-center"
                    >
                        <ChevronLeft size={20} />
                    </button>
                    <span className="text-lg font-semibold text-copper-rose-accent">Página {currentPage} de {totalPages}</span>
                    <button
                        onClick={goToNextPage}
                        disabled={currentPage === totalPages || loading}
                        className="bg-action-blue hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed transition duration-200 flex items-center justify-center"
                    >
                        <ChevronRight size={20} />
                    </button>
                </div>
            )}
        </div>
    );
};

export default InventoryPage;
